  Thu Jan 21 2016 21:36                                                                                                    Page 1


                                               ***************************************
                                               **      WDC 65C816 Macro Assembler   **
                                               **                                   **
                                               **     Version 3.49.1- Feb  6 2006    **
                                               ***************************************

     1                        ;===============================================================================
     2                        ;  ______  ______        _   _            _
     3                        ; / ___\ \/ / __ )      | | | | __ _  ___| | _____ _ __
     4                        ; \___ \\  /|  _ \ _____| |_| |/ _` |/ __| |/ / _ \ '__|
     5                        ;  ___) /  \| |_) |_____|  _  | (_| | (__|   <  __/ |
     6                        ; |____/_/\_\____/      |_| |_|\__,_|\___|_|\_\___|_|
     7                        ;
     8                        ; A program for Hacking your W65C265SXB or W65C816SXB
     9                        ;-------------------------------------------------------------------------------
    10                        ; Copyright (C)2015 Andrew Jacobs
    11                        ; All rights reserved.
    12                        ;
    13                        ; This work is made available under the terms of the Creative Commons
    14                        ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
    15                        ; following URL to see the details.
    16                        ;
    17                        ; http://creativecommons.org/licenses/by-nc-sa/4.0/
    18                        ;
    19                        ;===============================================================================
    20                        ; Notes:
    21                        ;
    22                        ; This program provides a simple monitor that you can use to inspect the memory
    23                        ; in your SXB and reprogram parts of the flash ROM.
    24                        ;
    25                        ;-------------------------------------------------------------------------------
    26                        
    27                                        pw      132
    28                                        inclist on
    29                        
    30                                        chip    65816
    31                        
    32                                        ifdef   W65C265SXB
    33                                        include "w65c265.inc"
     1                        ;===============================================================================
     2                        ; __        ____  ____   ____ ____   __  ____
     3                        ; \ \      / / /_| ___| / ___|___ \ / /_| ___|
     4                        ;  \ \ /\ / / '_ \___ \| |     __) | '_ \___ \
     5                        ;   \ V  V /| (_) |__) | |___ / __/| (_) |__) |
     6                        ;    \_/\_/  \___/____/ \____|_____|\___/____/
     7                        ;
     8                        ; Western Design Center W65C265 device definitions
     9                        ;-------------------------------------------------------------------------------
    10                        ; Copyright (C)2015 HandCoded Software Ltd.
    11                        ; All rights reserved.
    12                        ;
    13                        ; This work is made available under the terms of the Creative Commons
    14                        ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
    15                        ; following URL to see the details.
    16                        ;
    17                        ; http://creativecommons.org/licenses/by-nc-sa/4.0/
    18                        ;
    19                        ;===============================================================================
  Thu Jan 21 2016 21:36                                                                                                    Page 2


    20                        ; Notes:
    21                        ;
    22                        ; Various macros and definitions for the W65C265 microcontroller.
    23                        ;
    24                        ;===============================================================================
    25                        ; Revision History:
    26                        ;
    27                        ; 2015-12-18 AJ Initial version
    28                        ;-------------------------------------------------------------------------------
    29                        ; $Id$
    30                        ;-------------------------------------------------------------------------------
    31                        
    32                        ;===============================================================================
    33                        ; Hardware Registers
    34                        ;-------------------------------------------------------------------------------
    35                        
    36                        ;00DF00-1F CS0 Port Replacement & Expansion uninitialized
    37                        
    38             0000DF00   PD0             equ     $00DF00         ; Port 0 Data Register
    39             0000DF01   PD1             equ     $00DF01         ; Port 1 Data Register
    40             0000DF02   PD2             equ     $00DF02         ; Port 2 Data Register
    41             0000DF03   PD3             equ     $00DF03         ; Port 3 Data Register
    42             0000DF04   PDD0            equ     $00DF04         ; Port 0 Data Direction Register
    43             0000DF05   PDD1            equ     $00DF05         ; Port 1 Data Direction Register
    44             0000DF06   PDD2            equ     $00DF06         ; Port 2 Data Direction Register
    45             0000DF07   PDD3            equ     $00DF07         ; Port 3 Data Direction Register
    46                        
    47             0000DF20   PD4             equ     $00DF20         ; Port 4 Data Register
    48             0000DF21   PD5             equ     $00DF21         ; Port 5 Data Register
    49             0000DF22   PD6             equ     $00DF22         ; Port 6 Data Register
    50             0000DF23   PD7             equ     $00DF23         ; Port 7 Data Register
    51             0000DF24   PDD4            equ     $00DF24         ; Port 4 Data Direction Register
    52             0000DF25   PDD5            equ     $00DF25         ; Port 5 Data Direction Register
    53             0000DF26   PDD6            equ     $00DF26         ; Port 6 Data Direction Register
    54             0000DF27   PCS7            equ     $00DF27         ; Port 7 Chip Select
    55                        
    56                        ;00DF28-3F --- Reserved uninitialized
    57                        
    58             0000DF40   BCR             equ     $00DF40         ; Bus Control Register
    59             0000DF41   SSCR            equ     $00DF41         ; System Speed Control Register
    60             0000DF42   TCR             equ     $00DF42         ; Timer Control Register
    61             0000DF43   TER             equ     $00DF43         ; Timer Enable Register
    62             0000DF44   TIFR            equ     $00DF44         ; Timer Interrupt Flag Register
    63             0000DF45   EIFR            equ     $00DF45         ; Edge Interrupt Flag Register
    64             0000DF46   TIER            equ     $00DF46         ; Timer Interrupt Enable Register
    65             0000DF47   EIER            equ     $00DF47         ; Edge Interrupt Enable Register
    66             0000DF48   UIFR            equ     $00DF48         ; UART Interrupt Flag Register
    67             0000DF49   UIER            equ     $00DF49         ; UART Interrupt Enable Register
    68                        
    69             0000DF50   T0LL            equ     $00DF50         ; Timer 0 Latch Low
    70             0000DF51   T0LH            equ     $00DF51         ; Timer 0 Latch High
    71             0000DF52   T1LL            equ     $00DF52         ; Timer 1 Latch Low
    72             0000DF53   T1LH            equ     $00DF53         ; Timer 1 Latch High
    73             0000DF54   T2LL            equ     $00DF54         ; Timer 2 Latch Low
    74             0000DF55   T2LH            equ     $00DF55         ; Timer 2 Latch High
    75             0000DF56   T3LL            equ     $00DF56         ; Timer 3 Latch Low
    76             0000DF57   T3LH            equ     $00DF57         ; Timer 3 Latch High
    77             0000DF58   T4LL            equ     $00DF58         ; Timer 4 Latch Low
  Thu Jan 21 2016 21:36                                                                                                    Page 3


    78             0000DF59   T4LH            equ     $00DF59         ; Timer 4 Latch High
    79             0000DF5A   T5LL            equ     $00DF5A         ; Timer 5 Latch Low
    80             0000DF5B   T5LH            equ     $00DF5B         ; Timer 5 Latch High
    81             0000DF5C   T6LL            equ     $00DF5C         ; Timer 6 Latch Low
    82             0000DF5D   T6LH            equ     $00DF5D         ; Timer 6 Latch High
    83             0000DF5E   T7LL            equ     $00DF5E         ; Timer 7 Latch Low
    84             0000DF5F   T7LH            equ     $00DF5F         ; Timer 7 Latch High
    85             0000DF60   T0CL            equ     $00DF60         ; Timer 0 Counter Low
    86             0000DF61   T0CH            equ     $00DF61         ; Timer 0 Counter High
    87             0000DF62   T1CL            equ     $00DF62         ; Timer 1 Counter Low
    88             0000DF63   T1CH            equ     $00DF63         ; Timer 1 Counter High
    89             0000DF64   T2CL            equ     $00DF64         ; Timer 2 Counter Low
    90             0000DF65   T2CH            equ     $00DF65         ; Timer 2 Counter High
    91             0000DF66   T3CL            equ     $00DF66         ; Timer 3 Counter Low
    92             0000DF67   T3CH            equ     $00DF67         ; Timer 3 Counter High
    93             0000DF68   T4CL            equ     $00DF68         ; Timer 4 Counter Low
    94             0000DF69   T4CH            equ     $00DF69         ; Timer 4 Counter High
    95             0000DF6A   T5CL            equ     $00DF6A         ; Timer 5 Counter Low
    96             0000DF6B   T5CH            equ     $00DF6B         ; Timer 5 Counter High
    97             0000DF6C   T6CL            equ     $00DF6C         ; Timer 6 Counter Low
    98             0000DF6D   T6CH            equ     $00DF6D         ; Timer 6 Counter High
    99             0000DF6E   T7CL            equ     $00DF6E         ; Timer 7 Counter Low
   100             0000DF6F   T7CH            equ     $00DF6F         ; Timer 7 Counter High
   101                        
   102                        ;00DFC0-FF CS1 COProcessor Expansion uninitialized
   103                        
   104             0000DF70   ACSR0           equ     $00DF70         ; UART 0 Control/Status Register
   105             0000DF71   ARTD0           equ     $00DF71         ; UART 0 Data Register
   106             0000DF72   ACSR1           equ     $00DF72         ; UART 1 Control/Status Register
   107             0000DF73   ARTD1           equ     $00DF73         ; UART 1 Data Register
   108             0000DF74   ACSR2           equ     $00DF74         ; UART 2 Control/Status Register
   109             0000DF75   ARTD2           equ     $00DF75         ; UART 2 Data Register
   110             0000DF76   ACSR3           equ     $00DF76         ; UART 3 Control/Status Register
   111             0000DF77   ARTD3           equ     $00DF77         ; UART 3 Data Register
   112             0000DF78   PIBFR           equ     $00DF78         ; Parallel Interface Flag Register
   113             0000DF79   PIBER           equ     $00DF79         ; Parallel Interface Enable Register
   114             0000DF7A   PIR2            equ     $00DF7A         ; Parallel Interface Register 2
   115             0000DF7B   PIR3            equ     $00DF7B         ; Parallel Interface Register 3
   116             0000DF7C   PIR4            equ     $00DF7C         ; Parallel Interface Register 4
   117             0000DF7D   PIR5            equ     $00DF7D         ; Parallel Interface Register 5
   118             0000DF7E   PIR6            equ     $00DF7E         ; Parallel Interface Register 6
   119             0000DF7F   PIR7            equ     $00DF7F         ; Parallel Interface Register 7
   120                        
   121                        ;00DF80-BF RAM RAM Registers uninitialized
   122                        
   123                                        include "w65c816.inc"
     1                        ;==============================================================================
     2                        ; __        ____  ____   ____ ___  _  __   
     3                        ; \ \      / / /_| ___| / ___( _ )/ |/ /_  
     4                        ;  \ \ /\ / / '_ \___ \| |   / _ \| | '_ \ 
     5                        ;   \ V  V /| (_) |__) | |__| (_) | | (_) |
     6                        ;    \_/\_/  \___/____/ \____\___/|_|\___/ 
     7                        ;
     8                        ; Western Design Center W65C816 device definitions                                          
     9                        ;------------------------------------------------------------------------------
    10                        ; Copyright (C)2015 HandCoded Software Ltd.
    11                        ; All rights reserved.
    12                        ;
  Thu Jan 21 2016 21:36                                                                                                    Page 4


    13                        ; This work is made available under the terms of the Creative Commons
    14                        ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
    15                        ; following URL to see the details.
    16                        ;
    17                        ; http://creativecommons.org/licenses/by-nc-sa/4.0/
    18                        ;
    19                        ;===============================================================================
    20                        ; Notes:
    21                        ;
    22                        ; Various macros and definitions for the W65C816 microprocessor.
    23                        ;
    24                        ;===============================================================================
    25                        ; Revision History:
    26                        ;
    27                        ; 2015-12-18 AJ Initial version
    28                        ;-------------------------------------------------------------------------------
    29                        ; $Id$
    30                        ;-------------------------------------------------------------------------------
    31                        
    32                        ;==============================================================================
    33                        ; Status Register Bits
    34                        ;------------------------------------------------------------------------------
    35                        
    36             00000080   N_FLAG          equ     1<<7
    37             00000040   V_FLAG          equ     1<<6
    38             00000020   M_FLAG          equ     1<<5
    39             00000010   X_FLAG          equ     1<<4
    40             00000010   B_FLAG          equ     1<<4
    41             00000008   D_FLAG          equ     1<<3
    42             00000004   I_FLAG          equ     1<<2
    43             00000002   Z_FLAG          equ     1<<1
    44             00000001   C_FLAG          equ     1<<0
    45                        
    46                        ;==============================================================================
    47                        ; Macros
    48                        ;------------------------------------------------------------------------------
    49                        
    50                        ; Puts the processor in emulation mode. A, X and Y become 8-bits and the stack
    51                        ; is fixed at $0100-$01ff. 
    52                        
    53                        emulate         macro
    54                                        sec
    55                                        xce
    56                                        endm
    57                        
    58                        ; Puts the processor in native mode. The size of the memory and index register
    59                        ; operations is not controlled by the M & X bits in the status register.
    60                        
    61                        native          macro
    62                                        clc
    63                                        xce
    64                                        endm
    65                        
    66                        ; Resets the M bit making the accumulator and memory accesses 16-bits wide.
    67                         
    68                        long_a          macro
    69                                        rep     #M_FLAG
    70                                        longa   on
  Thu Jan 21 2016 21:36                                                                                                    Page 5


    71                                        endm
    72                        
    73                        ; Resets the X bit making the index registers 16-bits wide
    74                        
    75                        long_i          macro
    76                                        rep     #X_FLAG
    77                                        longi   on
    78                                        endm
    79                        
    80                        ; Resets the M and X bits making the accumulator, memory accesses and index
    81                        ; registers 16-bits wide.
    82                                        
    83                        long_ai         macro
    84                                        rep     #M_FLAG|X_FLAG
    85                                        longa   on
    86                                        longi   on
    87                                        endm
    88                        
    89                        ; Sets the M bit making the accumulator and memory accesses 8-bits wide.
    90                        
    91                        short_a         macro
    92                                        sep     #M_FLAG
    93                                        longa   off
    94                                        endm
    95                        
    96                        ; Sets the X bit making the index registers 8-bits wide.
    97                        
    98                        short_i         macro
    99                                        sep     #X_FLAG
   100                                        longi   off
   101                                        endm
   102                                        
   103                        ; Sets the M & X bits making the accumulator, memory accesses and index
   104                        ; registers 8-bits wide.
   105                        
   106                        short_ai        macro
   107                                        sep     #M_FLAG|X_FLAG
   108                                        longa   off
   109                                        longi   off
   110                                        endm
    34                                        else
    35                                        include "w65c816.inc"
    36                                        endif
    37                        
    38                        ;===============================================================================
    39                        ;-------------------------------------------------------------------------------
    40                        
    41                        MNEM            macro   P,Q,R
    42                                        dw      ((((P-'@')<<5)|(Q-'@'))<<5)|(R-'@')
    43                                        endm
    44                        
    45                        ;===============================================================================
    46                        ; ASCII Character Codes
    47                        ;-------------------------------------------------------------------------------
    48                        
    49             00000001   SOH             equ     $01
    50             00000004   EOT             equ     $04
    51             00000006   ACK             equ     $06
  Thu Jan 21 2016 21:36                                                                                                    Page 6


    52             00000007   BEL             equ     $07
    53             00000008   BS              equ     $08
    54             0000000A   LF              equ     $0a
    55             0000000D   CR              equ     $0d
    56             00000015   NAK             equ     $15
    57             00000018   CAN             equ     $18
    58             0000001B   ESC             equ     $1b
    59             0000007F   DEL             equ     $7f
    60                        
    61                        ;===============================================================================
    62                        ;-------------------------------------------------------------------------------
    63                        
    64             00000000   OP_ADC          equ     0<<1
    65             00000002   OP_AND          equ     1<<1
    66             00000004   OP_ASL          equ     2<<1
    67             00000006   OP_BCC          equ     3<<1
    68             00000008   OP_BCS          equ     4<<1
    69             0000000A   OP_BEQ          equ     5<<1
    70             0000000C   OP_BIT          equ     6<<1
    71             0000000E   OP_BMI          equ     7<<1
    72             00000010   OP_BNE          equ     8<<1
    73             00000012   OP_BPL          equ     9<<1
    74             00000014   OP_BRA          equ     10<<1
    75             00000016   OP_BRK          equ     11<<1
    76             00000018   OP_BRL          equ     12<<1
    77             0000001A   OP_BVC          equ     13<<1
    78             0000001C   OP_BVS          equ     14<<1
    79             0000001E   OP_CLC          equ     15<<1
    80             00000020   OP_CLD          equ     16<<1
    81             00000022   OP_CLI          equ     17<<1
    82             00000024   OP_CLV          equ     18<<1
    83             00000026   OP_CMP          equ     19<<1
    84             00000028   OP_COP          equ     20<<1
    85             0000002A   OP_CPX          equ     21<<1
    86             0000002C   OP_CPY          equ     22<<1
    87             0000002E   OP_DEC          equ     23<<1
    88             00000030   OP_DEX          equ     24<<1
    89             00000032   OP_DEY          equ     25<<1
    90             00000034   OP_EOR          equ     26<<1
    91             00000036   OP_INC          equ     27<<1
    92             00000038   OP_INX          equ     28<<1
    93             0000003A   OP_INY          equ     29<<1
    94             0000003C   OP_JML          equ     30<<1
    95             0000003E   OP_JMP          equ     31<<1
    96             00000040   OP_JSL          equ     32<<1
    97             00000042   OP_JSR          equ     33<<1
    98             00000044   OP_LDA          equ     34<<1
    99             00000046   OP_LDX          equ     35<<1
   100             00000048   OP_LDY          equ     36<<1
   101             0000004A   OP_LSR          equ     37<<1
   102             0000004C   OP_MVN          equ     38<<1
   103             0000004E   OP_MVP          equ     39<<1
   104             00000050   OP_NOP          equ     40<<1
   105             00000052   OP_ORA          equ     41<<1
   106             00000054   OP_PEA          equ     42<<1
   107             00000056   OP_PEI          equ     43<<1
   108             00000058   OP_PER          equ     44<<1
   109             0000005A   OP_PHA          equ     45<<1
  Thu Jan 21 2016 21:36                                                                                                    Page 7


   110             0000005C   OP_PHB          equ     46<<1
   111             0000005E   OP_PHD          equ     47<<1
   112             00000060   OP_PHK          equ     48<<1
   113             00000062   OP_PHP          equ     49<<1
   114             00000064   OP_PHX          equ     50<<1
   115             00000066   OP_PHY          equ     51<<1
   116             00000068   OP_PLA          equ     52<<1
   117             0000006A   OP_PLB          equ     53<<1
   118             0000006C   OP_PLD          equ     54<<1
   119             0000006E   OP_PLP          equ     55<<1
   120             00000070   OP_PLX          equ     56<<1
   121             00000072   OP_PLY          equ     57<<1
   122             00000074   OP_REP          equ     58<<1
   123             00000076   OP_ROL          equ     59<<1
   124             00000078   OP_ROR          equ     60<<1
   125             0000007A   OP_RTI          equ     61<<1
   126             0000007C   OP_RTL          equ     62<<1
   127             0000007E   OP_RTS          equ     63<<1
   128             00000080   OP_SBC          equ     64<<1
   129             00000082   OP_SEC          equ     65<<1
   130             00000084   OP_SED          equ     66<<1
   131             00000086   OP_SEI          equ     67<<1
   132             00000088   OP_SEP          equ     68<<1
   133             0000008A   OP_STA          equ     69<<1
   134             0000008C   OP_STP          equ     70<<1
   135             0000008E   OP_STX          equ     71<<1
   136             00000090   OP_STY          equ     72<<1
   137             00000092   OP_STZ          equ     73<<1
   138             00000094   OP_TAX          equ     74<<1
   139             00000096   OP_TAY          equ     75<<1
   140             00000098   OP_TCD          equ     76<<1
   141             0000009A   OP_TCS          equ     77<<1
   142             0000009C   OP_TDC          equ     78<<1
   143             0000009E   OP_TRB          equ     79<<1
   144             000000A0   OP_TSB          equ     80<<1
   145             000000A2   OP_TSC          equ     81<<1
   146             000000A4   OP_TSX          equ     82<<1
   147             000000A6   OP_TXA          equ     83<<1
   148             000000A8   OP_TXS          equ     84<<1
   149             000000AA   OP_TXY          equ     85<<1
   150             000000AC   OP_TYA          equ     86<<1
   151             000000AE   OP_TYX          equ     87<<1
   152             000000B0   OP_WAI          equ     88<<1
   153             000000B2   OP_WDM          equ     89<<1
   154             000000B4   OP_XBA          equ     90<<1
   155             000000B6   OP_XCE          equ     91<<1
   156                        
   157             00000000   MD_ABS          equ     0<<1                    ; a
   158             00000002   MD_ACC          equ     1<<1                    ; A
   159             00000004   MD_ABX          equ     2<<1                    ; a,x
   160             00000006   MD_ABY          equ     3<<1                    ; a,y
   161             00000008   MD_ALG          equ     4<<1                    ; al
   162             0000000A   MD_ALX          equ     5<<1                    ; al,x
   163             0000000C   MD_AIN          equ     6<<1                    ; (a)
   164             0000000E   MD_AIX          equ     7<<1                    ; (a,x)
   165             00000010   MD_DPG          equ     8<<1                    ; d
   166             00000012   MD_STK          equ     9<<1                    ; d,s
   167             00000014   MD_DPX          equ     10<<1                   ; d,x
  Thu Jan 21 2016 21:36                                                                                                    Page 8


   168             00000016   MD_DPY          equ     11<<1                   ; d,x
   169             00000018   MD_DIN          equ     12<<1                   ; (d)
   170             0000001A   MD_DLI          equ     13<<1                   ; [d]
   171             0000001C   MD_SKY          equ     14<<1                   ; (d,s),y
   172             0000001E   MD_DIX          equ     15<<1                   ; (d,x)
   173             00000020   MD_DIY          equ     16<<1                   ; (d),y
   174             00000022   MD_DLY          equ     17<<1                   ; [d],y
   175             00000024   MD_IMP          equ     18<<1                   ;
   176             00000026   MD_REL          equ     19<<1                   ; r
   177             00000028   MD_RLG          equ     20<<1                   ; rl
   178             0000002A   MD_MOV          equ     21<<1                   ; xyc
   179             0000002C   MD_IMM          equ     22<<1                   ; # (A or M)
   180             0000002E   MD_INT          equ     23<<1                   ; # (BRK/COP/WDM)
   181             00000030   MD_IMX          equ     24<<1                   ; # (X or Y)
   182                        
   183                        ;===============================================================================
   184                        ; Data Areas
   185                        ;-------------------------------------------------------------------------------
   186                        
   187                                        page0
   188                                        org     $20
   189                        
   190 00:0020:              FLAGS           ds      1                       ; Emulated processor flags
   191 00:0021:              BUFLEN          ds      1                       ; Command buffer length
   192 00:0022:              BANK            ds      1                       ; Memory bank
   193                        
   194 00:0023:              ADDR_S          ds      3                       ; Start address
   195 00:0026:              ADDR_E          ds      3                       ; End address
   196                        
   197 00:0029:              BLOCK           ds      1                       ; XMODEM block number
   198 00:002A:              RETRIES         ds      1                       ; Retry count
   199 00:002B:              SUM             ds      1                       ; Checksum
   200                        
   201 00:002C:              TEMP            ds      4                       ; Scratch workspace
   202                        
   203                                        data
   204                                        org     $200
   205                        
   206 00:0200:              BUFFER          ds      128                     ; Command buffer
   207                        
   208                        ;===============================================================================
   209                        ; Initialisation
   210                        ;-------------------------------------------------------------------------------
   211                        
   212                                        code
   213                                        public  Start
   214                                        extern  UartRx
   215                                        extern  UartTx
   216                                        extern  UartRxTest
   217                                        extern  RomSelect
   218                                        extern  RomCheck
   219                        Start:
   220                                        short_a                         ; Configure register sizes
+  220 00:0000: E2 20                        sep     #M_FLAG
+  220                                        longa   off
   221                                        long_i
+  221 00:0002: C2 10                        rep     #X_FLAG
+  221                                        longi   on
  Thu Jan 21 2016 21:36                                                                                                    Page 9


   222 00:0004: 20 xx xx                     jsr     TxCRLF
   223 00:0007: A2 xx xx                     ldx     #TITLE                  ; Display application title
   224 00:000A: 20 xx xx                     jsr     TxStr
   225                        
   226 00:000D: 64 22                        stz     BANK                    ; Reset default bank
   227                        
   228                        ;===============================================================================
   229                        ; Command Processor
   230                        ;-------------------------------------------------------------------------------
   231                        
   232                        NewCommand:
   233 00:000F: 64 21                        stz     BUFLEN                  ; Clear the buffer
   234                        ShowCommand:
   235                                        short_i
+  235 00:0011: E2 10                        sep     #X_FLAG
+  235                                        longi   off
   236 00:0013: 20 xx xx                     jsr     TxCRLF                  ; Move to a new line
   237                        
   238 00:0016: A9 2E                        lda     #'.'                    ; Output the prompt
   239 00:0018: 20 xx xx                     jsr     UartTx
   240                        
   241 00:001B: A2 00                        ldx     #0
   242 00:001D: E4 21        DisplayCmd:     cpx     BUFLEN                  ; Any saved characters
   243 00:001F: F0 0E                        beq     ReadCommand
   244 00:0021: BD 00 02                     lda     BUFFER,x                ; Yes, display them
   245 00:0024: 20 xx xx                     jsr     UartTx
   246 00:0027: E8                           inx
   247 00:0028: 80 F3                        bra     DisplayCmd
   248                        
   249                        RingBell:
   250 00:002A: A9 07                        lda     #BEL                    ; Make a beep
   251 00:002C: 20 xx xx                     jsr     UartTx
   252                        
   253                        ReadCommand:
   254 00:002F: 20 xx xx                     jsr     UartRx                  ; Wait for character
   255                        
   256 00:0032: C9 1B                        cmp     #ESC                    ; Cancel input?
   257 00:0034: F0 D9                        beq     NewCommand              ; Yes, clear and restart
   258 00:0036: C9 0D                        cmp     #CR                     ; End of command?
   259 00:0038: F0 2D                        beq     ProcessCommand          ; Yes, start processing
   260                        
   261 00:003A: C9 08                        cmp     #BS                     ; Back space?
   262 00:003C: F0 15                        beq     BackSpace
   263 00:003E: C9 7F                        cmp     #DEL                    ; Delete?
   264 00:0040: F0 11                        beq     BackSpace
   265                        
   266 00:0042: C9 20                        cmp     #' '                    ; Printable character
   267 00:0044: 90 E4                        bcc     RingBell                ; No.
   268 00:0046: C9 7F                        cmp     #DEL
   269 00:0048: B0 E0                        bcs     RingBell                ; No.
   270 00:004A: 9D 00 02                     sta     BUFFER,x                ; Save the character
   271 00:004D: E8                           inx
   272 00:004E: 20 xx xx                     jsr     UartTx                  ; Echo it and repeat
   273 00:0051: 80 DC                        bra     ReadCommand
   274                        
   275                        BackSpace:
   276 00:0053: E0 00                        cpx     #0                      ; Buffer empty?
   277 00:0055: F0 D3                        beq     RingBell                ; Yes, beep and continue
  Thu Jan 21 2016 21:36                                                                                                    Page 10


   278 00:0057: CA                           dex                             ; No, remove last character
   279 00:0058: A9 08                        lda     #BS
   280 00:005A: 20 xx xx                     jsr     UartTx
   281 00:005D: 20 xx xx                     jsr     TxSpace
   282 00:0060: A9 08                        lda     #BS
   283 00:0062: 20 xx xx                     jsr     UartTx
   284 00:0065: 80 C8                        bra     ReadCommand             ; And retry
   285                        
   286                        ProcessCommand:
   287 00:0067: 86 21                        stx     BUFLEN                  ; Save final length
   288 00:0069: A0 00                        ldy     #0                      ; Load index for start
   289                        
   290 00:006B: 20 xx xx                     jsr     SkipSpaces              ; Fetch command character
   291 00:006E: B0 9F                        bcs     NewCommand              ; None, empty command
   292                        
   293                        ;===============================================================================
   294                        ; B - Select Memory Bank
   295                        ;-------------------------------------------------------------------------------
   296                        
   297 00:0070: C9 42                        cmp     #'B'                    ; Select memory bank?
   298 00:0072: D0 0D                        bne     NotMemoryBank
   299                        
   300 00:0074: A2 22                        ldx     #BANK                   ; Parse bank
   301 00:0076: 20 xx xx                     jsr     GetByte
   302 00:0079: 90 03                        bcc     $+5
   303 00:007B: 4C xx xx                     jmp     ShowError
   304 00:007E: 4C xx xx                     jmp     NewCommand
   305                        NotMemoryBank:
   306                        
   307                        ;===============================================================================
   308                        ; D - Disassemble Memory
   309                        ;-------------------------------------------------------------------------------
   310                        
   311 00:0081: C9 44                        cmp     #'D'                    ; Memory display?
   312 00:0083: D0 52                        bne     NotDisassemble
   313                        
   314 00:0085: A2 23                        ldx     #ADDR_S                 ; Parse start address
   315 00:0087: 20 xx xx                     jsr     GetAddr
   316 00:008A: 90 03                        bcc     $+5
   317 00:008C: 4C xx xx                     jmp     ShowError
   318 00:008F: A2 26                        ldx     #ADDR_E                 ; Parse end address
   319 00:0091: 20 xx xx                     jsr     GetAddr
   320 00:0094: 90 03                        bcc     $+5
   321 00:0096: 4C xx xx                     jmp     ShowError
   322                        
   323 00:0099: 08                           php
   324 00:009A: 68                           pla
   325 00:009B: 85 20                        sta     FLAGS
   326                        
   327                        Disassemble:
   328 00:009D: 20 xx xx                     jsr     TxCRLF
   329 00:00A0: A5 25                        lda     ADDR_S+2                ; Show memory address
   330 00:00A2: 20 xx xx                     jsr     TxHex2
   331 00:00A5: A9 3A                        lda     #':'
   332 00:00A7: 20 xx xx                     jsr     UartTx
   333 00:00AA: A5 24                        lda     ADDR_S+1
   334 00:00AC: 20 xx xx                     jsr     TxHex2
   335 00:00AF: A5 23                        lda     ADDR_S+0
  Thu Jan 21 2016 21:36                                                                                                    Page 11


   336 00:00B1: 20 xx xx                     jsr     TxHex2
   337 00:00B4: 20 xx xx                     jsr     TxSpace
   338                        
   339 00:00B7: 20 xx xx                     jsr     TxCodeBytes             ; Show code bytes
   340 00:00BA: 20 xx xx                     jsr     TxSymbolic              ; And instruction
   341                        
   342 00:00BD: A7 23                        lda     [ADDR_S]                ; Fetch opcode again
   343 00:00BF: 20 xx xx                     jsr     OpcodeSize
   344                        
   345 00:00C2: 18                           clc
   346 00:00C3: 65 23                        adc     ADDR_S+0                ; And move start address on
   347 00:00C5: 85 23                        sta     ADDR_S+0
   348 00:00C7: 90 02                        bcc     $+4
   349 00:00C9: E6 24                        inc     ADDR_S+1
   350                        
   351 00:00CB: 38                           sec                             ; Exceeded the end address?
   352 00:00CC: E5 26                        sbc     ADDR_E+0
   353 00:00CE: A5 24                        lda     ADDR_S+1
   354 00:00D0: E5 27                        sbc     ADDR_E+1
   355 00:00D2: 30 C9                        bmi     Disassemble             ; No, show more
   356                        
   357 00:00D4: 4C xx xx                     jmp     NewCommand              ; Done
   358                        NotDisassemble:
   359                        
   360                        ;===============================================================================
   361                        ; E - Erase ROM bank
   362                        ;-------------------------------------------------------------------------------
   363                        
   364 00:00D7: C9 45                        cmp     #'E'                    ; Erase bank?
   365 00:00D9: D0 45                        bne     NotEraseBank
   366                        
   367 00:00DB: 20 xx xx                     jsr     CheckSafe
   368                        
   369 00:00DE: A9 00                        lda     #$00                    ; Set start address
   370 00:00E0: 85 23                        sta     ADDR_S+0
   371 00:00E2: A9 80                        lda     #$80
   372 00:00E4: 85 24                        sta     ADDR_S+1
   373                        EraseLoop:
   374 00:00E6: A9 AA                        lda     #$aa                    ; Unlock flash
   375 00:00E8: 8D 55 D5                     sta     $8000+$5555
   376 00:00EB: A9 55                        lda     #$55
   377 00:00ED: 8D AA AA                     sta     $8000+$2aaa
   378 00:00F0: A9 80                        lda     #$80                    ; Signal erase
   379 00:00F2: 8D 55 D5                     sta     $8000+$5555
   380 00:00F5: A9 AA                        lda     #$aa
   381 00:00F7: 8D 55 D5                     sta     $8000+$5555
   382 00:00FA: A9 55                        lda     #$55
   383 00:00FC: 8D AA AA                     sta     $8000+$2aaa
   384 00:00FF: A9 30                        lda     #$30                    ; Sector erase
   385 00:0101: 92 23                        sta     (ADDR_S)
   386                        
   387                        EraseWait:
   388 00:0103: B2 23                        lda     (ADDR_S)                ; Wait for erase to finish
   389 00:0105: C9 FF                        cmp     #$FF
   390 00:0107: D0 FA                        bne     EraseWait
   391                        
   392 00:0109: 18                           clc                             ; Move to next sector
   393 00:010A: A5 24                        lda     ADDR_S+1
  Thu Jan 21 2016 21:36                                                                                                    Page 12


   394 00:010C: 69 10                        adc     #$10
   395 00:010E: 85 24                        sta     ADDR_S+1
   396 00:0110: 90 D4                        bcc     EraseLoop               ; Repeat until end of memory
   397 00:0112: 4C xx xx                     jmp     NewCommand              ; And start over
   398                        
   399                        EraseFailed:
   400                                        long_i                          ; Warn that erase failed
+  400 00:0115: C2 10                        rep     #X_FLAG
+  400                                        longi   on
   401 00:0117: A2 xx xx                     ldx     #ERASE_FAILED
   402 00:011A: 20 xx xx                     jsr     TxStr
   403                                        longi   off
   404 00:011D: 4C xx xx                     jmp     NewCommand              ; And start over
   405                        NotEraseBank:
   406                        
   407                        ;===============================================================================
   408                        ; F - WDC Mask ROM Enable/Disable
   409                        ;-------------------------------------------------------------------------------
   410                        
   411                                        ifdef   W65C265SXB
   412 00:0120: C9 46                        cmp     #'F'
   413 00:0122: D0 20                        bne     NotMaskROM
   414                        
   415 00:0124: 20 xx xx                     jsr     SkipSpaces              ; Find first argument
   416 00:0127: B0 08                        bcs     MaskFail                ; Success?
   417                        
   418 00:0129: C9 30                        cmp     #'0'                    ; Check bank is 0..3
   419 00:012B: F0 0F                        beq     MaskOff
   420 00:012D: C9 31                        cmp     #'1'
   421 00:012F: F0 03                        beq     MaskOn
   422                        MaskFail:
   423 00:0131: 4C xx xx                     jmp     ShowError
   424                        
   425                        MaskOn:
   426 00:0134: A9 80                        lda     #$80                    ; Enable mask ROM
   427 00:0136: 1C 40 DF                     trb     BCR
   428 00:0139: 4C xx xx                     jmp     NewCommand
   429                        
   430                        MaskOff:
   431 00:013C: A9 80                        lda     #$80                    ; Disable mask ROM
   432 00:013E: 0C 40 DF                     tsb     BCR
   433 00:0141: 4C xx xx                     jmp     NewCommand
   434                        
   435                        NotMaskROM:
   436                                        endif
   437                        
   438                        ;===============================================================================
   439                        ; G - Goto
   440                        ;-------------------------------------------------------------------------------
   441                        
   442 00:0144: C9 47                        cmp     #'G'                    ; Invoke code
   443 00:0146: D0 0D                        bne     NotGoto
   444                        
   445 00:0148: A2 23                        ldx     #ADDR_S                 ; Parse execution address
   446 00:014A: 20 xx xx                     jsr     GetAddr
   447 00:014D: B0 03                        bcs     $+5
   448 00:014F: DC 23 00                     jmp     [ADDR_S]                ; Run from address
   449 00:0152: 6C FC FF                     jmp     ($FFFC)                 ; Otherwise reset
  Thu Jan 21 2016 21:36                                                                                                    Page 13


   450                        NotGoto:
   451                        
   452                        ;===============================================================================
   453                        ; H - Hunt for RAM
   454                        ;-------------------------------------------------------------------------------
   455                        
   456 00:0155: C9 48                        cmp     #'H'                    ; Hunt for RAM
   457 00:0157: F0 03                        beq     $+5
   458 00:0159: 4C xx xx                     jmp     NotHunt
   459                        
   460 00:015C: 64 23                        stz     ADDR_S+0                ; Start at $00:0000
   461 00:015E: 64 24                        stz     ADDR_S+1
   462 00:0160: 64 25                        stz     ADDR_S+2
   463                        
   464                        HuntStart:
   465 00:0162: A7 23                        lda     [ADDR_S]                ; Is byte is writeable?
   466 00:0164: 49 FF                        eor     #$ff
   467 00:0166: 87 23                        sta     [ADDR_S]
   468 00:0168: EA                           nop
   469 00:0169: EA                           nop
   470 00:016A: C7 23                        cmp     [ADDR_S]
   471 00:016C: F0 10                        beq     HuntFound               ; Yes
   472                        
   473 00:016E: 18                           clc                             ; Try the next block
   474 00:016F: A5 24                        lda     ADDR_S+1
   475 00:0171: 69 10                        adc     #$10
   476 00:0173: 85 24                        sta     ADDR_S+1
   477 00:0175: 90 EB                        bcc     HuntStart
   478 00:0177: E6 25                        inc     ADDR_S+2
   479 00:0179: D0 E7                        bne     HuntStart
   480 00:017B: 4C xx xx                     jmp     NewCommand              ; Reached end of RAM
   481                        
   482                        HuntFound:
   483 00:017E: 20 xx xx                     jsr     TxCRLF
   484 00:0181: A9 24                        lda     #'$'                    ; Print start address
   485 00:0183: 20 xx xx                     jsr     UartTx
   486 00:0186: A5 25                        lda     ADDR_S+2
   487 00:0188: 20 xx xx                     jsr     TxHex2
   488 00:018B: A9 3A                        lda     #':'
   489 00:018D: 20 xx xx                     jsr     UartTx
   490 00:0190: A5 24                        lda     ADDR_S+1
   491 00:0192: 20 xx xx                     jsr     TxHex2
   492 00:0195: A5 23                        lda     ADDR_S+0
   493 00:0197: 20 xx xx                     jsr     TxHex2
   494                        
   495 00:019A: A9 2D                        lda     #'-'
   496 00:019C: 20 xx xx                     jsr     UartTx
   497                        
   498                        HuntEnd:
   499 00:019F: 18                           clc                             ; Try the next block
   500 00:01A0: A5 24                        lda     ADDR_S+1
   501 00:01A2: 69 10                        adc     #$10
   502 00:01A4: 85 24                        sta     ADDR_S+1
   503 00:01A6: 90 04                        bcc     HuntNext
   504 00:01A8: E6 25                        inc     ADDR_S+2
   505 00:01AA: F0 32                        beq     HuntDone
   506                        
   507                        HuntNext
  Thu Jan 21 2016 21:36                                                                                                    Page 14


   508 00:01AC: A7 23                        lda     [ADDR_S]                ; Is byte is writeable?
   509 00:01AE: 49 FF                        eor     #$ff
   510 00:01B0: 87 23                        sta     [ADDR_S]
   511 00:01B2: EA                           nop
   512 00:01B3: EA                           nop
   513 00:01B4: C7 23                        cmp     [ADDR_S]
   514 00:01B6: F0 E7                        beq     HuntEnd                 ; Yes, keep looking
   515                        
   516 00:01B8: A9 24                        lda     #'$'                    ; Print end address
   517 00:01BA: 20 xx xx                     jsr     UartTx
   518 00:01BD: 38                           sec
   519 00:01BE: A5 23                        lda     ADDR_S+0
   520 00:01C0: E9 01                        sbc     #1
   521 00:01C2: 48                           pha
   522 00:01C3: A5 24                        lda     ADDR_S+1
   523 00:01C5: E9 00                        sbc     #0
   524 00:01C7: 48                           pha
   525 00:01C8: A5 25                        lda     ADDR_S+2
   526 00:01CA: E9 00                        sbc     #0
   527 00:01CC: 20 xx xx                     jsr     TxHex2
   528 00:01CF: A9 3A                        lda     #':'
   529 00:01D1: 20 xx xx                     jsr     UartTx
   530 00:01D4: 68                           pla
   531 00:01D5: 20 xx xx                     jsr     TxHex2
   532 00:01D8: 68                           pla
   533 00:01D9: 20 xx xx                     jsr     TxHex2
   534 00:01DC: 80 84                        bra     HuntStart
   535                        
   536                        HuntDone:
   537 00:01DE: A9 24                        lda     #'$'                    ; Print $ff:ffff
   538 00:01E0: 20 xx xx                     jsr     UartTx
   539 00:01E3: A9 FF                        lda     #$ff
   540 00:01E5: 48                           pha
   541 00:01E6: 48                           pha
   542 00:01E7: 20 xx xx                     jsr     TxHex2
   543 00:01EA: A9 3A                        lda     #':'
   544 00:01EC: 20 xx xx                     jsr     UartTx
   545 00:01EF: 68                           pla
   546 00:01F0: 20 xx xx                     jsr     TxHex2
   547 00:01F3: 68                           pla
   548 00:01F4: 20 xx xx                     jsr     TxHex2
   549 00:01F7: 4C xx xx                     jmp     NewCommand
   550                        
   551                        NotHunt:
   552                        
   553                        ;===============================================================================
   554                        ; M - Display Memory
   555                        ;-------------------------------------------------------------------------------
   556                        
   557 00:01FA: C9 4D                        cmp     #'M'                    ; Memory display?
   558 00:01FC: D0 70                        bne     NotMemoryDisplay
   559                        
   560 00:01FE: A2 23                        ldx     #ADDR_S                 ; Parse start address
   561 00:0200: 20 xx xx                     jsr     GetAddr
   562 00:0203: 90 03                        bcc     $+5
   563 00:0205: 4C xx xx                     jmp     ShowError
   564 00:0208: A2 26                        ldx     #ADDR_E                 ; Parse end address
   565 00:020A: 20 xx xx                     jsr     GetAddr
  Thu Jan 21 2016 21:36                                                                                                    Page 15


   566 00:020D: 90 03                        bcc     $+5
   567 00:020F: 4C xx xx                     jmp     ShowError
   568                        
   569                        DisplayMemory:
   570 00:0212: 20 xx xx                     jsr     TxCRLF
   571 00:0215: A5 25                        lda     ADDR_S+2                ; Show memory address
   572 00:0217: 20 xx xx                     jsr     TxHex2
   573 00:021A: A9 3A                        lda     #':'
   574 00:021C: 20 xx xx                     jsr     UartTx
   575 00:021F: A5 24                        lda     ADDR_S+1
   576 00:0221: 20 xx xx                     jsr     TxHex2
   577 00:0224: A5 23                        lda     ADDR_S+0
   578 00:0226: 20 xx xx                     jsr     TxHex2
   579                        
   580 00:0229: A0 00                        ldy     #0                      ; Show sixteen bytes of data
   581 00:022B: 20 xx xx     ByteLoop:       jsr     TxSpace
   582 00:022E: B7 23                        lda     [ADDR_S],y
   583 00:0230: 20 xx xx                     jsr     TxHex2
   584 00:0233: C8                           iny
   585 00:0234: C0 10                        cpy     #16
   586 00:0236: D0 F3                        bne     ByteLoop
   587                        
   588 00:0238: 20 xx xx                     jsr     TxSpace
   589 00:023B: A9 7C                        lda     #'|'
   590 00:023D: 20 xx xx                     jsr     UartTx
   591 00:0240: A0 00                        ldy     #0                      ; Show sixteen characters
   592 00:0242: B7 23        CharLoop:       lda     [ADDR_S],Y
   593 00:0244: 20 xx xx                     jsr     IsPrintable
   594 00:0247: B0 02                        bcs     $+4
   595 00:0249: A9 2E                        lda     #'.'
   596 00:024B: 20 xx xx                     jsr     UartTx
   597 00:024E: C8                           iny
   598 00:024F: C0 10                        cpy     #16
   599 00:0251: D0 EF                        bne     CharLoop
   600 00:0253: A9 7C                        lda     #'|'
   601 00:0255: 20 xx xx                     jsr     UartTx
   602                        
   603 00:0258: 18                           clc                             ; Bump the display address
   604 00:0259: 98                           tya
   605 00:025A: 65 23                        adc     ADDR_S+0
   606 00:025C: 85 23                        sta     ADDR_S+0
   607 00:025E: 90 02                        bcc     $+4
   608 00:0260: E6 24                        inc     ADDR_S+1
   609                        
   610 00:0262: 38                           sec                             ; Exceeded the end address?
   611 00:0263: E5 26                        sbc     ADDR_E+0
   612 00:0265: A5 24                        lda     ADDR_S+1
   613 00:0267: E5 27                        sbc     ADDR_E+1
   614 00:0269: 30 A7                        bmi     DisplayMemory           ; No, show more
   615                        
   616 00:026B: 4C xx xx                     jmp     NewCommand
   617                        NotMemoryDisplay:
   618                        
   619                        ;===============================================================================
   620                        ; S - S19 Record
   621                        ;-------------------------------------------------------------------------------
   622                        
   623 00:026E: C9 53                        cmp     #'S'                    ; S19?
  Thu Jan 21 2016 21:36                                                                                                    Page 16


   624 00:0270: F0 03                        beq     $+5
   625 00:0272: 4C xx xx                     jmp     NotS19
   626                        
   627 00:0275: 20 xx xx                     jsr     NextChar                ; Get record type
   628 00:0278: B0 75                        bcs     S19Fail
   629 00:027A: C9 31                        cmp     #'1'                    ; Only process type 1
   630 00:027C: D0 6E                        bne     S19Done
   631                        
   632 00:027E: A2 26                        ldx     #ADDR_E                 ; Get byte count
   633 00:0280: 20 xx xx                     jsr     GetByte
   634 00:0283: B0 6A                        bcs     S19Fail
   635 00:0285: A5 26                        lda     ADDR_E                  ; Use as initial checksum
   636 00:0287: 85 2B                        sta     SUM
   637 00:0289: C6 26                        dec     ADDR_E
   638 00:028B: F0 62                        beq     S19Fail
   639                        
   640 00:028D: A2 23                        ldx     #ADDR_S                 ; Get address
   641 00:028F: 20 xx xx                     jsr     GetAddr
   642 00:0292: B0 5B                        bcs     S19Fail
   643 00:0294: A5 23                        lda     ADDR_S+0                ; Add to checksum
   644 00:0296: 65 24                        adc     ADDR_S+1
   645 00:0298: 18                           clc
   646 00:0299: 65 2B                        adc     SUM
   647 00:029B: 85 2B                        sta     SUM
   648 00:029D: C6 26                        dec     ADDR_E
   649 00:029F: F0 4E                        beq     S19Fail
   650 00:02A1: C6 26                        dec     ADDR_E
   651 00:02A3: F0 4A                        beq     S19Fail
   652                        
   653                        S19Load:
   654 00:02A5: A2 2C                        ldx     #TEMP                   ; Fetch a data byte
   655 00:02A7: 20 xx xx                     jsr     GetByte
   656 00:02AA: B0 43                        bcs     S19Fail
   657 00:02AC: A5 2C                        lda     TEMP
   658 00:02AE: 65 2B                        adc     SUM
   659 00:02B0: 85 2B                        sta     SUM
   660 00:02B2: C6 26                        dec     ADDR_E
   661 00:02B4: F0 39                        beq     S19Fail
   662                        
   663 00:02B6: A5 25                        lda     ADDR_S+2                ; Writing to ROM?
   664 00:02B8: D0 13                        bne     WriteS19                ; No
   665 00:02BA: 24 24                        bit     ADDR_S+1
   666 00:02BC: 10 0F                        bpl     WriteS19                ; No
   667                        
   668 00:02BE: A9 AA                        lda     #$aa                    ; Yes, unlock flash
   669 00:02C0: 8D 55 D5                     sta     $8000+$5555
   670 00:02C3: A9 55                        lda     #$55
   671 00:02C5: 8D AA AA                     sta     $8000+$2aaa
   672 00:02C8: A9 A0                        lda     #$a0                    ; Start byte write
   673 00:02CA: 8D 55 D5                     sta     $8000+$5555
   674                        WriteS19:
   675 00:02CD: A5 2C                        lda     TEMP                    ; Write the value
   676 00:02CF: 87 23                        sta     [ADDR_S]
   677                        
   678 00:02D1: E6 23                        inc     ADDR_S+0                ; Bump address by one
   679 00:02D3: D0 02                        bne     $+4
   680 00:02D5: E6 24                        inc     ADDR_S+1
   681                        
  Thu Jan 21 2016 21:36                                                                                                    Page 17


   682 00:02D7: A5 26                        lda     ADDR_E                  ; Reached checksum?
   683 00:02D9: C9 01                        cmp     #1
   684 00:02DB: D0 C8                        bne     S19Load
   685                        
   686 00:02DD: A2 2C                        ldx     #TEMP                   ; Yes, read it
   687 00:02DF: 20 xx xx                     jsr     GetByte
   688 00:02E2: B0 0B                        bcs     S19Fail
   689 00:02E4: A5 2C                        lda     TEMP
   690 00:02E6: 65 2B                        adc     SUM
   691 00:02E8: C9 FF                        cmp     #$ff                    ; Checksum correct?
   692 00:02EA: D0 03                        bne     S19Fail
   693                        
   694 00:02EC: 4C xx xx     S19Done:        jmp     NewCommand              ; Get
   695                        
   696                        S19Fail:
   697                                        long_i                          ; Display error message
+  697 00:02EF: C2 10                        rep     #X_FLAG
+  697                                        longi   on
   698 00:02F1: A2 xx xx                     ldx     #INVALID_S19
   699 00:02F4: 20 xx xx                     jsr     TxStr
   700                                        longi   off
   701 00:02F7: 4C xx xx                     jmp     NewCommand              ; And start over
   702                        NotS19:
   703                        
   704                        ;===============================================================================
   705                        ; R - Select ROM Bank
   706                        ;-------------------------------------------------------------------------------
   707                        
   708 00:02FA: C9 52                        cmp     #'R'                    ; ROM Bank?
   709 00:02FC: D0 16                        bne     NotROMBank              ; No
   710                        
   711 00:02FE: 20 xx xx                     jsr     SkipSpaces              ; Find first argument
   712 00:0301: 90 03                        bcc     $+5                     ; Success?
   713 00:0303: 4C xx xx     BankFail:       jmp     ShowError               ; No
   714                        
   715 00:0306: C9 30                        cmp     #'0'                    ; Check bank is 0..3
   716 00:0308: 90 F9                        bcc     BankFail
   717 00:030A: C9 34                        cmp     #'3'+1
   718 00:030C: B0 F5                        bcs     BankFail
   719                        
   720 00:030E: 20 xx xx                     jsr     RomSelect               ; Switch ROM banks
   721 00:0311: 4C xx xx                     jmp     NewCommand              ; Done
   722                        NotROMBank:
   723                        
   724                        ;===============================================================================
   725                        ; W - Write memory
   726                        ;-------------------------------------------------------------------------------
   727                        
   728 00:0314: C9 57                        cmp     #'W'                    ; Write memory?
   729 00:0316: D0 58                        bne     NotWrite
   730                        
   731 00:0318: A2 23                        ldx     #ADDR_S                 ; Parse start address
   732 00:031A: 20 xx xx                     jsr     GetAddr
   733 00:031D: 90 03                        bcc     $+5
   734 00:031F: 4C xx xx                     jmp     ShowError
   735                        
   736 00:0322: 24 24                        bit     ADDR_S+1                ; Load into ROM area?
   737 00:0324: 10 03                        bpl     $+5
  Thu Jan 21 2016 21:36                                                                                                    Page 18


   738 00:0326: 20 xx xx                     jsr     CheckSafe               ; Yes, check selection
   739                        
   740 00:0329: A2 26                        ldx     #ADDR_E                 ; Parse value byte
   741 00:032B: 20 xx xx                     jsr     GetByte                 ; Is there a value?
   742 00:032E: 90 03                        bcc     $+5
   743 00:0330: 4C xx xx                     jmp     NewCommand              ; No.
   744                        
   745 00:0333: A5 25                        lda     ADDR_S+2                ; Writing to ROM?
   746 00:0335: D0 13                        bne     WriteMemory             ; No
   747 00:0337: 24 24                        bit     ADDR_S+1
   748 00:0339: 10 0F                        bpl     WriteMemory             ; No
   749                        
   750 00:033B: A9 AA                        lda     #$aa                    ; Yes, unlock flash
   751 00:033D: 8D 55 D5                     sta     $8000+$5555
   752 00:0340: A9 55                        lda     #$55
   753 00:0342: 8D AA AA                     sta     $8000+$2aaa
   754 00:0345: A9 A0                        lda     #$a0                    ; Start byte write
   755 00:0347: 8D 55 D5                     sta     $8000+$5555
   756                        WriteMemory:
   757 00:034A: A5 26                        lda     ADDR_E                  ; Write the value
   758 00:034C: 87 23                        sta     [ADDR_S]
   759                        
   760 00:034E: E6 23                        inc     ADDR_S+0                ; Bump address by one
   761 00:0350: D0 02                        bne     $+4
   762 00:0352: E6 24                        inc     ADDR_S+1
   763                        
   764 00:0354: A9 57                        lda     #'W'                    ; Build command for next byte
   765 00:0356: 20 xx xx                     jsr     StartCommand
   766 00:0359: A9 20                        lda     #' '
   767 00:035B: 20 xx xx                     jsr     BuildCommand
   768 00:035E: A5 24                        lda     ADDR_S+1                ; Add the next address
   769 00:0360: 20 xx xx                     jsr     BuildByte
   770 00:0363: A5 23                        lda     ADDR_S+0
   771 00:0365: 20 xx xx                     jsr     BuildByte
   772 00:0368: A9 20                        lda     #' '
   773 00:036A: 20 xx xx                     jsr     BuildCommand
   774 00:036D: 4C xx xx                     jmp     ShowCommand             ; And prompt for data
   775                        
   776                        NotWrite:
   777                        
   778                        ;===============================================================================
   779                        ; X - XMODEM Receive
   780                        ;-------------------------------------------------------------------------------
   781                        
   782 00:0370: C9 58                        cmp     #'X'                    ; XModem upload?
   783 00:0372: F0 03                        beq     $+5                     ; Yes.
   784 00:0374: 4C xx xx                     jmp     NotXModem
   785                        
   786 00:0377: A2 23                        ldx     #ADDR_S                 ; Parse start address
   787 00:0379: 20 xx xx                     jsr     GetAddr
   788 00:037C: 90 03                        bcc     $+5
   789 00:037E: 4C xx xx                     jmp     ShowError
   790                        
   791 00:0381: 24 24                        bit     ADDR_S+1                ; Load into ROM area?
   792 00:0383: 10 03                        bpl     $+5
   793 00:0385: 20 xx xx                     jsr     CheckSafe               ; Yes, check selection
   794                        
   795                                        long_i                          ; Display waiting message
  Thu Jan 21 2016 21:36                                                                                                    Page 19


+  795 00:0388: C2 10                        rep     #X_FLAG
+  795                                        longi   on
   796 00:038A: A2 xx xx                     ldx     #WAITING
   797 00:038D: 20 xx xx                     jsr     TxStr
   798 00:0390: 20 xx xx                     jsr     TxCRLF
   799                                        short_i
+  799 00:0393: E2 10                        sep     #X_FLAG
+  799                                        longi   off
   800 00:0395: 64 29                        stz     BLOCK                   ; Reset the block number
   801 00:0397: E6 29                        inc     BLOCK
   802                        
   803                        ResetRetries:
   804 00:0399: A9 0A                        lda     #10                     ; Reset the retry counter
   805 00:039B: 85 2A                        sta     RETRIES
   806                        
   807                        TransferWait:
   808 00:039D: 64 2C                        stz     TEMP+0                  ; Clear timeout counter
   809 00:039F: 64 2D                        stz     TEMP+1
   810 00:03A1: A9 EC                        lda     #-20
   811 00:03A3: 85 2E                        sta     TEMP+2
   812                        TransferPoll:
   813 00:03A5: 20 xx xx                     jsr     UartRxTest              ; Any data yet?
   814 00:03A8: B0 20                        bcs     TransferScan
   815 00:03AA: E6 2C                        inc     TEMP+0
   816 00:03AC: D0 F7                        bne     TransferPoll
   817 00:03AE: E6 2D                        inc     TEMP+1
   818 00:03B0: D0 F3                        bne     TransferPoll
   819 00:03B2: E6 2E                        inc     TEMP+2
   820 00:03B4: D0 EF                        bne     TransferPoll
   821 00:03B6: C6 2A                        dec     RETRIES
   822 00:03B8: F0 05                        beq     TimedOut
   823 00:03BA: 20 xx xx                     jsr     SendNAK                 ; Send a NAK
   824 00:03BD: 80 DE                        bra     TransferWait
   825                        
   826                        TimedOut:
   827                                        long_i
+  827 00:03BF: C2 10                        rep     #X_FLAG
+  827                                        longi   on
   828 00:03C1: A2 xx xx                     ldx     #TIMEOUT
   829 00:03C4: 20 xx xx                     jsr     TxStr
   830                                        longi   off
   831 00:03C7: 4C xx xx                     jmp     NewCommand
   832                        
   833                        TransferScan:
   834 00:03CA: 20 xx xx                     jsr     UartRx                  ; Wait for SOH or EOT
   835 00:03CD: C9 04                        cmp     #EOT
   836 00:03CF: F0 63                        beq     TransferDone
   837 00:03D1: C9 01                        cmp     #SOH
   838 00:03D3: D0 C8                        bne     TransferWait
   839 00:03D5: 20 xx xx                     jsr     UartRx                  ; Check the block number
   840 00:03D8: C5 29                        cmp     BLOCK
   841 00:03DA: D0 52                        bne     TransferError
   842 00:03DC: 20 xx xx                     jsr     UartRx                  ; Check inverted block
   843 00:03DF: 49 FF                        eor     #$ff
   844 00:03E1: C5 29                        cmp     BLOCK
   845 00:03E3: D0 49                        bne     TransferError
   846                        
   847 00:03E5: A0 00                        ldy     #0
  Thu Jan 21 2016 21:36                                                                                                    Page 20


   848 00:03E7: 84 2B                        sty     SUM                     ; Clear the check sum
   849                        TransferBlock:
   850 00:03E9: 20 xx xx                     jsr     UartRx
   851 00:03EC: 48                           pha
   852                        
   853 00:03ED: A5 25                        lda     ADDR_S+2                ; Writing to ROM?
   854 00:03EF: D0 13                        bne     WriteByte               ; No
   855 00:03F1: 24 24                        bit     ADDR_S+1
   856 00:03F3: 10 0F                        bpl     WriteByte               ; No
   857                        
   858 00:03F5: A9 AA                        lda     #$aa                    ; Yes, unlock flash
   859 00:03F7: 8D 55 D5                     sta     $8000+$5555
   860 00:03FA: A9 55                        lda     #$55
   861 00:03FC: 8D AA AA                     sta     $8000+$2aaa
   862 00:03FF: A9 A0                        lda     #$a0                    ; Start byte write
   863 00:0401: 8D 55 D5                     sta     $8000+$5555
   864                        
   865                        WriteByte:
   866 00:0404: 68                           pla
   867 00:0405: 97 23                        sta     [ADDR_S],Y
   868                        
   869                        WriteWait:
   870 00:0407: D7 23                        cmp     [ADDR_S],Y              ; Wait for write
   871 00:0409: D0 FC                        bne     WriteWait
   872                        
   873 00:040B: 18                           clc                             ; Add to check sum
   874 00:040C: 65 2B                        adc     SUM
   875 00:040E: 85 2B                        sta     SUM
   876 00:0410: C8                           iny
   877 00:0411: C0 80                        cpy     #128
   878 00:0413: D0 D4                        bne     TransferBlock
   879 00:0415: 20 xx xx                     jsr     UartRx                  ; Check the check sum
   880 00:0418: C5 2B                        cmp     SUM
   881 00:041A: D0 12                        bne     TransferError           ; Failed
   882 00:041C: 18                           clc
   883 00:041D: 98                           tya
   884 00:041E: 65 23                        adc     ADDR_S+0                ; Bump address one block
   885 00:0420: 85 23                        sta     ADDR_S+0
   886 00:0422: 90 02                        bcc     $+4
   887 00:0424: E6 24                        inc     ADDR_S+1
   888                        
   889 00:0426: 20 xx xx                     jsr     SendACK                 ; Acknowledge block
   890 00:0429: E6 29                        inc     BLOCK                   ; Bump block number
   891 00:042B: 4C xx xx                     jmp     TransferWait
   892                        
   893                        TransferError;
   894 00:042E: 20 xx xx                     jsr     SendNAK                 ; Send a NAK
   895 00:0431: 4C xx xx                     jmp     TransferWait            ; And try again
   896                        
   897                        TransferDone:
   898 00:0434: 20 xx xx                     jsr     SendACK                 ; Acknowledge transmission
   899 00:0437: 4C xx xx                     jmp     NewCommand              ; Done
   900                        
   901                        SendACK:
   902 00:043A: A9 06                        lda     #ACK
   903 00:043C: 4C xx xx                     jmp     UartTx
   904                        
   905                        SendNAK:
  Thu Jan 21 2016 21:36                                                                                                    Page 21


   906 00:043F: A9 15                        lda     #NAK
   907 00:0441: 4C xx xx                     jmp     UartTx
   908                        
   909                        NotXModem:
   910                        
   911                        ;===============================================================================
   912                        ; ? - Help
   913                        ;-------------------------------------------------------------------------------
   914                        
   915 00:0444: C9 3F                        cmp     #'?'                    ; Help command?
   916 00:0446: D0 0B                        bne     NotHelp
   917                        
   918                                        long_i
+  918 00:0448: C2 10                        rep     #X_FLAG
+  918                                        longi   on
   919 00:044A: A2 xx xx                     ldx     #HELP                   ; Output help string
   920 00:044D: 20 xx xx                     jsr     TxStr
   921                                        longi   off
   922 00:0450: 4C xx xx                     jmp     NewCommand
   923                        NotHelp:
   924                        
   925                        ;-------------------------------------------------------------------------------
   926                        
   927                        ShowError:
   928                                        long_i
+  928 00:0453: C2 10                        rep     #X_FLAG
+  928                                        longi   on
   929 00:0455: A2 xx xx                     ldx     #ERROR                  ; Output error message
   930 00:0458: 20 xx xx                     jsr     TxStr
   931                                        longi   off
   932 00:045B: 4C xx xx                     jmp     NewCommand
   933                        
   934                        ;===============================================================================
   935                        ;-------------------------------------------------------------------------------
   936                        
   937                        ; Checks if an expendable ROM bank is currently selected. If the bank with the
   938                        ; WDC firmware is selected then warn and accept a new command.
   939                        
   940                        CheckSafe:
   941 00:045E: 20 xx xx                     jsr     RomCheck                ; WDC ROM selected?
   942 00:0461: F0 01                        beq     $+3
   943 00:0463: 60                           rts                             ; No, save to change
   944                        
   945 00:0464: 68                           pla                             ; Discard return address
   946 00:0465: 68                           pla
   947                                        long_i                          ; Complain about bank
+  947 00:0466: C2 10                        rep     #X_FLAG
+  947                                        longi   on
   948 00:0468: A2 xx xx                     ldx     #NOT_SAFE
   949 00:046B: 20 xx xx                     jsr     TxStr
   950                                        longi   off
   951 00:046E: 4C xx xx                     jmp     NewCommand              ; And start over
   952                        
   953                        ;===============================================================================
   954                        ; Byte and Word Parsing
   955                        ;-------------------------------------------------------------------------------
   956                        
   957                        ; Parse a hex byte from the command line and store it at the location indicated
  Thu Jan 21 2016 21:36                                                                                                    Page 22


   958                        ; by the X register.
   959                        
   960                        GetByte:
   961 00:0471: 9E 00 00                     stz     0,x                     ; Set the target address
   962 00:0474: 20 xx xx                     jsr     SkipSpaces              ; Skip to first real character
   963 00:0477: 90 01                        bcc     $+3
   964 00:0479: 60                           rts                             ; None found
   965 00:047A: 20 xx xx                     jsr     IsHexDigit              ; Must have at least one digit
   966 00:047D: 90 12                        bcc     ByteFail
   967 00:047F: 20 xx xx                     jsr     AddDigit
   968 00:0482: 20 xx xx                     jsr     NextChar
   969 00:0485: B0 08                        bcs     ByteDone
   970 00:0487: 20 xx xx                     jsr     IsHexDigit
   971 00:048A: 90 03                        bcc     ByteDone
   972 00:048C: 20 xx xx                     jsr     AddDigit
   973 00:048F: 18           ByteDone:       clc
   974 00:0490: 60                           rts
   975 00:0491: 38           ByteFail:       sec
   976 00:0492: 60                           rts
   977                        
   978                        ; Parse an address from the command line and store it at the location indicated
   979                        ; by the X register.
   980                        
   981                        GetAddr:
   982 00:0493: 9E 00 00                     stz     0,x                     ; Set the target address
   983 00:0496: 9E 01 00                     stz     1,x
   984 00:0499: A5 22                        lda     BANK
   985 00:049B: 9D 02 00                     sta     2,x
   986 00:049E: 20 xx xx                     jsr     SkipSpaces              ; Skip to first real character
   987 00:04A1: 90 01                        bcc     $+3
   988 00:04A3: 60                           rts                             ; None found
   989                        
   990 00:04A4: 20 xx xx                     jsr     IsHexDigit              ; Must have at least one digit
   991 00:04A7: 90 2C                        bcc     AddrFail
   992 00:04A9: 20 xx xx                     jsr     AddDigit
   993 00:04AC: 20 xx xx                     jsr     NextChar
   994 00:04AF: B0 22                        bcs     AddrDone
   995 00:04B1: 20 xx xx                     jsr     IsHexDigit
   996 00:04B4: 90 1D                        bcc     AddrDone
   997 00:04B6: 20 xx xx                     jsr     AddDigit
   998 00:04B9: 20 xx xx                     jsr     NextChar
   999 00:04BC: B0 15                        bcs     AddrDone
  1000 00:04BE: 20 xx xx                     jsr     IsHexDigit
  1001 00:04C1: 90 10                        bcc     AddrDone
  1002 00:04C3: 20 xx xx                     jsr     AddDigit
  1003 00:04C6: 20 xx xx                     jsr     NextChar
  1004 00:04C9: B0 08                        bcs     AddrDone
  1005 00:04CB: 20 xx xx                     jsr     IsHexDigit
  1006 00:04CE: 90 03                        bcc     AddrDone
  1007 00:04D0: 20 xx xx                     jsr     AddDigit
  1008 00:04D3: 18           AddrDone:       clc                             ; Carry clear got an address
  1009 00:04D4: 60                           rts
  1010 00:04D5: 38           AddrFail:       sec                             ; Carry set -- failed.
  1011 00:04D6: 60                           rts
  1012                        
  1013                        ; Add a hex digit to the 16-bit value being build at at the location indicated
  1014                        ; by X.
  1015                        
  Thu Jan 21 2016 21:36                                                                                                    Page 23


  1016                        AddDigit:
  1017 00:04D7: 38                           sec                             ; Convert ASCII to binary
  1018 00:04D8: E9 30                        sbc     #'0'
  1019 00:04DA: C9 0A                        cmp     #$0a
  1020 00:04DC: 90 02                        bcc     $+4
  1021 00:04DE: E9 07                        sbc     #7
  1022                        
  1023 00:04E0: 1E 00 00                     asl     0,x                     ; Shift up one nybble
  1024 00:04E3: 3E 01 00                     rol     1,x
  1025 00:04E6: 1E 00 00                     asl     0,x
  1026 00:04E9: 3E 01 00                     rol     1,x
  1027 00:04EC: 1E 00 00                     asl     0,x
  1028 00:04EF: 3E 01 00                     rol     1,x
  1029 00:04F2: 1E 00 00                     asl     0,x
  1030 00:04F5: 3E 01 00                     rol     1,x
  1031                        
  1032 00:04F8: 1D 00 00                     ora     0,x                     ; Merge in new digit
  1033 00:04FB: 9D 00 00                     sta     0,x                     ; .. and save
  1034 00:04FE: 60                           rts
  1035                        
  1036                        ;===============================================================================
  1037                        ; Command Line Parsing and Building
  1038                        ;-------------------------------------------------------------------------------
  1039                        
  1040                        ; Get the next character from the command buffer updating the position in X.
  1041                        ; Set the carry if the end of the buffer is reached.
  1042                        
  1043                        NextChar:
  1044 00:04FF: C4 21                        cpy     BUFLEN                  ; Any characters left?
  1045 00:0501: 90 01                        bcc     $+3
  1046 00:0503: 60                           rts
  1047 00:0504: B9 00 02                     lda     BUFFER,y
  1048 00:0507: C8                           iny
  1049 00:0508: 4C xx xx                     jmp     ToUpperCase
  1050                        
  1051                        ; Skip over any spaces until a non-space character or the end of the string
  1052                        ; is reached.
  1053                        
  1054                        SkipSpaces:
  1055 00:050B: 20 xx xx                     jsr     NextChar                ; Fetch next character
  1056 00:050E: 90 01                        bcc     $+3                     ; Any left?
  1057 00:0510: 60                           rts                             ; No
  1058 00:0511: C9 20                        cmp     #' '                    ; Is it a space?
  1059 00:0513: F0 F6                        beq     SkipSpaces              ; Yes, try again
  1060 00:0515: 18                           clc
  1061 00:0516: 60                           rts                             ; Done
  1062                        
  1063                        ; Clear the buffer and the add the command character in A.
  1064                        
  1065                        StartCommand:
  1066 00:0517: 64 21                        stz     BUFLEN                  ; Clear the character count
  1067                        
  1068                        ; Append the character in A to the command being built updating the length.
  1069                        
  1070                        BuildCommand:
  1071 00:0519: A4 21                        ldy     BUFLEN
  1072 00:051B: E6 21                        inc     BUFLEN
  1073 00:051D: 99 00 02                     sta     BUFFER,y
  Thu Jan 21 2016 21:36                                                                                                    Page 24


  1074 00:0520: 60                           rts
  1075                        
  1076                        ; Convert the value in A into hex characters and append to the command buffer.
  1077                        
  1078                        BuildByte:
  1079 00:0521: 48                           pha                             ; Save the value
  1080 00:0522: 4A                           lsr     a                       ; Shift MS nybble down
  1081 00:0523: 4A                           lsr     a
  1082 00:0524: 4A                           lsr     a
  1083 00:0525: 4A                           lsr     a
  1084 00:0526: 20 xx xx                     jsr     HexToAscii              ; Convert to ASCII
  1085 00:0529: 20 xx xx                     jsr     BuildCommand            ; .. and add to command
  1086 00:052C: 68                           pla                             ; Pull LS nybble
  1087 00:052D: 20 xx xx                     jsr     HexToAscii              ; Convert to ASCII
  1088 00:0530: 4C xx xx                     jmp     BuildCommand            ; .. and add to command
  1089                        
  1090                        ;===============================================================================
  1091                        ; Character Classification
  1092                        ;-------------------------------------------------------------------------------
  1093                        
  1094                        ; If the character in MD_ACC is lower case then convert it to upper case.
  1095                        
  1096                        ToUpperCase:
  1097 00:0533: 20 xx xx                     jsr     IsLowerCase             ; Test the character
  1098 00:0536: 90 02                        bcc     $+4
  1099 00:0538: E9 20                        sbc     #32                     ; Convert lower case
  1100 00:053A: 18                           clc
  1101 00:053B: 60                           rts                             ; Done
  1102                        
  1103                        ; Determine if the character in MD_ACC is a lower case letter. Set the carry if it
  1104                        ; is, otherwise clear it.
  1105                        
  1106                                        longa   off
  1107                        IsLowerCase:
  1108 00:053C: C9 61                        cmp     #'a'                    ; Between a and z?
  1109 00:053E: 90 06                        bcc     ClearCarry
  1110 00:0540: C9 7B                        cmp     #'z'+1
  1111 00:0542: B0 02                        bcs     ClearCarry
  1112 00:0544: 38           SetCarry:       sec
  1113 00:0545: 60                           rts
  1114 00:0546: 18           ClearCarry:     clc
  1115 00:0547: 60                           rts
  1116                        
  1117                        ; Determine if the character in MD_ACC is a hex character. Set the carry if it is,
  1118                        ; otherwise clear it.
  1119                        
  1120                                        longa   off
  1121                        IsHexDigit:
  1122 00:0548: C9 30                        cmp     #'0'                    ; Between 0 and 9?
  1123 00:054A: 90 FA                        bcc     ClearCarry
  1124 00:054C: C9 3A                        cmp     #'9'+1
  1125 00:054E: 90 F4                        bcc     SetCarry
  1126 00:0550: C9 41                        cmp     #'A'                    ; Between MD_ACC and F?
  1127 00:0552: 90 F2                        bcc     ClearCarry
  1128 00:0554: C9 47                        cmp     #'F'+1
  1129 00:0556: 90 EC                        bcc     SetCarry
  1130 00:0558: 80 EC                        bra     ClearCarry
  1131                        
  Thu Jan 21 2016 21:36                                                                                                    Page 25


  1132                        ; Determine if the character in MD_ACC is a printable character. Set the carry if it
  1133                        ; is, otherwise clear it.
  1134                        
  1135                                        longa   off
  1136                        IsPrintable:
  1137 00:055A: C9 20                        cmp     #' '
  1138 00:055C: 90 E8                        bcc     ClearCarry
  1139 00:055E: C9 7F                        cmp     #DEL
  1140 00:0560: 90 E2                        bcc     SetCarry
  1141 00:0562: 80 E2                        bra     ClearCarry
  1142                        
  1143                        ;===============================================================================
  1144                        ; Display Utilities
  1145                        ;-------------------------------------------------------------------------------
  1146                        
  1147                        ; Display the value in MD_ACC as two hexadecimal digits.
  1148                        
  1149                        TxHex2:
  1150 00:0564: 48                           pha                             ; Save the original byte
  1151 00:0565: 4A                           lsr     a                       ; Shift down hi nybble
  1152 00:0566: 4A                           lsr     a
  1153 00:0567: 4A                           lsr     a
  1154 00:0568: 4A                           lsr     a
  1155 00:0569: 20 xx xx                     jsr     UartHex                 ; Display
  1156 00:056C: 68                           pla                             ; Recover data byte
  1157                        
  1158                        ; Display the LSB of the value in MD_ACC as a hexadecimal digit using decimal
  1159                        ; arithmetic to do the conversion.
  1160                        
  1161                        UartHex:
  1162 00:056D: 20 xx xx                     jsr     HexToAscii              ; Convert to ASCII
  1163 00:0570: 4C xx xx                     jmp     UartTx                  ; And display
  1164                        
  1165                        ; Convert a LSB of the value in MD_ACC to a hexadecimal digit using decimal
  1166                        ; arithmetic.
  1167                        
  1168                        HexToAscii:
  1169 00:0573: 29 0F                        and     #$0f                    ; Strip out lo nybble
  1170 00:0575: F8                           sed                             ; Convert to ASCII
  1171 00:0576: 18                           clc
  1172 00:0577: 69 90                        adc     #$90
  1173 00:0579: 69 40                        adc     #$40
  1174 00:057B: D8                           cld
  1175 00:057C: 60                           rts                             ; Done
  1176                        
  1177                        ; Display the string of characters starting a the memory location pointed to by
  1178                        ; X (16-bits).
  1179                        
  1180                                        .longa  off
  1181                                        .longi  on
  1182                        TxStr:
  1183 00:057D: BD 00 00                     lda     0,x                     ; Fetch the next character
  1184 00:0580: D0 01                        bne     $+3                     ; Return it end of string
  1185 00:0582: 60                           rts
  1186 00:0583: 20 xx xx                     jsr     UartTx                  ; Otherwise print it
  1187 00:0586: E8                           inx                             ; Bump the pointer
  1188 00:0587: 80 F4                        bra     TxStr                   ; And repeat
  1189                        
  Thu Jan 21 2016 21:36                                                                                                    Page 26


  1190                        ; Display a CR/LF control character sequence.
  1191                        
  1192                        TxCRLF:
  1193 00:0589: 20 xx xx                     jsr     TxCR                    ; Transmit a CR
  1194 00:058C: A9 0A                        lda     #LF                     ; Followed by a LF
  1195 00:058E: 4C xx xx                     jmp     UartTx
  1196                        
  1197                        TxCR:
  1198 00:0591: A9 0D                        lda     #CR                     ; Transmit a CR
  1199 00:0593: 4C xx xx                     jmp     UartTx
  1200                        
  1201                        TxSpace:
  1202 00:0596: A9 20                        lda     #' '                    ; Transmit a space
  1203 00:0598: 4C xx xx                     jmp     UartTx
  1204                        
  1205                        ;===============================================================================
  1206                        ;-------------------------------------------------------------------------------
  1207                        
  1208                        ;
  1209                        
  1210                                        longa   off
  1211                                        longi   off
  1212                        TxCodeBytes:
  1213 00:059B: A7 23                        lda     [ADDR_S]                ; Fetch the opcode
  1214 00:059D: 20 xx xx                     jsr     OpcodeSize              ; and work out its size
  1215 00:05A0: AA                           tax
  1216 00:05A1: A0 00                        ldy     #0                      ; Clear byte count
  1217                        CodeLoop:
  1218 00:05A3: B7 23                        lda     [ADDR_S],Y              ; Fetch a byte of code
  1219 00:05A5: 20 xx xx                     jsr     TxHex2
  1220 00:05A8: 20 xx xx                     jsr     TxSpace
  1221 00:05AB: C8                           iny
  1222 00:05AC: CA                           dex
  1223 00:05AD: D0 F4                        bne     CodeLoop
  1224                        PadLoop:
  1225 00:05AF: C0 04                        cpy     #4                      ; Need to pad out?
  1226 00:05B1: D0 01                        bne     $+3
  1227 00:05B3: 60                           rts
  1228 00:05B4: 20 xx xx                     jsr     TxSpace
  1229 00:05B7: 20 xx xx                     jsr     TxSpace
  1230 00:05BA: 20 xx xx                     jsr     TxSpace
  1231 00:05BD: C8                           iny
  1232 00:05BE: 80 EF                        bra     PadLoop
  1233                        
  1234                        ;
  1235                        
  1236                                        longa   off
  1237                                        longi   off
  1238                        TxSymbolic:
  1239 00:05C0: A7 23                        lda     [ADDR_S]                ; Fetch opcode
  1240 00:05C2: 48                           pha
  1241 00:05C3: 20 xx xx                     jsr     TxOpcode
  1242 00:05C6: 68                           pla
  1243 00:05C7: 20 xx xx                     jsr     TxOperand
  1244 00:05CA: 60                           rts
  1245                        
  1246                        ;
  1247                        
  Thu Jan 21 2016 21:36                                                                                                    Page 27


  1248                                        longa   off
  1249                                        longi   off
  1250                        TxOpcode:
  1251 00:05CB: 08                           php                             ; Save register sizes
  1252 00:05CC: AA                           tax                             ; Work out the mnemonic
  1253 00:05CD: BD xx xx                     lda     OPCODES,x
  1254 00:05D0: AA                           tax
  1255                                        long_a
+ 1255 00:05D1: C2 20                        rep     #M_FLAG
+ 1255                                        longa   on
  1256 00:05D3: BD xx xx                     lda     MNEMONICS,x
  1257                        
  1258 00:05D6: 48                           pha                             ; Save last character
  1259 00:05D7: 4A                           lsr     a                       ; Shift second down
  1260 00:05D8: 4A                           lsr     a
  1261 00:05D9: 4A                           lsr     a
  1262 00:05DA: 4A                           lsr     a
  1263 00:05DB: 4A                           lsr     a
  1264 00:05DC: 48                           pha                             ; Save it
  1265 00:05DD: 4A                           lsr     a                       ; Shift first down
  1266 00:05DE: 4A                           lsr     a
  1267 00:05DF: 4A                           lsr     a
  1268 00:05E0: 4A                           lsr     a
  1269 00:05E1: 4A                           lsr     a
  1270 00:05E2: 20 xx xx                     jsr     ExpandMnem              ; Print first
  1271 00:05E5: 68                           pla
  1272 00:05E6: 20 xx xx                     jsr     ExpandMnem              ; .. second
  1273 00:05E9: 68                           pla
  1274 00:05EA: 20 xx xx                     jsr     ExpandMnem              ; .. and third
  1275 00:05ED: 28                           plp
  1276 00:05EE: 20 xx xx                     jsr     TxSpace
  1277 00:05F1: 60                           rts
  1278                        
  1279                        ExpandMnem:
  1280 00:05F2: 18                           clc
  1281 00:05F3: 29 1F 00                     and     #$1f                    ; Expand letter code
  1282 00:05F6: 69 40 00                     adc     #'@'
  1283 00:05F9: 4C xx xx                     jmp     UartTx
  1284                        
  1285                        ;
  1286                        
  1287                                        longa   off
  1288                                        longi   off
  1289                        TxOperand:
  1290 00:05FC: AA                           tax                             ; Work out addressing mode
  1291 00:05FD: BD xx xx                     lda     MODES,x
  1292 00:0600: AA                           tax
  1293 00:0601: 7C xx xx                     jmp     (MODE_SHOW,x)
  1294                        
  1295                        MODE_SHOW:
  1296 00:0604: xx xx                        dw      TxAbsolute              ; a
  1297 00:0606: xx xx                        dw      TxAccumulator           ; A
  1298 00:0608: xx xx                        dw      TxAbsoluteX             ; a,x
  1299 00:060A: xx xx                        dw      TxAbsoluteY             ; a,y
  1300 00:060C: xx xx                        dw      TxLong                  ; al
  1301 00:060E: xx xx                        dw      TxLongX                 ; al,x
  1302 00:0610: xx xx                        dw      TxAbsoluteIndirect      ; (a)
  1303 00:0612: xx xx                        dw      TxAbsoluteXIndirect     ; (a,x)
  Thu Jan 21 2016 21:36                                                                                                    Page 28


  1304 00:0614: xx xx                        dw      TxDirect                ; d
  1305 00:0616: xx xx                        dw      TxStack                 ; d,s
  1306 00:0618: xx xx                        dw      TxDirectX               ; d,x
  1307 00:061A: xx xx                        dw      TxDirectY               ; d,y
  1308 00:061C: xx xx                        dw      TxDirectIndirect        ; (d)
  1309 00:061E: xx xx                        dw      TxDirectIndirectLong    ; [d]
  1310 00:0620: xx xx                        dw      TxStackIndirectY        ; (d,s),y
  1311 00:0622: xx xx                        dw      TxDirectXIndirect       ; (d,x)
  1312 00:0624: xx xx                        dw      TxDirectIndirectY       ; (d),y
  1313 00:0626: xx xx                        dw      TxDirectIndirectLongY   ; [d],y
  1314 00:0628: xx xx                        dw      TxImplied               ;
  1315 00:062A: xx xx                        dw      TxRelative              ; r
  1316 00:062C: xx xx                        dw      TxRelativeLong          ; rl
  1317 00:062E: xx xx                        dw      TxImplied               ; xyc
  1318 00:0630: xx xx                        dw      TxImmediateM            ; # (A & M)
  1319 00:0632: xx xx                        dw      TxImmediateByte         ; # (BRK/COP/WDM)
  1320 00:0634: xx xx                        dw      TxImmediateX            ; # (X or Y)
  1321                        
  1322                        
  1323                        TxAccumulator:
  1324 00:0636: A9 41                        lda     #'A'
  1325 00:0638: 4C xx xx                     jmp     UartTx
  1326                        
  1327                        TxImmediateM:
  1328 00:063B: A9 20                        lda     #M_FLAG
  1329 00:063D: 24 20                        bit     FLAGS
  1330 00:063F: F0 12                        beq     TxImmediateWord
  1331 00:0641: 80 09                        bra     TxImmediateByte
  1332                        
  1333                        TxImmediateX:
  1334 00:0643: A9 10                        lda     #X_FLAG
  1335 00:0645: 24 20                        bit     FLAGS
  1336 00:0647: F0 0A                        beq     TxImmediateWord
  1337 00:0649: 80 01                        bra     TxImmediateByte
  1338                        
  1339                        TxImplied:
  1340 00:064B: 60                           rts
  1341                        
  1342                        TxImmediateByte:
  1343 00:064C: A9 23                        lda     #'#'
  1344 00:064E: 20 xx xx                     jsr     UartTx
  1345 00:0651: 80 14                        bra     TxDirect
  1346                        
  1347                        TxImmediateWord:
  1348 00:0653: A9 23                        lda     #'#'
  1349 00:0655: 20 xx xx                     jsr     UartTx
  1350 00:0658: 80 33                        bra     TxAbsolute
  1351                        
  1352                        TxStack:
  1353 00:065A: 20 xx xx                     jsr     TxDirect
  1354 00:065D: A9 2C                        lda     #','
  1355 00:065F: 20 xx xx                     jsr     UartTx
  1356 00:0662: A9 53                        lda     #'S'
  1357 00:0664: 4C xx xx                     jmp     UartTx
  1358                        
  1359                        TxDirect:
  1360 00:0667: A9 24                        lda     #'$'
  1361 00:0669: 20 xx xx                     jsr     UartTx
  Thu Jan 21 2016 21:36                                                                                                    Page 29


  1362 00:066C: A0 01                        ldy     #1
  1363 00:066E: B7 23                        lda     [ADDR_S],Y
  1364 00:0670: 4C xx xx                     jmp     TxHex2
  1365                        
  1366                        TxDirectX:
  1367 00:0673: 20 xx xx                     jsr     TxDirect
  1368 00:0676: A9 2C        TxX:            lda     #','
  1369 00:0678: 20 xx xx                     jsr     UartTx
  1370 00:067B: A9 58                        lda     #'X'
  1371 00:067D: 4C xx xx                     jmp     UartTx
  1372                        
  1373                        TxDirectY:
  1374 00:0680: 20 xx xx                     jsr     TxDirect
  1375 00:0683: A9 2C        TxY:            lda     #','
  1376 00:0685: 20 xx xx                     jsr     UartTx
  1377 00:0688: A9 59                        lda     #'Y'
  1378 00:068A: 4C xx xx                     jmp     UartTx
  1379                        
  1380                        TxAbsolute:
  1381 00:068D: A9 24                        lda     #'$'
  1382 00:068F: 20 xx xx                     jsr     UartTx
  1383 00:0692: A0 02                        ldy     #2
  1384 00:0694: B7 23                        lda     [ADDR_S],Y
  1385 00:0696: 20 xx xx                     jsr     TxHex2
  1386 00:0699: 88                           dey
  1387 00:069A: B7 23                        lda     [ADDR_S],Y
  1388 00:069C: 4C xx xx                     jmp     TxHex2
  1389                        
  1390                        TxAbsoluteX:
  1391 00:069F: 20 xx xx                     jsr     TxAbsolute
  1392 00:06A2: 80 D2                        bra     TxX
  1393                        
  1394                        TxAbsoluteY:
  1395 00:06A4: 20 xx xx                     jsr     TxAbsolute
  1396 00:06A7: 80 DA                        bra     TxY
  1397                        
  1398                        TxLong:
  1399 00:06A9: A9 24                        lda     #'$'
  1400 00:06AB: 20 xx xx                     jsr     UartTx
  1401 00:06AE: A0 03                        ldy     #3
  1402 00:06B0: B7 23                        lda     [ADDR_S],Y
  1403 00:06B2: 20 xx xx                     jsr     TxHex2
  1404 00:06B5: A9 3A                        lda     #':'
  1405 00:06B7: 20 xx xx                     jsr     UartTx
  1406 00:06BA: 88                           dey
  1407 00:06BB: B7 23                        lda     [ADDR_S],Y
  1408 00:06BD: 20 xx xx                     jsr     TxHex2
  1409 00:06C0: 88                           dey
  1410 00:06C1: B7 23                        lda     [ADDR_S],Y
  1411 00:06C3: 4C xx xx                     jmp     TxHex2
  1412                        
  1413                        TxLongX:
  1414 00:06C6: 20 xx xx                     jsr     TxLong
  1415 00:06C9: 80 AB                        bra     TxX
  1416                        
  1417                        TxAbsoluteIndirect:
  1418 00:06CB: A9 28                        lda     #'('
  1419 00:06CD: 20 xx xx                     jsr     UartTx
  Thu Jan 21 2016 21:36                                                                                                    Page 30


  1420 00:06D0: 20 xx xx                     jsr     TxAbsolute
  1421 00:06D3: A9 29                        lda     #')'
  1422 00:06D5: 4C xx xx                     jmp     UartTx
  1423                        
  1424                        TxAbsoluteXIndirect:
  1425 00:06D8: A9 28                        lda     #'('
  1426 00:06DA: 20 xx xx                     jsr     UartTx
  1427 00:06DD: 20 xx xx                     jsr     TxAbsoluteX
  1428 00:06E0: A9 29                        lda     #')'
  1429 00:06E2: 4C xx xx                     jmp     UartTx
  1430                        
  1431                        TxDirectIndirect:
  1432 00:06E5: A9 28                        lda     #'('
  1433 00:06E7: 20 xx xx                     jsr     UartTx
  1434 00:06EA: 20 xx xx                     jsr     TxDirect
  1435 00:06ED: A9 29                        lda     #')'
  1436 00:06EF: 4C xx xx                     jmp     UartTx
  1437                        
  1438                        TxDirectXIndirect:
  1439 00:06F2: A9 28                        lda     #'('
  1440 00:06F4: 20 xx xx                     jsr     UartTx
  1441 00:06F7: 20 xx xx                     jsr     TxDirectX
  1442 00:06FA: A9 29                        lda     #')'
  1443 00:06FC: 4C xx xx                     jmp     UartTx
  1444                        
  1445                        TxDirectIndirectY:
  1446 00:06FF: A9 28                        lda     #'('
  1447 00:0701: 20 xx xx                     jsr     UartTx
  1448 00:0704: 20 xx xx                     jsr     TxDirect
  1449 00:0707: A9 29                        lda     #')'
  1450 00:0709: 20 xx xx                     jsr     UartTx
  1451 00:070C: 4C xx xx                     jmp     TxY
  1452                        
  1453                        TxDirectIndirectLong:
  1454 00:070F: A9 5B                        lda     #'['
  1455 00:0711: 20 xx xx                     jsr     UartTx
  1456 00:0714: 20 xx xx                     jsr     TxDirect
  1457 00:0717: A9 5D                        lda     #']'
  1458 00:0719: 4C xx xx                     jmp     UartTx
  1459                        
  1460                        TxDirectIndirectLongY:
  1461 00:071C: 20 xx xx                     jsr     TxDirectIndirectLong
  1462 00:071F: 4C xx xx                     jmp     TxY
  1463                        
  1464                        TxStackIndirectY:
  1465 00:0722: A9 28                        lda     #'('
  1466 00:0724: 20 xx xx                     jsr     UartTx
  1467 00:0727: 20 xx xx                     jsr     TxStack
  1468 00:072A: A9 29                        lda     #')'
  1469 00:072C: 20 xx xx                     jsr     UartTx
  1470 00:072F: 4C xx xx                     jmp     TxY
  1471                        
  1472                        TxRelative:
  1473 00:0732: A6 24                        ldx     ADDR_S+1                ; Work out next PC
  1474 00:0734: A5 23                        lda     ADDR_S+0
  1475 00:0736: 18                           clc
  1476 00:0737: 69 02                        adc     #2
  1477 00:0739: 90 01                        bcc     $+3
  Thu Jan 21 2016 21:36                                                                                                    Page 31


  1478 00:073B: E8                           inx
  1479                        
  1480 00:073C: 48                           pha                             ; Add relative offset
  1481 00:073D: A0 01                        ldy     #1
  1482 00:073F: B7 23                        lda     [ADDR_S],y
  1483 00:0741: 10 01                        bpl     $+3
  1484 00:0743: CA                           dex
  1485 00:0744: 18                           clc
  1486 00:0745: 63 01                        adc     1,s
  1487 00:0747: 83 01                        sta     1,s
  1488 00:0749: 90 01                        bcc     $+3
  1489 00:074B: E8                           inx
  1490 00:074C: 80 15                        bra     TxAddr
  1491                        
  1492                        TxRelativeLong:
  1493 00:074E: A6 24                        ldx     ADDR_S+1                ; Work out next PC
  1494 00:0750: A5 23                        lda     ADDR_S+0
  1495 00:0752: 18                           clc
  1496 00:0753: 69 03                        adc     #3
  1497 00:0755: 90 01                        bcc     $+3
  1498 00:0757: E8                           inx
  1499                        
  1500 00:0758: 18                           clc                             ; Add relative offset
  1501 00:0759: A0 01                        ldy     #1
  1502 00:075B: 77 23                        adc     [ADDR_S],y
  1503 00:075D: 48                           pha
  1504 00:075E: C8                           iny
  1505 00:075F: 8A                           txa
  1506 00:0760: 77 23                        adc     [ADDR_S],Y
  1507 00:0762: AA                           tax
  1508                        
  1509                        TxAddr:
  1510 00:0763: A9 24                        lda     #'$'                    ; Print address
  1511 00:0765: 20 xx xx                     jsr     UartTx
  1512 00:0768: 8A                           txa
  1513 00:0769: 20 xx xx                     jsr     TxHex2
  1514 00:076C: 68                           pla
  1515 00:076D: 4C xx xx                     jmp     TxHex2
  1516                        
  1517                        ;  Returns the size of the opcode in A given the current flag settings.
  1518                        
  1519                                        longa   off
  1520                                        longi   off
  1521                        OpcodeSize:
  1522 00:0770: AA                           tax                             ; Work out addressing mode
  1523 00:0771: BD xx xx                     lda     MODES,x
  1524 00:0774: AA                           tax
  1525 00:0775: 7C xx xx                     jmp     (MODE_SIZE,x)
  1526                        
  1527                        MODE_SIZE:
  1528 00:0778: xx xx                        dw      Size3                   ; a
  1529 00:077A: xx xx                        dw      Size1                   ; A
  1530 00:077C: xx xx                        dw      Size3                   ; a,x
  1531 00:077E: xx xx                        dw      Size3                   ; a,y
  1532 00:0780: xx xx                        dw      Size4                   ; al
  1533 00:0782: xx xx                        dw      Size4                   ; al,x
  1534 00:0784: xx xx                        dw      Size3                   ; (a)
  1535 00:0786: xx xx                        dw      Size3                   ; (a,x)
  Thu Jan 21 2016 21:36                                                                                                    Page 32


  1536 00:0788: xx xx                        dw      Size2                   ; d
  1537 00:078A: xx xx                        dw      Size2                   ; d,s
  1538 00:078C: xx xx                        dw      Size2                   ; d,x
  1539 00:078E: xx xx                        dw      Size2                   ; d,y
  1540 00:0790: xx xx                        dw      Size2                   ; (d)
  1541 00:0792: xx xx                        dw      Size2                   ; [d]
  1542 00:0794: xx xx                        dw      Size2                   ; (d,s),y
  1543 00:0796: xx xx                        dw      Size2                   ; (d,x)
  1544 00:0798: xx xx                        dw      Size2                   ; (d),y
  1545 00:079A: xx xx                        dw      Size2                   ; [d],y
  1546 00:079C: xx xx                        dw      Size1                   ;
  1547 00:079E: xx xx                        dw      Size2                   ; r
  1548 00:07A0: xx xx                        dw      Size3                   ; rl
  1549 00:07A2: xx xx                        dw      Size3                   ; xyc
  1550 00:07A4: xx xx                        dw      TestM                   ; # (A & M)
  1551 00:07A6: xx xx                        dw      Size2                   ; # (BRK/COP/WDM)
  1552 00:07A8: xx xx                        dw      TestX                   ; # (X or Y)
  1553                        
  1554                        TestM
  1555 00:07AA: A9 20                        lda     #M_FLAG                 ; Is M bit set?
  1556 00:07AC: 25 20                        and     FLAGS
  1557 00:07AE: F0 10                        beq     Size3                   ; No, word
  1558 00:07B0: 80 0B                        bra     Size2                   ; else byte
  1559                        
  1560                        TestX
  1561 00:07B2: A9 10                        lda     #X_FLAG                 ; Is X bit set?
  1562 00:07B4: 25 20                        and     FLAGS
  1563 00:07B6: F0 08                        beq     Size3                   ; No, word
  1564 00:07B8: 80 03                        bra     Size2                   ; else byte
  1565                        
  1566 00:07BA: A9 01        Size1:          lda     #1
  1567 00:07BC: 60                           rts
  1568 00:07BD: A9 02        Size2:          lda     #2
  1569 00:07BF: 60                           rts
  1570 00:07C0: A9 03        Size3           lda     #3
  1571 00:07C2: 60                           rts
  1572 00:07C3: A9 04        Size4:          lda     #4
  1573 00:07C5: 60                           rts
  1574                        
  1575                        OPCODES:
  1576 00:07C6: 16 52 28 52                  db      OP_BRK,OP_ORA,OP_COP,OP_ORA     ; 00
  1577 00:07CA: A0 52 04 52                  db      OP_TSB,OP_ORA,OP_ASL,OP_ORA
  1578 00:07CE: 62 52 04 5E                  db      OP_PHP,OP_ORA,OP_ASL,OP_PHD
  1579 00:07D2: A0 52 04 52                  db      OP_TSB,OP_ORA,OP_ASL,OP_ORA
  1580 00:07D6: 12 52 52 52                  db      OP_BPL,OP_ORA,OP_ORA,OP_ORA     ; 10
  1581 00:07DA: 9E 52 04 52                  db      OP_TRB,OP_ORA,OP_ASL,OP_ORA
  1582 00:07DE: 1E 52 36 9A                  db      OP_CLC,OP_ORA,OP_INC,OP_TCS
  1583 00:07E2: 9E 52 04 52                  db      OP_TRB,OP_ORA,OP_ASL,OP_ORA
  1584 00:07E6: 42 02 40 02                  db      OP_JSR,OP_AND,OP_JSL,OP_AND     ; 20
  1585 00:07EA: 0C 02 76 02                  db      OP_BIT,OP_AND,OP_ROL,OP_AND
  1586 00:07EE: 6E 02 76 6C                  db      OP_PLP,OP_AND,OP_ROL,OP_PLD
  1587 00:07F2: 0C 02 76 02                  db      OP_BIT,OP_AND,OP_ROL,OP_AND
  1588 00:07F6: 0E 02 02 02                  db      OP_BMI,OP_AND,OP_AND,OP_AND     ; 30
  1589 00:07FA: 0C 02 76 02                  db      OP_BIT,OP_AND,OP_ROL,OP_AND
  1590 00:07FE: 82 02 2E A2                  db      OP_SEC,OP_AND,OP_DEC,OP_TSC
  1591 00:0802: 0C 02 76 02                  db      OP_BIT,OP_AND,OP_ROL,OP_AND
  1592 00:0806: 7A 34 B2 34                  db      OP_RTI,OP_EOR,OP_WDM,OP_EOR     ; 40
  1593 00:080A: 4E 34 4A 34                  db      OP_MVP,OP_EOR,OP_LSR,OP_EOR
  Thu Jan 21 2016 21:36                                                                                                    Page 33


  1594 00:080E: 5A 34 4A 60                  db      OP_PHA,OP_EOR,OP_LSR,OP_PHK
  1595 00:0812: 3E 34 4A 34                  db      OP_JMP,OP_EOR,OP_LSR,OP_EOR
  1596 00:0816: 1A 34 34 34                  db      OP_BVC,OP_EOR,OP_EOR,OP_EOR     ; 50
  1597 00:081A: 4C 34 4A 34                  db      OP_MVN,OP_EOR,OP_LSR,OP_EOR
  1598 00:081E: 22 34 66 98                  db      OP_CLI,OP_EOR,OP_PHY,OP_TCD
  1599 00:0822: 3E 34 4A 34                  db      OP_JMP,OP_EOR,OP_LSR,OP_EOR
  1600 00:0826: 7E 00 58 00                  db      OP_RTS,OP_ADC,OP_PER,OP_ADC     ; 60
  1601 00:082A: 92 00 78 00                  db      OP_STZ,OP_ADC,OP_ROR,OP_ADC
  1602 00:082E: 68 00 78 7C                  db      OP_PLA,OP_ADC,OP_ROR,OP_RTL
  1603 00:0832: 3E 00 78 00                  db      OP_JMP,OP_ADC,OP_ROR,OP_ADC
  1604 00:0836: 1C 00 00 00                  db      OP_BVS,OP_ADC,OP_ADC,OP_ADC     ; 70
  1605 00:083A: 92 00 78 00                  db      OP_STZ,OP_ADC,OP_ROR,OP_ADC
  1606 00:083E: 86 00 72 9C                  db      OP_SEI,OP_ADC,OP_PLY,OP_TDC
  1607 00:0842: 3E 00 78 00                  db      OP_JMP,OP_ADC,OP_ROR,OP_ADC
  1608 00:0846: 14 8A 18 8A                  db      OP_BRA,OP_STA,OP_BRL,OP_STA     ; 80
  1609 00:084A: 90 8A 8E 8A                  db      OP_STY,OP_STA,OP_STX,OP_STA
  1610 00:084E: 32 0C A6 5C                  db      OP_DEY,OP_BIT,OP_TXA,OP_PHB
  1611 00:0852: 90 8A 8E 8A                  db      OP_STY,OP_STA,OP_STX,OP_STA
  1612 00:0856: 06 8A 8A 8A                  db      OP_BCC,OP_STA,OP_STA,OP_STA     ; 90
  1613 00:085A: 90 8A 8E 8A                  db      OP_STY,OP_STA,OP_STX,OP_STA
  1614 00:085E: AC 8A A8 AA                  db      OP_TYA,OP_STA,OP_TXS,OP_TXY
  1615 00:0862: 92 8A 92 8A                  db      OP_STZ,OP_STA,OP_STZ,OP_STA
  1616 00:0866: 48 44 46 44                  db      OP_LDY,OP_LDA,OP_LDX,OP_LDA     ; A0
  1617 00:086A: 48 44 46 44                  db      OP_LDY,OP_LDA,OP_LDX,OP_LDA
  1618 00:086E: 96 44 94 6A                  db      OP_TAY,OP_LDA,OP_TAX,OP_PLB
  1619 00:0872: 48 44 46 44                  db      OP_LDY,OP_LDA,OP_LDX,OP_LDA
  1620 00:0876: 08 44 44 48                  db      OP_BCS,OP_LDA,OP_LDA,OP_LDY     ; B0
  1621 00:087A: 44 48 46 44                  db      OP_LDA,OP_LDY,OP_LDX,OP_LDA
  1622 00:087E: 24 44 A4 AE                  db      OP_CLV,OP_LDA,OP_TSX,OP_TYX
  1623 00:0882: 48 44 46 44                  db      OP_LDY,OP_LDA,OP_LDX,OP_LDA
  1624 00:0886: 2C 26 74 26                  db      OP_CPY,OP_CMP,OP_REP,OP_CMP     ; C0
  1625 00:088A: 2C 26 2E 26                  db      OP_CPY,OP_CMP,OP_DEC,OP_CMP
  1626 00:088E: 3A 26 30 B0                  db      OP_INY,OP_CMP,OP_DEX,OP_WAI
  1627 00:0892: 2C 26 2E 26                  db      OP_CPY,OP_CMP,OP_DEC,OP_CMP
  1628 00:0896: 10 26 26 26                  db      OP_BNE,OP_CMP,OP_CMP,OP_CMP     ; D0
  1629 00:089A: 56 26 2E 26                  db      OP_PEI,OP_CMP,OP_DEC,OP_CMP
  1630 00:089E: 20 26 64 8C                  db      OP_CLD,OP_CMP,OP_PHX,OP_STP
  1631 00:08A2: 3C 26 2E 26                  db      OP_JML,OP_CMP,OP_DEC,OP_CMP
  1632 00:08A6: 2A 80 88 80                  db      OP_CPX,OP_SBC,OP_SEP,OP_SBC     ; E0
  1633 00:08AA: 2A 80 36 80                  db      OP_CPX,OP_SBC,OP_INC,OP_SBC
  1634 00:08AE: 38 80 50 B4                  db      OP_INX,OP_SBC,OP_NOP,OP_XBA
  1635 00:08B2: 2A 80 36 80                  db      OP_CPX,OP_SBC,OP_INC,OP_SBC
  1636 00:08B6: 0A 80 80 80                  db      OP_BEQ,OP_SBC,OP_SBC,OP_SBC     ; F0
  1637 00:08BA: 54 80 36 80                  db      OP_PEA,OP_SBC,OP_INC,OP_SBC
  1638 00:08BE: 84 80 70 B6                  db      OP_SED,OP_SBC,OP_PLX,OP_XCE
  1639 00:08C2: 42 80 36 80                  db      OP_JSR,OP_SBC,OP_INC,OP_SBC
  1640                        
  1641                        MODES:
  1642 00:08C6: 2E 1E 2E 12                  db      MD_INT,MD_DIX,MD_INT,MD_STK     ; 00
  1643 00:08CA: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1644 00:08CE: 24 2C 02 24                  db      MD_IMP,MD_IMM,MD_ACC,MD_IMP
  1645 00:08D2: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1646 00:08D6: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; 10
  1647 00:08DA: 10 14 14 22                  db      MD_DPG,MD_DPX,MD_DPX,MD_DLY
  1648 00:08DE: 24 06 02 24                  db      MD_IMP,MD_ABY,MD_ACC,MD_IMP
  1649 00:08E2: 00 04 04 0A                  db      MD_ABS,MD_ABX,MD_ABX,MD_ALX
  1650 00:08E6: 00 1E 08 12                  db      MD_ABS,MD_DIX,MD_ALG,MD_STK     ; 20
  1651 00:08EA: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  Thu Jan 21 2016 21:36                                                                                                    Page 34


  1652 00:08EE: 24 2C 02 24                  db      MD_IMP,MD_IMM,MD_ACC,MD_IMP
  1653 00:08F2: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1654 00:08F6: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; 30
  1655 00:08FA: 14 14 14 22                  db      MD_DPX,MD_DPX,MD_DPX,MD_DLY
  1656 00:08FE: 24 06 02 24                  db      MD_IMP,MD_ABY,MD_ACC,MD_IMP
  1657 00:0902: 04 04 04 0A                  db      MD_ABX,MD_ABX,MD_ABX,MD_ALX
  1658 00:0906: 24 1E 2E 12                  db      MD_IMP,MD_DIX,MD_INT,MD_STK     ; 40
  1659 00:090A: 2A 10 10 1A                  db      MD_MOV,MD_DPG,MD_DPG,MD_DLI
  1660 00:090E: 24 2C 02 24                  db      MD_IMP,MD_IMM,MD_ACC,MD_IMP
  1661 00:0912: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1662 00:0916: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; 50
  1663 00:091A: 2A 14 14 22                  db      MD_MOV,MD_DPX,MD_DPX,MD_DLY
  1664 00:091E: 24 06 24 24                  db      MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1665 00:0922: 08 04 04 0A                  db      MD_ALG,MD_ABX,MD_ABX,MD_ALX
  1666 00:0926: 24 1E 24 12                  db      MD_IMP,MD_DIX,MD_IMP,MD_STK     ; 60
  1667 00:092A: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1668 00:092E: 24 2C 02 24                  db      MD_IMP,MD_IMM,MD_ACC,MD_IMP
  1669 00:0932: 0C 00 00 08                  db      MD_AIN,MD_ABS,MD_ABS,MD_ALG
  1670 00:0936: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; 70
  1671 00:093A: 14 14 14 22                  db      MD_DPX,MD_DPX,MD_DPX,MD_DLY
  1672 00:093E: 24 06 24 24                  db      MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1673 00:0942: 0E 04 04 0A                  db      MD_AIX,MD_ABX,MD_ABX,MD_ALX
  1674 00:0946: 26 1E 28 12                  db      MD_REL,MD_DIX,MD_RLG,MD_STK     ; 80
  1675 00:094A: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1676 00:094E: 24 2C 24 24                  db      MD_IMP,MD_IMM,MD_IMP,MD_IMP
  1677 00:0952: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1678 00:0956: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; 90
  1679 00:095A: 14 14 16 22                  db      MD_DPX,MD_DPX,MD_DPY,MD_DLY
  1680 00:095E: 24 06 24 24                  db      MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1681 00:0962: 00 04 04 0A                  db      MD_ABS,MD_ABX,MD_ABX,MD_ALX
  1682 00:0966: 30 1E 30 12                  db      MD_IMX,MD_DIX,MD_IMX,MD_STK     ; A0
  1683 00:096A: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1684 00:096E: 24 2C 24 24                  db      MD_IMP,MD_IMM,MD_IMP,MD_IMP
  1685 00:0972: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1686 00:0976: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; B0
  1687 00:097A: 14 14 16 22                  db      MD_DPX,MD_DPX,MD_DPY,MD_DLY
  1688 00:097E: 24 06 24 24                  db      MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1689 00:0982: 04 04 06 0A                  db      MD_ABX,MD_ABX,MD_ABY,MD_ALX
  1690 00:0986: 30 1E 2E 12                  db      MD_IMX,MD_DIX,MD_INT,MD_STK     ; C0
  1691 00:098A: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1692 00:098E: 24 2C 24 24                  db      MD_IMP,MD_IMM,MD_IMP,MD_IMP
  1693 00:0992: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1694 00:0996: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; D0
  1695 00:099A: 24 14 14 22                  db      MD_IMP,MD_DPX,MD_DPX,MD_DLY
  1696 00:099E: 24 06 24 24                  db      MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1697 00:09A2: 0C 04 04 0A                  db      MD_AIN,MD_ABX,MD_ABX,MD_ALX
  1698 00:09A6: 30 1E 2E 12                  db      MD_IMX,MD_DIX,MD_INT,MD_STK     ; E0
  1699 00:09AA: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1700 00:09AE: 24 2C 24 24                  db      MD_IMP,MD_IMM,MD_IMP,MD_IMP
  1701 00:09B2: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1702 00:09B6: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; F0
  1703 00:09BA: 24 14 14 22                  db      MD_IMP,MD_DPX,MD_DPX,MD_DLY
  1704 00:09BE: 24 06 24 24                  db      MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1705 00:09C2: 0E 04 04 0A                  db      MD_AIX,MD_ABX,MD_ABX,MD_ALX
  1706                        
  1707                        MNEMONICS:
  1708                                        MNEM    'A','D','C'
+ 1708 00:09C6: 83 04                        dw      (((('A'-'@')<<5)|('D'-'@'))<<5)|('C'-'@')
  Thu Jan 21 2016 21:36                                                                                                    Page 35


  1709                                        MNEM    'A','N','D'
+ 1709 00:09C8: C4 05                        dw      (((('A'-'@')<<5)|('N'-'@'))<<5)|('D'-'@')
  1710                                        MNEM    'A','S','L'
+ 1710 00:09CA: 6C 06                        dw      (((('A'-'@')<<5)|('S'-'@'))<<5)|('L'-'@')
  1711                                        MNEM    'B','C','C'
+ 1711 00:09CC: 63 08                        dw      (((('B'-'@')<<5)|('C'-'@'))<<5)|('C'-'@')
  1712                                        MNEM    'B','C','S'
+ 1712 00:09CE: 73 08                        dw      (((('B'-'@')<<5)|('C'-'@'))<<5)|('S'-'@')
  1713                                        MNEM    'B','E','Q'
+ 1713 00:09D0: B1 08                        dw      (((('B'-'@')<<5)|('E'-'@'))<<5)|('Q'-'@')
  1714                                        MNEM    'B','I','T'
+ 1714 00:09D2: 34 09                        dw      (((('B'-'@')<<5)|('I'-'@'))<<5)|('T'-'@')
  1715                                        MNEM    'B','M','I'
+ 1715 00:09D4: A9 09                        dw      (((('B'-'@')<<5)|('M'-'@'))<<5)|('I'-'@')
  1716                                        MNEM    'B','N','E'
+ 1716 00:09D6: C5 09                        dw      (((('B'-'@')<<5)|('N'-'@'))<<5)|('E'-'@')
  1717                                        MNEM    'B','P','L'
+ 1717 00:09D8: 0C 0A                        dw      (((('B'-'@')<<5)|('P'-'@'))<<5)|('L'-'@')
  1718                                        MNEM    'B','R','A'
+ 1718 00:09DA: 41 0A                        dw      (((('B'-'@')<<5)|('R'-'@'))<<5)|('A'-'@')
  1719                                        MNEM    'B','R','K'
+ 1719 00:09DC: 4B 0A                        dw      (((('B'-'@')<<5)|('R'-'@'))<<5)|('K'-'@')
  1720                                        MNEM    'B','R','L'
+ 1720 00:09DE: 4C 0A                        dw      (((('B'-'@')<<5)|('R'-'@'))<<5)|('L'-'@')
  1721                                        MNEM    'B','V','C'
+ 1721 00:09E0: C3 0A                        dw      (((('B'-'@')<<5)|('V'-'@'))<<5)|('C'-'@')
  1722                                        MNEM    'B','V','S'
+ 1722 00:09E2: D3 0A                        dw      (((('B'-'@')<<5)|('V'-'@'))<<5)|('S'-'@')
  1723                                        MNEM    'C','L','C'
+ 1723 00:09E4: 83 0D                        dw      (((('C'-'@')<<5)|('L'-'@'))<<5)|('C'-'@')
  1724                                        MNEM    'C','L','D'
+ 1724 00:09E6: 84 0D                        dw      (((('C'-'@')<<5)|('L'-'@'))<<5)|('D'-'@')
  1725                                        MNEM    'C','L','I'
+ 1725 00:09E8: 89 0D                        dw      (((('C'-'@')<<5)|('L'-'@'))<<5)|('I'-'@')
  1726                                        MNEM    'C','L','V'
+ 1726 00:09EA: 96 0D                        dw      (((('C'-'@')<<5)|('L'-'@'))<<5)|('V'-'@')
  1727                                        MNEM    'C','M','P'
+ 1727 00:09EC: B0 0D                        dw      (((('C'-'@')<<5)|('M'-'@'))<<5)|('P'-'@')
  1728                                        MNEM    'C','O','P'
+ 1728 00:09EE: F0 0D                        dw      (((('C'-'@')<<5)|('O'-'@'))<<5)|('P'-'@')
  1729                                        MNEM    'C','P','X'
+ 1729 00:09F0: 18 0E                        dw      (((('C'-'@')<<5)|('P'-'@'))<<5)|('X'-'@')
  1730                                        MNEM    'C','P','Y'
+ 1730 00:09F2: 19 0E                        dw      (((('C'-'@')<<5)|('P'-'@'))<<5)|('Y'-'@')
  1731                                        MNEM    'D','E','C'
+ 1731 00:09F4: A3 10                        dw      (((('D'-'@')<<5)|('E'-'@'))<<5)|('C'-'@')
  1732                                        MNEM    'D','E','X'
+ 1732 00:09F6: B8 10                        dw      (((('D'-'@')<<5)|('E'-'@'))<<5)|('X'-'@')
  1733                                        MNEM    'D','E','Y'
+ 1733 00:09F8: B9 10                        dw      (((('D'-'@')<<5)|('E'-'@'))<<5)|('Y'-'@')
  1734                                        MNEM    'E','O','R'
+ 1734 00:09FA: F2 15                        dw      (((('E'-'@')<<5)|('O'-'@'))<<5)|('R'-'@')
  1735                                        MNEM    'I','N','C'
+ 1735 00:09FC: C3 25                        dw      (((('I'-'@')<<5)|('N'-'@'))<<5)|('C'-'@')
  1736                                        MNEM    'I','N','X'
+ 1736 00:09FE: D8 25                        dw      (((('I'-'@')<<5)|('N'-'@'))<<5)|('X'-'@')
  1737                                        MNEM    'I','N','Y'
+ 1737 00:0A00: D9 25                        dw      (((('I'-'@')<<5)|('N'-'@'))<<5)|('Y'-'@')
  Thu Jan 21 2016 21:36                                                                                                    Page 36


  1738                                        MNEM    'J','M','L'
+ 1738 00:0A02: AC 29                        dw      (((('J'-'@')<<5)|('M'-'@'))<<5)|('L'-'@')
  1739                                        MNEM    'J','M','P'
+ 1739 00:0A04: B0 29                        dw      (((('J'-'@')<<5)|('M'-'@'))<<5)|('P'-'@')
  1740                                        MNEM    'J','S','L'
+ 1740 00:0A06: 6C 2A                        dw      (((('J'-'@')<<5)|('S'-'@'))<<5)|('L'-'@')
  1741                                        MNEM    'J','S','R'
+ 1741 00:0A08: 72 2A                        dw      (((('J'-'@')<<5)|('S'-'@'))<<5)|('R'-'@')
  1742                                        MNEM    'L','D','A'
+ 1742 00:0A0A: 81 30                        dw      (((('L'-'@')<<5)|('D'-'@'))<<5)|('A'-'@')
  1743                                        MNEM    'L','D','X'
+ 1743 00:0A0C: 98 30                        dw      (((('L'-'@')<<5)|('D'-'@'))<<5)|('X'-'@')
  1744                                        MNEM    'L','D','Y'
+ 1744 00:0A0E: 99 30                        dw      (((('L'-'@')<<5)|('D'-'@'))<<5)|('Y'-'@')
  1745                                        MNEM    'L','S','R'
+ 1745 00:0A10: 72 32                        dw      (((('L'-'@')<<5)|('S'-'@'))<<5)|('R'-'@')
  1746                                        MNEM    'M','V','N'
+ 1746 00:0A12: CE 36                        dw      (((('M'-'@')<<5)|('V'-'@'))<<5)|('N'-'@')
  1747                                        MNEM    'M','V','P'
+ 1747 00:0A14: D0 36                        dw      (((('M'-'@')<<5)|('V'-'@'))<<5)|('P'-'@')
  1748                                        MNEM    'N','O','P'
+ 1748 00:0A16: F0 39                        dw      (((('N'-'@')<<5)|('O'-'@'))<<5)|('P'-'@')
  1749                                        MNEM    'O','R','A'
+ 1749 00:0A18: 41 3E                        dw      (((('O'-'@')<<5)|('R'-'@'))<<5)|('A'-'@')
  1750                                        MNEM    'P','E','A'
+ 1750 00:0A1A: A1 40                        dw      (((('P'-'@')<<5)|('E'-'@'))<<5)|('A'-'@')
  1751                                        MNEM    'P','E','I'
+ 1751 00:0A1C: A9 40                        dw      (((('P'-'@')<<5)|('E'-'@'))<<5)|('I'-'@')
  1752                                        MNEM    'P','E','R'
+ 1752 00:0A1E: B2 40                        dw      (((('P'-'@')<<5)|('E'-'@'))<<5)|('R'-'@')
  1753                                        MNEM    'P','H','A'
+ 1753 00:0A20: 01 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('A'-'@')
  1754                                        MNEM    'P','H','B'
+ 1754 00:0A22: 02 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('B'-'@')
  1755                                        MNEM    'P','H','D'
+ 1755 00:0A24: 04 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('D'-'@')
  1756                                        MNEM    'P','H','K'
+ 1756 00:0A26: 0B 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('K'-'@')
  1757                                        MNEM    'P','H','P'
+ 1757 00:0A28: 10 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('P'-'@')
  1758                                        MNEM    'P','H','X'
+ 1758 00:0A2A: 18 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('X'-'@')
  1759                                        MNEM    'P','H','Y'
+ 1759 00:0A2C: 19 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('Y'-'@')
  1760                                        MNEM    'P','L','A'
+ 1760 00:0A2E: 81 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('A'-'@')
  1761                                        MNEM    'P','L','B'
+ 1761 00:0A30: 82 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('B'-'@')
  1762                                        MNEM    'P','L','D'
+ 1762 00:0A32: 84 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('D'-'@')
  1763                                        MNEM    'P','L','P'
+ 1763 00:0A34: 90 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('P'-'@')
  1764                                        MNEM    'P','L','X'
+ 1764 00:0A36: 98 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('X'-'@')
  1765                                        MNEM    'P','L','Y'
+ 1765 00:0A38: 99 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('Y'-'@')
  1766                                        MNEM    'R','E','P'
+ 1766 00:0A3A: B0 48                        dw      (((('R'-'@')<<5)|('E'-'@'))<<5)|('P'-'@')
  Thu Jan 21 2016 21:36                                                                                                    Page 37


  1767                                        MNEM    'R','O','L'
+ 1767 00:0A3C: EC 49                        dw      (((('R'-'@')<<5)|('O'-'@'))<<5)|('L'-'@')
  1768                                        MNEM    'R','O','R'
+ 1768 00:0A3E: F2 49                        dw      (((('R'-'@')<<5)|('O'-'@'))<<5)|('R'-'@')
  1769                                        MNEM    'R','T','I'
+ 1769 00:0A40: 89 4A                        dw      (((('R'-'@')<<5)|('T'-'@'))<<5)|('I'-'@')
  1770                                        MNEM    'R','T','L'
+ 1770 00:0A42: 8C 4A                        dw      (((('R'-'@')<<5)|('T'-'@'))<<5)|('L'-'@')
  1771                                        MNEM    'R','T','S'
+ 1771 00:0A44: 93 4A                        dw      (((('R'-'@')<<5)|('T'-'@'))<<5)|('S'-'@')
  1772                                        MNEM    'S','B','C'
+ 1772 00:0A46: 43 4C                        dw      (((('S'-'@')<<5)|('B'-'@'))<<5)|('C'-'@')
  1773                                        MNEM    'S','E','C'
+ 1773 00:0A48: A3 4C                        dw      (((('S'-'@')<<5)|('E'-'@'))<<5)|('C'-'@')
  1774                                        MNEM    'S','E','D'
+ 1774 00:0A4A: A4 4C                        dw      (((('S'-'@')<<5)|('E'-'@'))<<5)|('D'-'@')
  1775                                        MNEM    'S','E','I'
+ 1775 00:0A4C: A9 4C                        dw      (((('S'-'@')<<5)|('E'-'@'))<<5)|('I'-'@')
  1776                                        MNEM    'S','E','P'
+ 1776 00:0A4E: B0 4C                        dw      (((('S'-'@')<<5)|('E'-'@'))<<5)|('P'-'@')
  1777                                        MNEM    'S','T','A'
+ 1777 00:0A50: 81 4E                        dw      (((('S'-'@')<<5)|('T'-'@'))<<5)|('A'-'@')
  1778                                        MNEM    'S','T','P'
+ 1778 00:0A52: 90 4E                        dw      (((('S'-'@')<<5)|('T'-'@'))<<5)|('P'-'@')
  1779                                        MNEM    'S','T','X'
+ 1779 00:0A54: 98 4E                        dw      (((('S'-'@')<<5)|('T'-'@'))<<5)|('X'-'@')
  1780                                        MNEM    'S','T','Y'
+ 1780 00:0A56: 99 4E                        dw      (((('S'-'@')<<5)|('T'-'@'))<<5)|('Y'-'@')
  1781                                        MNEM    'S','T','Z'
+ 1781 00:0A58: 9A 4E                        dw      (((('S'-'@')<<5)|('T'-'@'))<<5)|('Z'-'@')
  1782                                        MNEM    'T','A','X'
+ 1782 00:0A5A: 38 50                        dw      (((('T'-'@')<<5)|('A'-'@'))<<5)|('X'-'@')
  1783                                        MNEM    'T','A','Y'
+ 1783 00:0A5C: 39 50                        dw      (((('T'-'@')<<5)|('A'-'@'))<<5)|('Y'-'@')
  1784                                        MNEM    'T','C','D'
+ 1784 00:0A5E: 64 50                        dw      (((('T'-'@')<<5)|('C'-'@'))<<5)|('D'-'@')
  1785                                        MNEM    'T','C','S'
+ 1785 00:0A60: 73 50                        dw      (((('T'-'@')<<5)|('C'-'@'))<<5)|('S'-'@')
  1786                                        MNEM    'T','D','C'
+ 1786 00:0A62: 83 50                        dw      (((('T'-'@')<<5)|('D'-'@'))<<5)|('C'-'@')
  1787                                        MNEM    'T','R','B'
+ 1787 00:0A64: 42 52                        dw      (((('T'-'@')<<5)|('R'-'@'))<<5)|('B'-'@')
  1788                                        MNEM    'T','S','B'
+ 1788 00:0A66: 62 52                        dw      (((('T'-'@')<<5)|('S'-'@'))<<5)|('B'-'@')
  1789                                        MNEM    'T','S','C'
+ 1789 00:0A68: 63 52                        dw      (((('T'-'@')<<5)|('S'-'@'))<<5)|('C'-'@')
  1790                                        MNEM    'T','S','X'
+ 1790 00:0A6A: 78 52                        dw      (((('T'-'@')<<5)|('S'-'@'))<<5)|('X'-'@')
  1791                                        MNEM    'T','X','A'
+ 1791 00:0A6C: 01 53                        dw      (((('T'-'@')<<5)|('X'-'@'))<<5)|('A'-'@')
  1792                                        MNEM    'T','X','S'
+ 1792 00:0A6E: 13 53                        dw      (((('T'-'@')<<5)|('X'-'@'))<<5)|('S'-'@')
  1793                                        MNEM    'T','X','Y'
+ 1793 00:0A70: 19 53                        dw      (((('T'-'@')<<5)|('X'-'@'))<<5)|('Y'-'@')
  1794                                        MNEM    'T','Y','A'
+ 1794 00:0A72: 21 53                        dw      (((('T'-'@')<<5)|('Y'-'@'))<<5)|('A'-'@')
  1795                                        MNEM    'T','Y','X'
+ 1795 00:0A74: 38 53                        dw      (((('T'-'@')<<5)|('Y'-'@'))<<5)|('X'-'@')
  Thu Jan 21 2016 21:36                                                                                                    Page 38


  1796                                        MNEM    'W','A','I'
+ 1796 00:0A76: 29 5C                        dw      (((('W'-'@')<<5)|('A'-'@'))<<5)|('I'-'@')
  1797                                        MNEM    'W','D','M'
+ 1797 00:0A78: 8D 5C                        dw      (((('W'-'@')<<5)|('D'-'@'))<<5)|('M'-'@')
  1798                                        MNEM    'X','B','A'
+ 1798 00:0A7A: 41 60                        dw      (((('X'-'@')<<5)|('B'-'@'))<<5)|('A'-'@')
  1799                                        MNEM    'X','C','E'
+ 1799 00:0A7C: 65 60                        dw      (((('X'-'@')<<5)|('C'-'@'))<<5)|('E'-'@')
  1800                        
  1801                        ;===============================================================================
  1802                        ; String Literals
  1803                        ;-------------------------------------------------------------------------------
  1804                        
  1805 00:0A7E: 0D 0A        TITLE           db      CR,LF
  1806                                        ifdef   W65C816SXB
  1807                                        db      "W65C816SXB"
  1808                                        endif
  1809                                        ifdef   W65C265SXB
  1810 00:0A80: 57 36 35 43                  db      "W65C265SXB"
       00:0A84: 32 36 35 53 
       00:0A88: 58 42 
  1811                                        endif
  1812 00:0A8A: 2D 48 61 63                  db      "-Hacker [15.12]",0
       00:0A8E: 6B 65 72 20 
       00:0A92: 5B 31 35 2E 
       00:0A96: 31 32 5D 00 
  1813                        
  1814 00:0A9A: 0D 0A 45 72  ERROR           db      CR,LF,"Error - Type ? for help",0
       00:0A9E: 72 6F 72 20 
       00:0AA2: 2D 20 54 79 
       00:0AA6: 70 65 20 3F 
       00:0AAA: 20 66 6F 72 
       00:0AAE: 20 68 65 6C 
       00:0AB2: 70 00 
  1815                        
  1816 00:0AB4: 0D 0A 45 72  ERASE_FAILED    db      CR,LF,"Erase failed",0
       00:0AB8: 61 73 65 20 
       00:0ABC: 66 61 69 6C 
       00:0AC0: 65 64 00 
  1817 00:0AC3: 0D 0A 57 72  WRITE_FAILED    db      CR,LF,"Write failed",0
       00:0AC7: 69 74 65 20 
       00:0ACB: 66 61 69 6C 
       00:0ACF: 65 64 00 
  1818 00:0AD2: 0D 0A 57 44  NOT_SAFE        db      CR,LF,"WDC ROM Bank Selected",0
       00:0AD6: 43 20 52 4F 
       00:0ADA: 4D 20 42 61 
       00:0ADE: 6E 6B 20 53 
       00:0AE2: 65 6C 65 63 
       00:0AE6: 74 65 64 00 
  1819 00:0AEA: 0D 0A 49 6E  INVALID_S19     db      CR,LF,"Invalid S19 record",0
       00:0AEE: 76 61 6C 69 
       00:0AF2: 64 20 53 31 
       00:0AF6: 39 20 72 65 
       00:0AFA: 63 6F 72 64 
       00:0AFE: 00 
  1820                        
  1821 00:0AFF: 0D 0A 57 61  WAITING         db      CR,LF,"Waiting for XMODEM transfer to start",0
       00:0B03: 69 74 69 6E 
  Thu Jan 21 2016 21:36                                                                                                    Page 39


       00:0B07: 67 20 66 6F 
       00:0B0B: 72 20 58 4D 
       00:0B0F: 4F 44 45 4D 
       00:0B13: 20 74 72 61 
       00:0B17: 6E 73 66 65 
       00:0B1B: 72 20 74 6F 
       00:0B1F: 20 73 74 61 
       00:0B23: 72 74 00 
  1822 00:0B26: 0D 0A 54 69  TIMEOUT         db      CR,LF,"Timeout",0
       00:0B2A: 6D 65 6F 75 
       00:0B2E: 74 00 
  1823                        
  1824 00:0B30: 0D 0A 42 20  HELP            db      CR,LF,"B bb           - Set memory bank"
       00:0B34: 62 62 20 20 
       00:0B38: 20 20 20 20 
       00:0B3C: 20 20 20 20 
       00:0B40: 20 2D 20 53 
       00:0B44: 65 74 20 6D 
       00:0B48: 65 6D 6F 72 
       00:0B4C: 79 20 62 61 
       00:0B50: 6E 6B 
  1825 00:0B52: 0D 0A 44 20                  db      CR,LF,"D ssss eeee    - Disassemble memory in current bank"
       00:0B56: 73 73 73 73 
       00:0B5A: 20 65 65 65 
       00:0B5E: 65 20 20 20 
       00:0B62: 20 2D 20 44 
       00:0B66: 69 73 61 73 
       00:0B6A: 73 65 6D 62 
       00:0B6E: 6C 65 20 6D 
       00:0B72: 65 6D 6F 72 
       00:0B76: 79 20 69 6E 
       00:0B7A: 20 63 75 72 
       00:0B7E: 72 65 6E 74 
       00:0B82: 20 62 61 6E 
       00:0B86: 6B 
  1826 00:0B87: 0D 0A 45 20                  db      CR,LF,"E              - Erase ROM area"
       00:0B8B: 20 20 20 20 
       00:0B8F: 20 20 20 20 
       00:0B93: 20 20 20 20 
       00:0B97: 20 2D 20 45 
       00:0B9B: 72 61 73 65 
       00:0B9F: 20 52 4F 4D 
       00:0BA3: 20 61 72 65 
       00:0BA7: 61 
  1827                                        ifdef   W65C265SXB
  1828 00:0BA8: 0D 0A 46 20                  db      CR,LF,"F 0-1          - Enable/Disable WDC ROM"
       00:0BAC: 30 2D 31 20 
       00:0BB0: 20 20 20 20 
       00:0BB4: 20 20 20 20 
       00:0BB8: 20 2D 20 45 
       00:0BBC: 6E 61 62 6C 
       00:0BC0: 65 2F 44 69 
       00:0BC4: 73 61 62 6C 
       00:0BC8: 65 20 57 44 
       00:0BCC: 43 20 52 4F 
       00:0BD0: 4D 
  1829                                        endif
  1830 00:0BD1: 0D 0A 47 20                  db      CR,LF,"G [xxxx]       - Run from bb:xxxx or invoke reset vector"
  Thu Jan 21 2016 21:36                                                                                                    Page 40


       00:0BD5: 5B 78 78 78 
       00:0BD9: 78 5D 20 20 
       00:0BDD: 20 20 20 20 
       00:0BE1: 20 2D 20 52 
       00:0BE5: 75 6E 20 66 
       00:0BE9: 72 6F 6D 20 
       00:0BED: 62 62 3A 78 
       00:0BF1: 78 78 78 20 
       00:0BF5: 6F 72 20 69 
       00:0BF9: 6E 76 6F 6B 
       00:0BFD: 65 20 72 65 
       00:0C01: 73 65 74 20 
       00:0C05: 76 65 63 74 
       00:0C09: 6F 72 
  1831 00:0C0B: 0D 0A 4D 20                  db      CR,LF,"M ssss eeee    - Display memory in current bank"
       00:0C0F: 73 73 73 73 
       00:0C13: 20 65 65 65 
       00:0C17: 65 20 20 20 
       00:0C1B: 20 2D 20 44 
       00:0C1F: 69 73 70 6C 
       00:0C23: 61 79 20 6D 
       00:0C27: 65 6D 6F 72 
       00:0C2B: 79 20 69 6E 
       00:0C2F: 20 63 75 72 
       00:0C33: 72 65 6E 74 
       00:0C37: 20 62 61 6E 
       00:0C3B: 6B 
  1832 00:0C3C: 0D 0A 52 20                  db      CR,LF,"R 0-3          - Select ROM bank 0-3"
       00:0C40: 30 2D 33 20 
       00:0C44: 20 20 20 20 
       00:0C48: 20 20 20 20 
       00:0C4C: 20 2D 20 53 
       00:0C50: 65 6C 65 63 
       00:0C54: 74 20 52 4F 
       00:0C58: 4D 20 62 61 
       00:0C5C: 6E 6B 20 30 
       00:0C60: 2D 33 
  1833 00:0C62: 0D 0A 53 2E                  db      CR,LF,"S...           - Process S19 record"
       00:0C66: 2E 2E 20 20 
       00:0C6A: 20 20 20 20 
       00:0C6E: 20 20 20 20 
       00:0C72: 20 2D 20 50 
       00:0C76: 72 6F 63 65 
       00:0C7A: 73 73 20 53 
       00:0C7E: 31 39 20 72 
       00:0C82: 65 63 6F 72 
       00:0C86: 64 
  1834 00:0C87: 0D 0A 57 20                  db      CR,LF,"W xxxx yy      - Set memory at xxxx to yy"
       00:0C8B: 78 78 78 78 
       00:0C8F: 20 79 79 20 
       00:0C93: 20 20 20 20 
       00:0C97: 20 2D 20 53 
       00:0C9B: 65 74 20 6D 
       00:0C9F: 65 6D 6F 72 
       00:0CA3: 79 20 61 74 
       00:0CA7: 20 78 78 78 
       00:0CAB: 78 20 74 6F 
       00:0CAF: 20 79 79 
  Thu Jan 21 2016 21:36                                                                                                    Page 41


  1835 00:0CB2: 0D 0A 58 20                  db      CR,LF,"X xxxx         - XMODEM receive to bb:xxxx"
       00:0CB6: 78 78 78 78 
       00:0CBA: 20 20 20 20 
       00:0CBE: 20 20 20 20 
       00:0CC2: 20 2D 20 58 
       00:0CC6: 4D 4F 44 45 
       00:0CCA: 4D 20 72 65 
       00:0CCE: 63 65 69 76 
       00:0CD2: 65 20 74 6F 
       00:0CD6: 20 62 62 3A 
       00:0CDA: 78 78 78 78 
  1836 00:0CDE: 00                           db      0
  1837                        
  1838                                        end


      Lines assembled: 2187
      Errors: 0
