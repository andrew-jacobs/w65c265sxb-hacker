  Mon Jun 18 2018 10:11                                                                                                    Page 1


                                               ***************************************
                                               **      WDC 65C816 Macro Assembler   **
                                               **                                   **
                                               **     Version 3.49.1- Feb  6 2006    **
                                               ***************************************

     1                        ;===============================================================================
     2                        ;  ______  ______        _   _            _
     3                        ; / ___\ \/ / __ )      | | | | __ _  ___| | _____ _ __
     4                        ; \___ \\  /|  _ \ _____| |_| |/ _` |/ __| |/ / _ \ '__|
     5                        ;  ___) /  \| |_) |_____|  _  | (_| | (__|   <  __/ |
     6                        ; |____/_/\_\____/      |_| |_|\__,_|\___|_|\_\___|_|
     7                        ;
     8                        ; A program for Hacking your W65C265SXB or W65C816SXB
     9                        ;-------------------------------------------------------------------------------
    10                        ; Copyright (C)2015,2018 Andrew Jacobs
    11                        ; All rights reserved.
    12                        ;
    13                        ; This work is made available under the terms of the Creative Commons
    14                        ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
    15                        ; following URL to see the details.
    16                        ;
    17                        ; http://creativecommons.org/licenses/by-nc-sa/4.0/
    18                        ;
    19                        ;===============================================================================
    20                        ; Notes:
    21                        ;
    22                        ; This program provides a simple monitor that you can use to inspect the memory
    23                        ; in your SXB and reprogram parts of the flash ROM.
    24                        ;
    25                        ;-------------------------------------------------------------------------------
    26                        
    27                                        pw      132
    28                                        inclist on
    29                        
    30                                        chip    65816
    31                        
    32                                        ifdef   W65C265SXB
    33                                        include "w65c265.inc"
     1                        ;===============================================================================
     2                        ; __        ____  ____   ____ ____   __  ____
     3                        ; \ \      / / /_| ___| / ___|___ \ / /_| ___|
     4                        ;  \ \ /\ / / '_ \___ \| |     __) | '_ \___ \
     5                        ;   \ V  V /| (_) |__) | |___ / __/| (_) |__) |
     6                        ;    \_/\_/  \___/____/ \____|_____|\___/____/
     7                        ;
     8                        ; Western Design Center W65C265 device definitions
     9                        ;-------------------------------------------------------------------------------
    10                        ; Copyright (C)2015 HandCoded Software Ltd.
    11                        ; All rights reserved.
    12                        ;
    13                        ; This work is made available under the terms of the Creative Commons
    14                        ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
    15                        ; following URL to see the details.
    16                        ;
    17                        ; http://creativecommons.org/licenses/by-nc-sa/4.0/
    18                        ;
    19                        ;===============================================================================
  Mon Jun 18 2018 10:11                                                                                                    Page 2


    20                        ; Notes:
    21                        ;
    22                        ; Various macros and definitions for the W65C265 microcontroller.
    23                        ;
    24                        ;===============================================================================
    25                        ; Revision History:
    26                        ;
    27                        ; 2015-12-18 AJ Initial version
    28                        ;-------------------------------------------------------------------------------
    29                        ; $Id$
    30                        ;-------------------------------------------------------------------------------
    31                        
    32                        ;===============================================================================
    33                        ; Hardware Registers
    34                        ;-------------------------------------------------------------------------------
    35                        
    36                        ;00DF00-1F CS0 Port Replacement & Expansion uninitialized
    37                        
    38             0000DF00   PD0             equ     $00DF00         ; Port 0 Data Register
    39             0000DF01   PD1             equ     $00DF01         ; Port 1 Data Register
    40             0000DF02   PD2             equ     $00DF02         ; Port 2 Data Register
    41             0000DF03   PD3             equ     $00DF03         ; Port 3 Data Register
    42             0000DF04   PDD0            equ     $00DF04         ; Port 0 Data Direction Register
    43             0000DF05   PDD1            equ     $00DF05         ; Port 1 Data Direction Register
    44             0000DF06   PDD2            equ     $00DF06         ; Port 2 Data Direction Register
    45             0000DF07   PDD3            equ     $00DF07         ; Port 3 Data Direction Register
    46                        
    47             0000DF20   PD4             equ     $00DF20         ; Port 4 Data Register
    48             0000DF21   PD5             equ     $00DF21         ; Port 5 Data Register
    49             0000DF22   PD6             equ     $00DF22         ; Port 6 Data Register
    50             0000DF23   PD7             equ     $00DF23         ; Port 7 Data Register
    51             0000DF24   PDD4            equ     $00DF24         ; Port 4 Data Direction Register
    52             0000DF25   PDD5            equ     $00DF25         ; Port 5 Data Direction Register
    53             0000DF26   PDD6            equ     $00DF26         ; Port 6 Data Direction Register
    54             0000DF27   PCS7            equ     $00DF27         ; Port 7 Chip Select
    55                        
    56                        ;00DF28-3F --- Reserved uninitialized
    57                        
    58             0000DF40   BCR             equ     $00DF40         ; Bus Control Register
    59             0000DF41   SSCR            equ     $00DF41         ; System Speed Control Register
    60             0000DF42   TCR             equ     $00DF42         ; Timer Control Register
    61             0000DF43   TER             equ     $00DF43         ; Timer Enable Register
    62             0000DF44   TIFR            equ     $00DF44         ; Timer Interrupt Flag Register
    63             0000DF45   EIFR            equ     $00DF45         ; Edge Interrupt Flag Register
    64             0000DF46   TIER            equ     $00DF46         ; Timer Interrupt Enable Register
    65             0000DF47   EIER            equ     $00DF47         ; Edge Interrupt Enable Register
    66             0000DF48   UIFR            equ     $00DF48         ; UART Interrupt Flag Register
    67             0000DF49   UIER            equ     $00DF49         ; UART Interrupt Enable Register
    68                        
    69             0000DF50   T0LL            equ     $00DF50         ; Timer 0 Latch Low
    70             0000DF51   T0LH            equ     $00DF51         ; Timer 0 Latch High
    71             0000DF52   T1LL            equ     $00DF52         ; Timer 1 Latch Low
    72             0000DF53   T1LH            equ     $00DF53         ; Timer 1 Latch High
    73             0000DF54   T2LL            equ     $00DF54         ; Timer 2 Latch Low
    74             0000DF55   T2LH            equ     $00DF55         ; Timer 2 Latch High
    75             0000DF56   T3LL            equ     $00DF56         ; Timer 3 Latch Low
    76             0000DF57   T3LH            equ     $00DF57         ; Timer 3 Latch High
    77             0000DF58   T4LL            equ     $00DF58         ; Timer 4 Latch Low
  Mon Jun 18 2018 10:11                                                                                                    Page 3


    78             0000DF59   T4LH            equ     $00DF59         ; Timer 4 Latch High
    79             0000DF5A   T5LL            equ     $00DF5A         ; Timer 5 Latch Low
    80             0000DF5B   T5LH            equ     $00DF5B         ; Timer 5 Latch High
    81             0000DF5C   T6LL            equ     $00DF5C         ; Timer 6 Latch Low
    82             0000DF5D   T6LH            equ     $00DF5D         ; Timer 6 Latch High
    83             0000DF5E   T7LL            equ     $00DF5E         ; Timer 7 Latch Low
    84             0000DF5F   T7LH            equ     $00DF5F         ; Timer 7 Latch High
    85             0000DF60   T0CL            equ     $00DF60         ; Timer 0 Counter Low
    86             0000DF61   T0CH            equ     $00DF61         ; Timer 0 Counter High
    87             0000DF62   T1CL            equ     $00DF62         ; Timer 1 Counter Low
    88             0000DF63   T1CH            equ     $00DF63         ; Timer 1 Counter High
    89             0000DF64   T2CL            equ     $00DF64         ; Timer 2 Counter Low
    90             0000DF65   T2CH            equ     $00DF65         ; Timer 2 Counter High
    91             0000DF66   T3CL            equ     $00DF66         ; Timer 3 Counter Low
    92             0000DF67   T3CH            equ     $00DF67         ; Timer 3 Counter High
    93             0000DF68   T4CL            equ     $00DF68         ; Timer 4 Counter Low
    94             0000DF69   T4CH            equ     $00DF69         ; Timer 4 Counter High
    95             0000DF6A   T5CL            equ     $00DF6A         ; Timer 5 Counter Low
    96             0000DF6B   T5CH            equ     $00DF6B         ; Timer 5 Counter High
    97             0000DF6C   T6CL            equ     $00DF6C         ; Timer 6 Counter Low
    98             0000DF6D   T6CH            equ     $00DF6D         ; Timer 6 Counter High
    99             0000DF6E   T7CL            equ     $00DF6E         ; Timer 7 Counter Low
   100             0000DF6F   T7CH            equ     $00DF6F         ; Timer 7 Counter High
   101                        
   102                        ;00DFC0-FF CS1 COProcessor Expansion uninitialized
   103                        
   104             0000DF70   ACSR0           equ     $00DF70         ; UART 0 Control/Status Register
   105             0000DF71   ARTD0           equ     $00DF71         ; UART 0 Data Register
   106             0000DF72   ACSR1           equ     $00DF72         ; UART 1 Control/Status Register
   107             0000DF73   ARTD1           equ     $00DF73         ; UART 1 Data Register
   108             0000DF74   ACSR2           equ     $00DF74         ; UART 2 Control/Status Register
   109             0000DF75   ARTD2           equ     $00DF75         ; UART 2 Data Register
   110             0000DF76   ACSR3           equ     $00DF76         ; UART 3 Control/Status Register
   111             0000DF77   ARTD3           equ     $00DF77         ; UART 3 Data Register
   112             0000DF78   PIBFR           equ     $00DF78         ; Parallel Interface Flag Register
   113             0000DF79   PIBER           equ     $00DF79         ; Parallel Interface Enable Register
   114             0000DF7A   PIR2            equ     $00DF7A         ; Parallel Interface Register 2
   115             0000DF7B   PIR3            equ     $00DF7B         ; Parallel Interface Register 3
   116             0000DF7C   PIR4            equ     $00DF7C         ; Parallel Interface Register 4
   117             0000DF7D   PIR5            equ     $00DF7D         ; Parallel Interface Register 5
   118             0000DF7E   PIR6            equ     $00DF7E         ; Parallel Interface Register 6
   119             0000DF7F   PIR7            equ     $00DF7F         ; Parallel Interface Register 7
   120                        
   121                        ;00DF80-BF RAM RAM Registers uninitialized
   122                        
   123                                        include "w65c816.inc"
     1                        ;==============================================================================
     2                        ; __        ____  ____   ____ ___  _  __   
     3                        ; \ \      / / /_| ___| / ___( _ )/ |/ /_  
     4                        ;  \ \ /\ / / '_ \___ \| |   / _ \| | '_ \ 
     5                        ;   \ V  V /| (_) |__) | |__| (_) | | (_) |
     6                        ;    \_/\_/  \___/____/ \____\___/|_|\___/ 
     7                        ;
     8                        ; Western Design Center W65C816 device definitions                                          
     9                        ;------------------------------------------------------------------------------
    10                        ; Copyright (C)2015 HandCoded Software Ltd.
    11                        ; All rights reserved.
    12                        ;
  Mon Jun 18 2018 10:11                                                                                                    Page 4


    13                        ; This work is made available under the terms of the Creative Commons
    14                        ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
    15                        ; following URL to see the details.
    16                        ;
    17                        ; http://creativecommons.org/licenses/by-nc-sa/4.0/
    18                        ;
    19                        ;===============================================================================
    20                        ; Notes:
    21                        ;
    22                        ; Various macros and definitions for the W65C816 microprocessor.
    23                        ;
    24                        ;===============================================================================
    25                        ; Revision History:
    26                        ;
    27                        ; 2015-12-18 AJ Initial version
    28                        ;-------------------------------------------------------------------------------
    29                        ; $Id$
    30                        ;-------------------------------------------------------------------------------
    31                        
    32                        ;==============================================================================
    33                        ; Status Register Bits
    34                        ;------------------------------------------------------------------------------
    35                        
    36             00000080   N_FLAG          equ     1<<7
    37             00000040   V_FLAG          equ     1<<6
    38             00000020   M_FLAG          equ     1<<5
    39             00000010   X_FLAG          equ     1<<4
    40             00000010   B_FLAG          equ     1<<4
    41             00000008   D_FLAG          equ     1<<3
    42             00000004   I_FLAG          equ     1<<2
    43             00000002   Z_FLAG          equ     1<<1
    44             00000001   C_FLAG          equ     1<<0
    45                        
    46                        ;==============================================================================
    47                        ; Macros
    48                        ;------------------------------------------------------------------------------
    49                        
    50                        ; Puts the processor in emulation mode. A, X and Y become 8-bits and the stack
    51                        ; is fixed at $0100-$01ff. 
    52                        
    53                        emulate         macro
    54                                        sec
    55                                        xce
    56                                        endm
    57                        
    58                        ; Puts the processor in native mode. The size of the memory and index register
    59                        ; operations is not controlled by the M & X bits in the status register.
    60                        
    61                        native          macro
    62                                        clc
    63                                        xce
    64                                        endm
    65                        
    66                        ; Resets the M bit making the accumulator and memory accesses 16-bits wide.
    67                         
    68                        long_a          macro
    69                                        rep     #M_FLAG
    70                                        longa   on
  Mon Jun 18 2018 10:11                                                                                                    Page 5


    71                                        endm
    72                        
    73                        ; Resets the X bit making the index registers 16-bits wide
    74                        
    75                        long_i          macro
    76                                        rep     #X_FLAG
    77                                        longi   on
    78                                        endm
    79                        
    80                        ; Resets the M and X bits making the accumulator, memory accesses and index
    81                        ; registers 16-bits wide.
    82                                        
    83                        long_ai         macro
    84                                        rep     #M_FLAG|X_FLAG
    85                                        longa   on
    86                                        longi   on
    87                                        endm
    88                        
    89                        ; Sets the M bit making the accumulator and memory accesses 8-bits wide.
    90                        
    91                        short_a         macro
    92                                        sep     #M_FLAG
    93                                        longa   off
    94                                        endm
    95                        
    96                        ; Sets the X bit making the index registers 8-bits wide.
    97                        
    98                        short_i         macro
    99                                        sep     #X_FLAG
   100                                        longi   off
   101                                        endm
   102                                        
   103                        ; Sets the M & X bits making the accumulator, memory accesses and index
   104                        ; registers 8-bits wide.
   105                        
   106                        short_ai        macro
   107                                        sep     #M_FLAG|X_FLAG
   108                                        longa   off
   109                                        longi   off
   110                                        endm
    34                                        else
    35                                        include "w65c816.inc"
    36                                        endif
    37                        
    38                        ;===============================================================================
    39                        ;-------------------------------------------------------------------------------
    40                        
    41                        MNEM            macro   P,Q,R
    42                                        dw      ((((P-'@')<<5)|(Q-'@'))<<5)|(R-'@')
    43                                        endm
    44                        
    45                        ;===============================================================================
    46                        ; ASCII Character Codes
    47                        ;-------------------------------------------------------------------------------
    48                        
    49             00000001   SOH             equ     $01
    50             00000004   EOT             equ     $04
    51             00000006   ACK             equ     $06
  Mon Jun 18 2018 10:11                                                                                                    Page 6


    52             00000007   BEL             equ     $07
    53             00000008   BS              equ     $08
    54             0000000A   LF              equ     $0a
    55             0000000D   CR              equ     $0d
    56             00000015   NAK             equ     $15
    57             00000018   CAN             equ     $18
    58             0000001B   ESC             equ     $1b
    59             0000007F   DEL             equ     $7f
    60                        
    61                        ;===============================================================================
    62                        ;-------------------------------------------------------------------------------
    63                        
    64             00000000   OP_ADC          equ     0<<1
    65             00000002   OP_AND          equ     1<<1
    66             00000004   OP_ASL          equ     2<<1
    67             00000006   OP_BCC          equ     3<<1
    68             00000008   OP_BCS          equ     4<<1
    69             0000000A   OP_BEQ          equ     5<<1
    70             0000000C   OP_BIT          equ     6<<1
    71             0000000E   OP_BMI          equ     7<<1
    72             00000010   OP_BNE          equ     8<<1
    73             00000012   OP_BPL          equ     9<<1
    74             00000014   OP_BRA          equ     10<<1
    75             00000016   OP_BRK          equ     11<<1
    76             00000018   OP_BRL          equ     12<<1
    77             0000001A   OP_BVC          equ     13<<1
    78             0000001C   OP_BVS          equ     14<<1
    79             0000001E   OP_CLC          equ     15<<1
    80             00000020   OP_CLD          equ     16<<1
    81             00000022   OP_CLI          equ     17<<1
    82             00000024   OP_CLV          equ     18<<1
    83             00000026   OP_CMP          equ     19<<1
    84             00000028   OP_COP          equ     20<<1
    85             0000002A   OP_CPX          equ     21<<1
    86             0000002C   OP_CPY          equ     22<<1
    87             0000002E   OP_DEC          equ     23<<1
    88             00000030   OP_DEX          equ     24<<1
    89             00000032   OP_DEY          equ     25<<1
    90             00000034   OP_EOR          equ     26<<1
    91             00000036   OP_INC          equ     27<<1
    92             00000038   OP_INX          equ     28<<1
    93             0000003A   OP_INY          equ     29<<1
    94             0000003C   OP_JML          equ     30<<1
    95             0000003E   OP_JMP          equ     31<<1
    96             00000040   OP_JSL          equ     32<<1
    97             00000042   OP_JSR          equ     33<<1
    98             00000044   OP_LDA          equ     34<<1
    99             00000046   OP_LDX          equ     35<<1
   100             00000048   OP_LDY          equ     36<<1
   101             0000004A   OP_LSR          equ     37<<1
   102             0000004C   OP_MVN          equ     38<<1
   103             0000004E   OP_MVP          equ     39<<1
   104             00000050   OP_NOP          equ     40<<1
   105             00000052   OP_ORA          equ     41<<1
   106             00000054   OP_PEA          equ     42<<1
   107             00000056   OP_PEI          equ     43<<1
   108             00000058   OP_PER          equ     44<<1
   109             0000005A   OP_PHA          equ     45<<1
  Mon Jun 18 2018 10:11                                                                                                    Page 7


   110             0000005C   OP_PHB          equ     46<<1
   111             0000005E   OP_PHD          equ     47<<1
   112             00000060   OP_PHK          equ     48<<1
   113             00000062   OP_PHP          equ     49<<1
   114             00000064   OP_PHX          equ     50<<1
   115             00000066   OP_PHY          equ     51<<1
   116             00000068   OP_PLA          equ     52<<1
   117             0000006A   OP_PLB          equ     53<<1
   118             0000006C   OP_PLD          equ     54<<1
   119             0000006E   OP_PLP          equ     55<<1
   120             00000070   OP_PLX          equ     56<<1
   121             00000072   OP_PLY          equ     57<<1
   122             00000074   OP_REP          equ     58<<1
   123             00000076   OP_ROL          equ     59<<1
   124             00000078   OP_ROR          equ     60<<1
   125             0000007A   OP_RTI          equ     61<<1
   126             0000007C   OP_RTL          equ     62<<1
   127             0000007E   OP_RTS          equ     63<<1
   128             00000080   OP_SBC          equ     64<<1
   129             00000082   OP_SEC          equ     65<<1
   130             00000084   OP_SED          equ     66<<1
   131             00000086   OP_SEI          equ     67<<1
   132             00000088   OP_SEP          equ     68<<1
   133             0000008A   OP_STA          equ     69<<1
   134             0000008C   OP_STP          equ     70<<1
   135             0000008E   OP_STX          equ     71<<1
   136             00000090   OP_STY          equ     72<<1
   137             00000092   OP_STZ          equ     73<<1
   138             00000094   OP_TAX          equ     74<<1
   139             00000096   OP_TAY          equ     75<<1
   140             00000098   OP_TCD          equ     76<<1
   141             0000009A   OP_TCS          equ     77<<1
   142             0000009C   OP_TDC          equ     78<<1
   143             0000009E   OP_TRB          equ     79<<1
   144             000000A0   OP_TSB          equ     80<<1
   145             000000A2   OP_TSC          equ     81<<1
   146             000000A4   OP_TSX          equ     82<<1
   147             000000A6   OP_TXA          equ     83<<1
   148             000000A8   OP_TXS          equ     84<<1
   149             000000AA   OP_TXY          equ     85<<1
   150             000000AC   OP_TYA          equ     86<<1
   151             000000AE   OP_TYX          equ     87<<1
   152             000000B0   OP_WAI          equ     88<<1
   153             000000B2   OP_WDM          equ     89<<1
   154             000000B4   OP_XBA          equ     90<<1
   155             000000B6   OP_XCE          equ     91<<1
   156                        
   157             00000000   MD_ABS          equ     0<<1                    ; a
   158             00000002   MD_ACC          equ     1<<1                    ; A
   159             00000004   MD_ABX          equ     2<<1                    ; a,x
   160             00000006   MD_ABY          equ     3<<1                    ; a,y
   161             00000008   MD_ALG          equ     4<<1                    ; al
   162             0000000A   MD_ALX          equ     5<<1                    ; al,x
   163             0000000C   MD_AIN          equ     6<<1                    ; (a)
   164             0000000E   MD_AIX          equ     7<<1                    ; (a,x)
   165             00000010   MD_DPG          equ     8<<1                    ; d
   166             00000012   MD_STK          equ     9<<1                    ; d,s
   167             00000014   MD_DPX          equ     10<<1                   ; d,x
  Mon Jun 18 2018 10:11                                                                                                    Page 8


   168             00000016   MD_DPY          equ     11<<1                   ; d,x
   169             00000018   MD_DIN          equ     12<<1                   ; (d)
   170             0000001A   MD_DLI          equ     13<<1                   ; [d]
   171             0000001C   MD_SKY          equ     14<<1                   ; (d,s),y
   172             0000001E   MD_DIX          equ     15<<1                   ; (d,x)
   173             00000020   MD_DIY          equ     16<<1                   ; (d),y
   174             00000022   MD_DLY          equ     17<<1                   ; [d],y
   175             00000024   MD_IMP          equ     18<<1                   ;
   176             00000026   MD_REL          equ     19<<1                   ; r
   177             00000028   MD_RLG          equ     20<<1                   ; rl
   178             0000002A   MD_MOV          equ     21<<1                   ; xyc
   179             0000002C   MD_IMM          equ     22<<1                   ; # (A or M)
   180             0000002E   MD_INT          equ     23<<1                   ; # (BRK/COP/WDM)
   181             00000030   MD_IMX          equ     24<<1                   ; # (X or Y)
   182                        
   183                        ;===============================================================================
   184                        ; Data Areas
   185                        ;-------------------------------------------------------------------------------
   186                        
   187                                        page0
   188                                        org     $20
   189                        
   190 00:0020:              FLAGS           ds      1                       ; Emulated processor flags
   191 00:0021:              BUFLEN          ds      1                       ; Command buffer length
   192 00:0022:              BANK            ds      1                       ; Memory bank
   193                        
   194 00:0023:              ADDR_S          ds      3                       ; Start address
   195 00:0026:              ADDR_E          ds      3                       ; End address
   196                        
   197 00:0029:              BLOCK           ds      1                       ; XMODEM block number
   198 00:002A:              RETRIES         ds      1                       ; Retry count
   199 00:002B:              SUM             ds      1                       ; Checksum
   200                        
   201 00:002C:              TEMP            ds      4                       ; Scratch workspace
   202                        
   203                                        data
   204                                        org     $200
   205                        
   206 00:0200:              BUFFER          ds      128                     ; Command buffer
   207                        
   208                        ;===============================================================================
   209                        ; Initialisation
   210                        ;-------------------------------------------------------------------------------
   211                        
   212                                        code
   213                                        public  Start
   214                                        extern  UartRx
   215                                        extern  UartTx
   216                                        extern  UartRxTest
   217                                        extern  RomSelect
   218                                        extern  RomCheck
   219                        Start:
   220                                        short_a                         ; Configure register sizes
+  220 00:0000: E2 20                        sep     #M_FLAG
+  220                                        longa   off
   221                                        long_i
+  221 00:0002: C2 10                        rep     #X_FLAG
+  221                                        longi   on
  Mon Jun 18 2018 10:11                                                                                                    Page 9


   222 00:0004: 20 xx xx                     jsr     TxCRLF
   223 00:0007: A2 xx xx                     ldx     #TITLE                  ; Display application title
   224 00:000A: 20 xx xx                     jsr     TxStr
   225                        
   226 00:000D: 64 22                        stz     BANK                    ; Reset default bank
   227                        
   228                        ;===============================================================================
   229                        ; Command Processor
   230                        ;-------------------------------------------------------------------------------
   231                        
   232                        NewCommand:
   233 00:000F: 64 21                        stz     BUFLEN                  ; Clear the buffer
   234                        ShowCommand:
   235                                        short_i
+  235 00:0011: E2 10                        sep     #X_FLAG
+  235                                        longi   off
   236 00:0013: 20 xx xx                     jsr     TxCRLF                  ; Move to a new line
   237                        
   238 00:0016: A9 2E                        lda     #'.'                    ; Output the prompt
   239 00:0018: 20 xx xx                     jsr     UartTx
   240                        
   241 00:001B: A2 00                        ldx     #0
   242 00:001D: E4 21        DisplayCmd:     cpx     BUFLEN                  ; Any saved characters
   243 00:001F: F0 0E                        beq     ReadCommand
   244 00:0021: BD 00 02                     lda     BUFFER,x                ; Yes, display them
   245 00:0024: 20 xx xx                     jsr     UartTx
   246 00:0027: E8                           inx
   247 00:0028: 80 F3                        bra     DisplayCmd
   248                        
   249                        RingBell:
   250 00:002A: A9 07                        lda     #BEL                    ; Make a beep
   251 00:002C: 20 xx xx                     jsr     UartTx
   252                        
   253                        ReadCommand:
   254 00:002F: 20 xx xx                     jsr     UartRx                  ; Wait for character
   255                        
   256 00:0032: C9 1B                        cmp     #ESC                    ; Cancel input?
   257 00:0034: F0 D9                        beq     NewCommand              ; Yes, clear and restart
   258 00:0036: C9 0D                        cmp     #CR                     ; End of command?
   259 00:0038: F0 2D                        beq     ProcessCommand          ; Yes, start processing
   260                        
   261 00:003A: C9 08                        cmp     #BS                     ; Back space?
   262 00:003C: F0 15                        beq     BackSpace
   263 00:003E: C9 7F                        cmp     #DEL                    ; Delete?
   264 00:0040: F0 11                        beq     BackSpace
   265                        
   266 00:0042: C9 20                        cmp     #' '                    ; Printable character
   267 00:0044: 90 E4                        bcc     RingBell                ; No.
   268 00:0046: C9 7F                        cmp     #DEL
   269 00:0048: B0 E0                        bcs     RingBell                ; No.
   270 00:004A: 9D 00 02                     sta     BUFFER,x                ; Save the character
   271 00:004D: E8                           inx
   272 00:004E: 20 xx xx                     jsr     UartTx                  ; Echo it and repeat
   273 00:0051: 80 DC                        bra     ReadCommand
   274                        
   275                        BackSpace:
   276 00:0053: E0 00                        cpx     #0                      ; Buffer empty?
   277 00:0055: F0 D3                        beq     RingBell                ; Yes, beep and continue
  Mon Jun 18 2018 10:11                                                                                                    Page 10


   278 00:0057: CA                           dex                             ; No, remove last character
   279 00:0058: A9 08                        lda     #BS
   280 00:005A: 20 xx xx                     jsr     UartTx
   281 00:005D: 20 xx xx                     jsr     TxSpace
   282 00:0060: A9 08                        lda     #BS
   283 00:0062: 20 xx xx                     jsr     UartTx
   284 00:0065: 80 C8                        bra     ReadCommand             ; And retry
   285                        
   286                        ProcessCommand:
   287 00:0067: 86 21                        stx     BUFLEN                  ; Save final length
   288 00:0069: A0 00                        ldy     #0                      ; Load index for start
   289                        
   290 00:006B: 20 xx xx                     jsr     SkipSpaces              ; Fetch command character
   291 00:006E: B0 9F                        bcs     NewCommand              ; None, empty command
   292                        
   293                        ;===============================================================================
   294                        ; B - Select Memory Bank
   295                        ;-------------------------------------------------------------------------------
   296                        
   297 00:0070: C9 42                        cmp     #'B'                    ; Select memory bank?
   298 00:0072: D0 0D                        bne     NotMemoryBank
   299                        
   300 00:0074: A2 22                        ldx     #BANK                   ; Parse bank
   301 00:0076: 20 xx xx                     jsr     GetByte
   302 00:0079: 90 03                        bcc     $+5
   303 00:007B: 4C xx xx                     jmp     ShowError
   304 00:007E: 4C xx xx                     jmp     NewCommand
   305                        NotMemoryBank:
   306                        
   307                        ;===============================================================================
   308                        ; D - Disassemble Memory
   309                        ;-------------------------------------------------------------------------------
   310                        
   311 00:0081: C9 44                        cmp     #'D'                    ; Memory display?
   312 00:0083: D0 78                        bne     NotDisassemble
   313                        
   314 00:0085: A2 23                        ldx     #ADDR_S                 ; Parse start address
   315 00:0087: 20 xx xx                     jsr     GetAddr
   316 00:008A: 90 03                        bcc     $+5
   317 00:008C: 4C xx xx                     jmp     ShowError
   318 00:008F: A2 26                        ldx     #ADDR_E                 ; Parse end address
   319 00:0091: 20 xx xx                     jsr     GetAddr
   320 00:0094: 90 03                        bcc     $+5
   321 00:0096: 4C xx xx                     jmp     ShowError
   322                        
   323 00:0099: 08                           php
   324 00:009A: 68                           pla
   325 00:009B: 85 20                        sta     FLAGS
   326                        
   327                        Disassemble:
   328 00:009D: 20 xx xx                     jsr     TxCRLF
   329 00:00A0: A5 25                        lda     ADDR_S+2                ; Show memory address
   330 00:00A2: 20 xx xx                     jsr     TxHex2
   331 00:00A5: A9 3A                        lda     #':'
   332 00:00A7: 20 xx xx                     jsr     UartTx
   333 00:00AA: A5 24                        lda     ADDR_S+1
   334 00:00AC: 20 xx xx                     jsr     TxHex2
   335 00:00AF: A5 23                        lda     ADDR_S+0
  Mon Jun 18 2018 10:11                                                                                                    Page 11


   336 00:00B1: 20 xx xx                     jsr     TxHex2
   337 00:00B4: 20 xx xx                     jsr     TxSpace
   338                        
   339 00:00B7: 20 xx xx                     jsr     TxCodeBytes             ; Show code bytes
   340 00:00BA: 20 xx xx                     jsr     TxSymbolic              ; And instruction
   341                        
   342 00:00BD: A7 23                        lda     [ADDR_S]                ; Fetch opcode again
   343 00:00BF: 48                           pha
   344 00:00C0: A0 01                        ldy     #1
   345                        
   346 00:00C2: C9 18                        cmp     #$18                    ; CLC?
   347 00:00C4: D0 04                        bne     NotCLC
   348 00:00C6: A9 01                        lda     #C_FLAG
   349 00:00C8: 80 0E                        bra     DoREP
   350                        NotCLC:
   351 00:00CA: C9 38                        cmp     #$38                    ; SEC?
   352 00:00CC: D0 04                        bne     NotSEC
   353 00:00CE: A9 01                        lda     #C_FLAG
   354 00:00D0: 80 10                        bra     DoSEP
   355                        NotSEC:
   356 00:00D2: C9 C2                        cmp     #$c2                    ; REP?
   357 00:00D4: D0 06                        bne     NotREP
   358 00:00D6: B7 23                        lda     [ADDR_S],Y
   359 00:00D8: 14 20        DoREP:          trb     FLAGS
   360 00:00DA: 80 08                        bra     NextOpcode
   361                        NotREP:
   362 00:00DC: C9 E2                        cmp     #$e2                    ; SEP?
   363 00:00DE: D0 04                        bne     NextOpcode
   364 00:00E0: B7 23                        lda     [ADDR_S],Y
   365 00:00E2: 04 20        DoSEP:          tsb     FLAGS
   366                        
   367                        NextOpcode:
   368 00:00E4: 68                           pla
   369 00:00E5: 20 xx xx                     jsr     OpcodeSize
   370                        
   371 00:00E8: 18                           clc
   372 00:00E9: 65 23                        adc     ADDR_S+0                ; And move start address on
   373 00:00EB: 85 23                        sta     ADDR_S+0
   374 00:00ED: 90 02                        bcc     $+4
   375 00:00EF: E6 24                        inc     ADDR_S+1
   376                        
   377 00:00F1: 38                           sec                             ; Exceeded the end address?
   378 00:00F2: E5 26                        sbc     ADDR_E+0
   379 00:00F4: A5 24                        lda     ADDR_S+1
   380 00:00F6: E5 27                        sbc     ADDR_E+1
   381 00:00F8: 30 A3                        bmi     Disassemble             ; No, show more
   382                        
   383 00:00FA: 4C xx xx                     jmp     NewCommand              ; Done
   384                        NotDisassemble:
   385                        
   386                        ;===============================================================================
   387                        ; E - Erase ROM bank
   388                        ;-------------------------------------------------------------------------------
   389                        
   390 00:00FD: C9 45                        cmp     #'E'                    ; Erase bank?
   391 00:00FF: D0 52                        bne     NotEraseBank
   392                        
   393 00:0101: 20 xx xx                     jsr     CheckSafe
  Mon Jun 18 2018 10:11                                                                                                    Page 12


   394                        
   395                                        ifdef   W65C265SXB
   396 00:0104: AD 40 DF                     lda     BCR                     ; Save mask rom state
   397 00:0107: 48                           pha
   398 00:0108: A9 80                        lda     #$80                    ; Then ensure disabled
   399 00:010A: 0C 40 DF                     tsb     BCR
   400                                        endif
   401                        
   402 00:010D: A9 00                        lda     #$00                    ; Set start address
   403 00:010F: 85 23                        sta     ADDR_S+0
   404 00:0111: A9 80                        lda     #$80
   405 00:0113: 85 24                        sta     ADDR_S+1
   406                        EraseLoop:
   407 00:0115: A9 AA                        lda     #$aa                    ; Unlock flash
   408 00:0117: 8D 55 D5                     sta     $8000+$5555
   409 00:011A: A9 55                        lda     #$55
   410 00:011C: 8D AA AA                     sta     $8000+$2aaa
   411 00:011F: A9 80                        lda     #$80                    ; Signal erase
   412 00:0121: 8D 55 D5                     sta     $8000+$5555
   413 00:0124: A9 AA                        lda     #$aa
   414 00:0126: 8D 55 D5                     sta     $8000+$5555
   415 00:0129: A9 55                        lda     #$55
   416 00:012B: 8D AA AA                     sta     $8000+$2aaa
   417 00:012E: A9 30                        lda     #$30                    ; Sector erase
   418 00:0130: 92 23                        sta     (ADDR_S)
   419                        
   420                        EraseWait:
   421 00:0132: B2 23                        lda     (ADDR_S)                ; Wait for erase to finish
   422 00:0134: C9 FF                        cmp     #$FF
   423 00:0136: D0 FA                        bne     EraseWait
   424                        
   425 00:0138: 18                           clc                             ; Move to next sector
   426 00:0139: A5 24                        lda     ADDR_S+1
   427 00:013B: 69 10                        adc     #$10
   428 00:013D: 85 24                        sta     ADDR_S+1
   429 00:013F: 90 D4                        bcc     EraseLoop               ; Repeat until end of memory
   430                        
   431                                        ifdef   W65C265SXB
   432 00:0141: 68                           pla                             ; Restore mask ROM state
   433 00:0142: 8D 40 DF                     sta     BCR
   434                                        endif
   435                        
   436 00:0145: 4C xx xx                     jmp     NewCommand              ; And start over
   437                        
   438                        EraseFailed:
   439                                        long_i                          ; Warn that erase failed
+  439 00:0148: C2 10                        rep     #X_FLAG
+  439                                        longi   on
   440 00:014A: A2 xx xx                     ldx     #ERASE_FAILED
   441 00:014D: 20 xx xx                     jsr     TxStr
   442                                        longi   off
   443 00:0150: 4C xx xx                     jmp     NewCommand              ; And start over
   444                        NotEraseBank:
   445                        
   446                        ;===============================================================================
   447                        ; F - WDC Mask ROM Enable/Disable
   448                        ;-------------------------------------------------------------------------------
   449                        
  Mon Jun 18 2018 10:11                                                                                                    Page 13


   450                                        ifdef   W65C265SXB
   451 00:0153: C9 46                        cmp     #'F'
   452 00:0155: D0 20                        bne     NotMaskROM
   453                        
   454 00:0157: 20 xx xx                     jsr     SkipSpaces              ; Find first argument
   455 00:015A: B0 08                        bcs     MaskFail                ; Success?
   456                        
   457 00:015C: C9 30                        cmp     #'0'                    ; Check bank is 0..3
   458 00:015E: F0 0F                        beq     MaskOff
   459 00:0160: C9 31                        cmp     #'1'
   460 00:0162: F0 03                        beq     MaskOn
   461                        MaskFail:
   462 00:0164: 4C xx xx                     jmp     ShowError
   463                        
   464                        MaskOn:
   465 00:0167: A9 80                        lda     #$80                    ; Enable mask ROM
   466 00:0169: 1C 40 DF                     trb     BCR
   467 00:016C: 4C xx xx                     jmp     NewCommand
   468                        
   469                        MaskOff:
   470 00:016F: A9 80                        lda     #$80                    ; Disable mask ROM
   471 00:0171: 0C 40 DF                     tsb     BCR
   472 00:0174: 4C xx xx                     jmp     NewCommand
   473                        
   474                        NotMaskROM:
   475                                        endif
   476                        
   477                        ;===============================================================================
   478                        ; G - Goto
   479                        ;-------------------------------------------------------------------------------
   480                        
   481 00:0177: C9 47                        cmp     #'G'                    ; Invoke code
   482 00:0179: D0 0D                        bne     NotGoto
   483                        
   484 00:017B: A2 23                        ldx     #ADDR_S                 ; Parse execution address
   485 00:017D: 20 xx xx                     jsr     GetAddr
   486 00:0180: B0 03                        bcs     $+5
   487 00:0182: DC 23 00                     jmp     [ADDR_S]                ; Run from address
   488 00:0185: 6C FC FF                     jmp     ($FFFC)                 ; Otherwise reset
   489                        NotGoto:
   490                        
   491                        ;===============================================================================
   492                        ; H - Hunt for RAM
   493                        ;-------------------------------------------------------------------------------
   494                        
   495 00:0188: C9 48                        cmp     #'H'                    ; Hunt for RAM
   496 00:018A: F0 03                        beq     $+5
   497 00:018C: 4C xx xx                     jmp     NotHunt
   498                        
   499 00:018F: 64 23                        stz     ADDR_S+0                ; Start at $00:0000
   500 00:0191: 64 24                        stz     ADDR_S+1
   501 00:0193: 64 25                        stz     ADDR_S+2
   502                        
   503                        HuntStart:
   504 00:0195: A7 23                        lda     [ADDR_S]                ; Is byte is writeable?
   505 00:0197: 48                           pha
   506 00:0198: 49 FF                        eor     #$ff
   507 00:019A: 87 23                        sta     [ADDR_S]
  Mon Jun 18 2018 10:11                                                                                                    Page 14


   508 00:019C: C7 23                        cmp     [ADDR_S]
   509 00:019E: F0 11                        beq     HuntFound               ; Yes
   510                        
   511 00:01A0: 68                           pla
   512 00:01A1: 18                           clc                             ; Try the next block
   513 00:01A2: A5 24                        lda     ADDR_S+1
   514 00:01A4: 69 10                        adc     #$10
   515 00:01A6: 85 24                        sta     ADDR_S+1
   516 00:01A8: 90 EB                        bcc     HuntStart
   517 00:01AA: E6 25                        inc     ADDR_S+2
   518 00:01AC: D0 E7                        bne     HuntStart
   519 00:01AE: 4C xx xx                     jmp     NewCommand              ; Reached end of RAM
   520                        
   521                        HuntFound:
   522 00:01B1: 20 xx xx                     jsr     TxCRLF
   523 00:01B4: A5 25                        lda     ADDR_S+2                ; Print start address
   524 00:01B6: 20 xx xx                     jsr     TxHex2
   525 00:01B9: A9 3A                        lda     #':'
   526 00:01BB: 20 xx xx                     jsr     UartTx
   527 00:01BE: A5 24                        lda     ADDR_S+1
   528 00:01C0: 20 xx xx                     jsr     TxHex2
   529 00:01C3: A5 23                        lda     ADDR_S+0
   530 00:01C5: 20 xx xx                     jsr     TxHex2
   531                        
   532 00:01C8: A9 2D                        lda     #'-'
   533 00:01CA: 20 xx xx                     jsr     UartTx
   534                        
   535                        HuntEnd:
   536 00:01CD: 68                           pla                             ; Restore memory bytes
   537 00:01CE: 87 23                        sta     [ADDR_S]
   538 00:01D0: 18                           clc                             ; Try the next block
   539 00:01D1: A5 24                        lda     ADDR_S+1
   540 00:01D3: 69 10                        adc     #$10
   541 00:01D5: 85 24                        sta     ADDR_S+1
   542 00:01D7: 90 04                        bcc     HuntNext
   543 00:01D9: E6 25                        inc     ADDR_S+2
   544 00:01DB: F0 2D                        beq     HuntDone
   545                        
   546                        HuntNext
   547 00:01DD: A7 23                        lda     [ADDR_S]                ; Is byte is writeable?
   548 00:01DF: 48                           pha
   549 00:01E0: 49 FF                        eor     #$ff
   550 00:01E2: 87 23                        sta     [ADDR_S]
   551 00:01E4: C7 23                        cmp     [ADDR_S]
   552 00:01E6: F0 E5                        beq     HuntEnd                 ; Yes, keep looking
   553                        
   554 00:01E8: 68                           pla
   555 00:01E9: 38                           sec                             ; Print end address
   556 00:01EA: A5 23                        lda     ADDR_S+0
   557 00:01EC: E9 01                        sbc     #1
   558 00:01EE: 48                           pha
   559 00:01EF: A5 24                        lda     ADDR_S+1
   560 00:01F1: E9 00                        sbc     #0
   561 00:01F3: 48                           pha
   562 00:01F4: A5 25                        lda     ADDR_S+2
   563 00:01F6: E9 00                        sbc     #0
   564 00:01F8: 20 xx xx                     jsr     TxHex2
   565 00:01FB: A9 3A                        lda     #':'
  Mon Jun 18 2018 10:11                                                                                                    Page 15


   566 00:01FD: 20 xx xx                     jsr     UartTx
   567 00:0200: 68                           pla
   568 00:0201: 20 xx xx                     jsr     TxHex2
   569 00:0204: 68                           pla
   570 00:0205: 20 xx xx                     jsr     TxHex2
   571 00:0208: 80 8B                        bra     HuntStart
   572                        
   573                        HuntDone:
   574 00:020A: A9 FF                        lda     #$ff                    ; Pring FF:FFFF
   575 00:020C: 48                           pha
   576 00:020D: 48                           pha
   577 00:020E: 20 xx xx                     jsr     TxHex2
   578 00:0211: A9 3A                        lda     #':'
   579 00:0213: 20 xx xx                     jsr     UartTx
   580 00:0216: 68                           pla
   581 00:0217: 20 xx xx                     jsr     TxHex2
   582 00:021A: 68                           pla
   583 00:021B: 20 xx xx                     jsr     TxHex2
   584 00:021E: 4C xx xx                     jmp     NewCommand
   585                        NotHunt:
   586                        
   587                        ;===============================================================================
   588                        ; M - Display Memory
   589                        ;-------------------------------------------------------------------------------
   590                        
   591 00:0221: C9 4D                        cmp     #'M'                    ; Memory display?
   592 00:0223: D0 70                        bne     NotMemoryDisplay
   593                        
   594 00:0225: A2 23                        ldx     #ADDR_S                 ; Parse start address
   595 00:0227: 20 xx xx                     jsr     GetAddr
   596 00:022A: 90 03                        bcc     $+5
   597 00:022C: 4C xx xx                     jmp     ShowError
   598 00:022F: A2 26                        ldx     #ADDR_E                 ; Parse end address
   599 00:0231: 20 xx xx                     jsr     GetAddr
   600 00:0234: 90 03                        bcc     $+5
   601 00:0236: 4C xx xx                     jmp     ShowError
   602                        
   603                        DisplayMemory:
   604 00:0239: 20 xx xx                     jsr     TxCRLF
   605 00:023C: A5 25                        lda     ADDR_S+2                ; Show memory address
   606 00:023E: 20 xx xx                     jsr     TxHex2
   607 00:0241: A9 3A                        lda     #':'
   608 00:0243: 20 xx xx                     jsr     UartTx
   609 00:0246: A5 24                        lda     ADDR_S+1
   610 00:0248: 20 xx xx                     jsr     TxHex2
   611 00:024B: A5 23                        lda     ADDR_S+0
   612 00:024D: 20 xx xx                     jsr     TxHex2
   613                        
   614 00:0250: A0 00                        ldy     #0                      ; Show sixteen bytes of data
   615 00:0252: 20 xx xx     ByteLoop:       jsr     TxSpace
   616 00:0255: B7 23                        lda     [ADDR_S],y
   617 00:0257: 20 xx xx                     jsr     TxHex2
   618 00:025A: C8                           iny
   619 00:025B: C0 10                        cpy     #16
   620 00:025D: D0 F3                        bne     ByteLoop
   621                        
   622 00:025F: 20 xx xx                     jsr     TxSpace
   623 00:0262: A9 7C                        lda     #'|'
  Mon Jun 18 2018 10:11                                                                                                    Page 16


   624 00:0264: 20 xx xx                     jsr     UartTx
   625 00:0267: A0 00                        ldy     #0                      ; Show sixteen characters
   626 00:0269: B7 23        CharLoop:       lda     [ADDR_S],Y
   627 00:026B: 20 xx xx                     jsr     IsPrintable
   628 00:026E: B0 02                        bcs     $+4
   629 00:0270: A9 2E                        lda     #'.'
   630 00:0272: 20 xx xx                     jsr     UartTx
   631 00:0275: C8                           iny
   632 00:0276: C0 10                        cpy     #16
   633 00:0278: D0 EF                        bne     CharLoop
   634 00:027A: A9 7C                        lda     #'|'
   635 00:027C: 20 xx xx                     jsr     UartTx
   636                        
   637 00:027F: 18                           clc                             ; Bump the display address
   638 00:0280: 98                           tya
   639 00:0281: 65 23                        adc     ADDR_S+0
   640 00:0283: 85 23                        sta     ADDR_S+0
   641 00:0285: 90 02                        bcc     $+4
   642 00:0287: E6 24                        inc     ADDR_S+1
   643                        
   644 00:0289: 38                           sec                             ; Exceeded the end address?
   645 00:028A: E5 26                        sbc     ADDR_E+0
   646 00:028C: A5 24                        lda     ADDR_S+1
   647 00:028E: E5 27                        sbc     ADDR_E+1
   648 00:0290: 30 A7                        bmi     DisplayMemory           ; No, show more
   649                        
   650 00:0292: 4C xx xx                     jmp     NewCommand
   651                        NotMemoryDisplay:
   652                        
   653                        ;===============================================================================
   654                        ; R - Select ROM Bank
   655                        ;-------------------------------------------------------------------------------
   656                        
   657 00:0295: C9 52                        cmp     #'R'                    ; ROM Bank?
   658 00:0297: D0 16                        bne     NotROMBank              ; No
   659                        
   660 00:0299: 20 xx xx                     jsr     SkipSpaces              ; Find first argument
   661 00:029C: 90 03                        bcc     $+5                     ; Success?
   662 00:029E: 4C xx xx     BankFail:       jmp     ShowError               ; No
   663                        
   664 00:02A1: C9 30                        cmp     #'0'                    ; Check bank is 0..3
   665 00:02A3: 90 F9                        bcc     BankFail
   666 00:02A5: C9 34                        cmp     #'3'+1
   667 00:02A7: B0 F5                        bcs     BankFail
   668                        
   669 00:02A9: 20 xx xx                     jsr     RomSelect               ; Switch ROM banks
   670 00:02AC: 4C xx xx                     jmp     NewCommand              ; Done
   671                        NotROMBank:
   672                        
   673                        ;===============================================================================
   674                        ; S - S19 Record
   675                        ;-------------------------------------------------------------------------------
   676                        
   677 00:02AF: C9 53                        cmp     #'S'                    ; S19?
   678 00:02B1: F0 03                        beq     $+5
   679 00:02B3: 4C xx xx                     jmp     NotS19
   680                        
   681 00:02B6: 20 xx xx                     jsr     NextChar                ; Get record type
  Mon Jun 18 2018 10:11                                                                                                    Page 17


   682 00:02B9: B0 79                        bcs     S19Fail
   683 00:02BB: C9 31                        cmp     #'1'                    ; Only process type 1
   684 00:02BD: D0 72                        bne     S19Done
   685                        
   686 00:02BF: A2 26                        ldx     #ADDR_E                 ; Get byte count
   687 00:02C1: 20 xx xx                     jsr     GetByte
   688 00:02C4: B0 6E                        bcs     S19Fail
   689 00:02C6: A5 26                        lda     ADDR_E                  ; Use as initial checksum
   690 00:02C8: 85 2B                        sta     SUM
   691 00:02CA: C6 26                        dec     ADDR_E
   692 00:02CC: F0 66                        beq     S19Fail
   693                        
   694 00:02CE: A2 23                        ldx     #ADDR_S                 ; Get address
   695 00:02D0: 20 xx xx                     jsr     GetAddr
   696 00:02D3: B0 5F                        bcs     S19Fail
   697 00:02D5: A5 23                        lda     ADDR_S+0                ; Add to checksum
   698 00:02D7: 65 24                        adc     ADDR_S+1
   699 00:02D9: 18                           clc
   700 00:02DA: 65 2B                        adc     SUM
   701 00:02DC: 85 2B                        sta     SUM
   702 00:02DE: C6 26                        dec     ADDR_E
   703 00:02E0: F0 52                        beq     S19Fail
   704 00:02E2: C6 26                        dec     ADDR_E
   705 00:02E4: F0 4E                        beq     S19Fail
   706                        
   707                        S19Load:
   708 00:02E6: A2 2C                        ldx     #TEMP                   ; Fetch a data byte
   709 00:02E8: 20 xx xx                     jsr     GetByte
   710 00:02EB: B0 47                        bcs     S19Fail
   711 00:02ED: A5 2C                        lda     TEMP
   712 00:02EF: 65 2B                        adc     SUM
   713 00:02F1: 85 2B                        sta     SUM
   714 00:02F3: C6 26                        dec     ADDR_E
   715 00:02F5: F0 3D                        beq     S19Fail
   716                        
   717 00:02F7: A5 25                        lda     ADDR_S+2                ; Writing to ROM?
   718 00:02F9: D0 17                        bne     WriteS19                ; No
   719 00:02FB: A5 24                        lda     ADDR_S+1
   720 00:02FD: 10 13                        bpl     WriteS19                ; No
   721                        
   722                                        ifdef   W65C265SXB
   723 00:02FF: C9 DF                        cmp     #$df                    ; Register page?
   724 00:0301: F0 13                        beq     NoWrite
   725                                        endif
   726                        
   727 00:0303: A9 AA                        lda     #$aa                    ; Yes, unlock flash
   728 00:0305: 8D 55 D5                     sta     $8000+$5555
   729 00:0308: A9 55                        lda     #$55
   730 00:030A: 8D AA AA                     sta     $8000+$2aaa
   731 00:030D: A9 A0                        lda     #$a0                    ; Start byte write
   732 00:030F: 8D 55 D5                     sta     $8000+$5555
   733                        WriteS19:
   734 00:0312: A5 2C                        lda     TEMP                    ; Write the value
   735 00:0314: 87 23                        sta     [ADDR_S]
   736                        
   737                        NoWrite:
   738 00:0316: E6 23                        inc     ADDR_S+0                ; Bump address by one
   739 00:0318: D0 02                        bne     $+4
  Mon Jun 18 2018 10:11                                                                                                    Page 18


   740 00:031A: E6 24                        inc     ADDR_S+1
   741                        
   742 00:031C: A5 26                        lda     ADDR_E                  ; Reached checksum?
   743 00:031E: C9 01                        cmp     #1
   744 00:0320: D0 C4                        bne     S19Load
   745                        
   746 00:0322: A2 2C                        ldx     #TEMP                   ; Yes, read it
   747 00:0324: 20 xx xx                     jsr     GetByte
   748 00:0327: B0 0B                        bcs     S19Fail
   749 00:0329: A5 2C                        lda     TEMP
   750 00:032B: 65 2B                        adc     SUM
   751 00:032D: C9 FF                        cmp     #$ff                    ; Checksum correct?
   752 00:032F: D0 03                        bne     S19Fail
   753                        
   754 00:0331: 4C xx xx     S19Done:        jmp     NewCommand              ; Get
   755                        
   756                        S19Fail:
   757                                        long_i                          ; Display error message
+  757 00:0334: C2 10                        rep     #X_FLAG
+  757                                        longi   on
   758 00:0336: A2 xx xx                     ldx     #INVALID_S19
   759 00:0339: 20 xx xx                     jsr     TxStr
   760                                        longi   off
   761 00:033C: 4C xx xx                     jmp     NewCommand              ; And start over
   762                        NotS19:
   763                        
   764                        ;===============================================================================
   765                        ; W - Write memory
   766                        ;-------------------------------------------------------------------------------
   767                        
   768 00:033F: C9 57                        cmp     #'W'                    ; Write memory?
   769 00:0341: D0 58                        bne     NotWrite
   770                        
   771 00:0343: A2 23                        ldx     #ADDR_S                 ; Parse start address
   772 00:0345: 20 xx xx                     jsr     GetAddr
   773 00:0348: 90 03                        bcc     $+5
   774 00:034A: 4C xx xx                     jmp     ShowError
   775                        
   776 00:034D: 24 24                        bit     ADDR_S+1                ; Load into ROM area?
   777 00:034F: 10 03                        bpl     $+5
   778 00:0351: 20 xx xx                     jsr     CheckSafe               ; Yes, check selection
   779                        
   780 00:0354: A2 26                        ldx     #ADDR_E                 ; Parse value byte
   781 00:0356: 20 xx xx                     jsr     GetByte                 ; Is there a value?
   782 00:0359: 90 03                        bcc     $+5
   783 00:035B: 4C xx xx                     jmp     NewCommand              ; No.
   784                        
   785 00:035E: A5 25                        lda     ADDR_S+2                ; Writing to ROM?
   786 00:0360: D0 13                        bne     WriteMemory             ; No
   787 00:0362: 24 24                        bit     ADDR_S+1
   788 00:0364: 10 0F                        bpl     WriteMemory             ; No
   789                        
   790 00:0366: A9 AA                        lda     #$aa                    ; Yes, unlock flash
   791 00:0368: 8D 55 D5                     sta     $8000+$5555
   792 00:036B: A9 55                        lda     #$55
   793 00:036D: 8D AA AA                     sta     $8000+$2aaa
   794 00:0370: A9 A0                        lda     #$a0                    ; Start byte write
   795 00:0372: 8D 55 D5                     sta     $8000+$5555
  Mon Jun 18 2018 10:11                                                                                                    Page 19


   796                        WriteMemory:
   797 00:0375: A5 26                        lda     ADDR_E                  ; Write the value
   798 00:0377: 87 23                        sta     [ADDR_S]
   799                        
   800 00:0379: E6 23                        inc     ADDR_S+0                ; Bump address by one
   801 00:037B: D0 02                        bne     $+4
   802 00:037D: E6 24                        inc     ADDR_S+1
   803                        
   804 00:037F: A9 57                        lda     #'W'                    ; Build command for next byte
   805 00:0381: 20 xx xx                     jsr     StartCommand
   806 00:0384: A9 20                        lda     #' '
   807 00:0386: 20 xx xx                     jsr     BuildCommand
   808 00:0389: A5 24                        lda     ADDR_S+1                ; Add the next address
   809 00:038B: 20 xx xx                     jsr     BuildByte
   810 00:038E: A5 23                        lda     ADDR_S+0
   811 00:0390: 20 xx xx                     jsr     BuildByte
   812 00:0393: A9 20                        lda     #' '
   813 00:0395: 20 xx xx                     jsr     BuildCommand
   814 00:0398: 4C xx xx                     jmp     ShowCommand             ; And prompt for data
   815                        
   816                        NotWrite:
   817                        
   818                        ;===============================================================================
   819                        ; X - XMODEM Receive
   820                        ;-------------------------------------------------------------------------------
   821                        
   822 00:039B: C9 58                        cmp     #'X'                    ; XModem upload?
   823 00:039D: F0 03                        beq     $+5                     ; Yes.
   824 00:039F: 4C xx xx                     jmp     NotXModem
   825                        
   826 00:03A2: A2 23                        ldx     #ADDR_S                 ; Parse start address
   827 00:03A4: 20 xx xx                     jsr     GetAddr
   828 00:03A7: 90 03                        bcc     $+5
   829 00:03A9: 4C xx xx                     jmp     ShowError
   830                        
   831 00:03AC: 24 24                        bit     ADDR_S+1                ; Load into ROM area?
   832 00:03AE: 10 03                        bpl     $+5
   833 00:03B0: 20 xx xx                     jsr     CheckSafe               ; Yes, check selection
   834                        
   835                                        long_i                          ; Display waiting message
+  835 00:03B3: C2 10                        rep     #X_FLAG
+  835                                        longi   on
   836 00:03B5: A2 xx xx                     ldx     #WAITING
   837 00:03B8: 20 xx xx                     jsr     TxStr
   838 00:03BB: 20 xx xx                     jsr     TxCRLF
   839                                        short_i
+  839 00:03BE: E2 10                        sep     #X_FLAG
+  839                                        longi   off
   840 00:03C0: 64 29                        stz     BLOCK                   ; Reset the block number
   841 00:03C2: E6 29                        inc     BLOCK
   842                        
   843                        ResetRetries:
   844 00:03C4: A9 0A                        lda     #10                     ; Reset the retry counter
   845 00:03C6: 85 2A                        sta     RETRIES
   846                        
   847                        TransferWait:
   848 00:03C8: 64 2C                        stz     TEMP+0                  ; Clear timeout counter
   849 00:03CA: 64 2D                        stz     TEMP+1
  Mon Jun 18 2018 10:11                                                                                                    Page 20


   850 00:03CC: A9 EC                        lda     #-20
   851 00:03CE: 85 2E                        sta     TEMP+2
   852                        TransferPoll:
   853 00:03D0: 20 xx xx                     jsr     UartRxTest              ; Any data yet?
   854 00:03D3: B0 20                        bcs     TransferScan
   855 00:03D5: E6 2C                        inc     TEMP+0
   856 00:03D7: D0 F7                        bne     TransferPoll
   857 00:03D9: E6 2D                        inc     TEMP+1
   858 00:03DB: D0 F3                        bne     TransferPoll
   859 00:03DD: E6 2E                        inc     TEMP+2
   860 00:03DF: D0 EF                        bne     TransferPoll
   861 00:03E1: C6 2A                        dec     RETRIES
   862 00:03E3: F0 05                        beq     TimedOut
   863 00:03E5: 20 xx xx                     jsr     SendNAK                 ; Send a NAK
   864 00:03E8: 80 DE                        bra     TransferWait
   865                        
   866                        TimedOut:
   867                                        long_i
+  867 00:03EA: C2 10                        rep     #X_FLAG
+  867                                        longi   on
   868 00:03EC: A2 xx xx                     ldx     #TIMEOUT
   869 00:03EF: 20 xx xx                     jsr     TxStr
   870                                        longi   off
   871 00:03F2: 4C xx xx                     jmp     NewCommand
   872                        
   873                        TransferScan:
   874 00:03F5: 20 xx xx                     jsr     UartRx                  ; Wait for SOH or EOT
   875 00:03F8: C9 04                        cmp     #EOT
   876 00:03FA: F0 6A                        beq     TransferDone
   877 00:03FC: C9 01                        cmp     #SOH
   878 00:03FE: D0 C8                        bne     TransferWait
   879 00:0400: 20 xx xx                     jsr     UartRx                  ; Check the block number
   880 00:0403: C5 29                        cmp     BLOCK
   881 00:0405: D0 59                        bne     TransferError
   882 00:0407: 20 xx xx                     jsr     UartRx                  ; Check inverted block
   883 00:040A: 49 FF                        eor     #$ff
   884 00:040C: C5 29                        cmp     BLOCK
   885 00:040E: D0 50                        bne     TransferError
   886                        
   887 00:0410: A0 00                        ldy     #0
   888 00:0412: 84 2B                        sty     SUM                     ; Clear the check sum
   889                        TransferBlock:
   890 00:0414: 20 xx xx                     jsr     UartRx
   891 00:0417: 48                           pha
   892                        
   893 00:0418: A5 25                        lda     ADDR_S+2                ; Writing to ROM?
   894 00:041A: D0 17                        bne     WriteByte               ; No
   895 00:041C: A5 24                        lda     ADDR_S+1
   896 00:041E: 10 13                        bpl     WriteByte               ; No
   897                        
   898                                        ifdef   W65C265SXB
   899 00:0420: C9 DF                        cmp     #$df                    ; Register page?
   900 00:0422: F0 18                        beq     WriteSkip
   901                                        endif
   902                        
   903 00:0424: A9 AA                        lda     #$aa                    ; Yes, unlock flash
   904 00:0426: 8D 55 D5                     sta     $8000+$5555
   905 00:0429: A9 55                        lda     #$55
  Mon Jun 18 2018 10:11                                                                                                    Page 21


   906 00:042B: 8D AA AA                     sta     $8000+$2aaa
   907 00:042E: A9 A0                        lda     #$a0                    ; Start byte write
   908 00:0430: 8D 55 D5                     sta     $8000+$5555
   909                        
   910                        WriteByte:
   911 00:0433: 68                           pla
   912 00:0434: 97 23                        sta     [ADDR_S],Y
   913                        
   914                        WriteWait:
   915 00:0436: D7 23                        cmp     [ADDR_S],Y              ; Wait for write
   916 00:0438: D0 FC                        bne     WriteWait
   917 00:043A: 80 01                        bra     $+3
   918                        
   919                        WriteSkip:
   920 00:043C: 68                           pla
   921                        
   922 00:043D: 18                           clc                             ; Add to check sum
   923 00:043E: 65 2B                        adc     SUM
   924 00:0440: 85 2B                        sta     SUM
   925 00:0442: C8                           iny
   926 00:0443: C0 80                        cpy     #128
   927 00:0445: D0 CD                        bne     TransferBlock
   928 00:0447: 20 xx xx                     jsr     UartRx                  ; Check the check sum
   929 00:044A: C5 2B                        cmp     SUM
   930 00:044C: D0 12                        bne     TransferError           ; Failed
   931 00:044E: 18                           clc
   932 00:044F: 98                           tya
   933 00:0450: 65 23                        adc     ADDR_S+0                ; Bump address one block
   934 00:0452: 85 23                        sta     ADDR_S+0
   935 00:0454: 90 02                        bcc     $+4
   936 00:0456: E6 24                        inc     ADDR_S+1
   937                        
   938 00:0458: 20 xx xx                     jsr     SendACK                 ; Acknowledge block
   939 00:045B: E6 29                        inc     BLOCK                   ; Bump block number
   940 00:045D: 4C xx xx                     jmp     TransferWait
   941                        
   942                        TransferError;
   943 00:0460: 20 xx xx                     jsr     SendNAK                 ; Send a NAK
   944 00:0463: 4C xx xx                     jmp     TransferWait            ; And try again
   945                        
   946                        TransferDone:
   947 00:0466: 20 xx xx                     jsr     SendACK                 ; Acknowledge transmission
   948 00:0469: 4C xx xx                     jmp     NewCommand              ; Done
   949                        
   950                        SendACK:
   951 00:046C: A9 06                        lda     #ACK
   952 00:046E: 4C xx xx                     jmp     UartTx
   953                        
   954                        SendNAK:
   955 00:0471: A9 15                        lda     #NAK
   956 00:0473: 4C xx xx                     jmp     UartTx
   957                        
   958                        NotXModem:
   959                        
   960                        ;===============================================================================
   961                        ; ? - Help
   962                        ;-------------------------------------------------------------------------------
   963                        
  Mon Jun 18 2018 10:11                                                                                                    Page 22


   964 00:0476: C9 3F                        cmp     #'?'                    ; Help command?
   965 00:0478: D0 0B                        bne     NotHelp
   966                        
   967                                        long_i
+  967 00:047A: C2 10                        rep     #X_FLAG
+  967                                        longi   on
   968 00:047C: A2 xx xx                     ldx     #HELP                   ; Output help string
   969 00:047F: 20 xx xx                     jsr     TxStr
   970                                        longi   off
   971 00:0482: 4C xx xx                     jmp     NewCommand
   972                        NotHelp:
   973                        
   974                        ;-------------------------------------------------------------------------------
   975                        
   976                        ShowError:
   977                                        long_i
+  977 00:0485: C2 10                        rep     #X_FLAG
+  977                                        longi   on
   978 00:0487: A2 xx xx                     ldx     #ERROR                  ; Output error message
   979 00:048A: 20 xx xx                     jsr     TxStr
   980                                        longi   off
   981 00:048D: 4C xx xx                     jmp     NewCommand
   982                        
   983                        ;===============================================================================
   984                        ;-------------------------------------------------------------------------------
   985                        
   986                        ; Checks if an expendable ROM bank is currently selected. If the bank with the
   987                        ; WDC firmware is selected then warn and accept a new command.
   988                        
   989                        CheckSafe:
   990 00:0490: 20 xx xx                     jsr     RomCheck                ; WDC ROM selected?
   991 00:0493: F0 01                        beq     $+3
   992 00:0495: 60                           rts                             ; No, save to change
   993                        
   994 00:0496: 68                           pla                             ; Discard return address
   995 00:0497: 68                           pla
   996                                        long_i                          ; Complain about bank
+  996 00:0498: C2 10                        rep     #X_FLAG
+  996                                        longi   on
   997 00:049A: A2 xx xx                     ldx     #NOT_SAFE
   998 00:049D: 20 xx xx                     jsr     TxStr
   999                                        longi   off
  1000 00:04A0: 4C xx xx                     jmp     NewCommand              ; And start over
  1001                        
  1002                        ;===============================================================================
  1003                        ; Byte and Word Parsing
  1004                        ;-------------------------------------------------------------------------------
  1005                        
  1006                        ; Parse a hex byte from the command line and store it at the location indicated
  1007                        ; by the X register.
  1008                        
  1009                        GetByte:
  1010 00:04A3: 9E 00 00                     stz     0,x                     ; Set the target address
  1011 00:04A6: 20 xx xx                     jsr     SkipSpaces              ; Skip to first real character
  1012 00:04A9: 90 01                        bcc     $+3
  1013 00:04AB: 60                           rts                             ; None found
  1014 00:04AC: 20 xx xx                     jsr     IsHexDigit              ; Must have at least one digit
  1015 00:04AF: 90 12                        bcc     ByteFail
  Mon Jun 18 2018 10:11                                                                                                    Page 23


  1016 00:04B1: 20 xx xx                     jsr     AddDigit
  1017 00:04B4: 20 xx xx                     jsr     NextChar
  1018 00:04B7: B0 08                        bcs     ByteDone
  1019 00:04B9: 20 xx xx                     jsr     IsHexDigit
  1020 00:04BC: 90 03                        bcc     ByteDone
  1021 00:04BE: 20 xx xx                     jsr     AddDigit
  1022 00:04C1: 18           ByteDone:       clc
  1023 00:04C2: 60                           rts
  1024 00:04C3: 38           ByteFail:       sec
  1025 00:04C4: 60                           rts
  1026                        
  1027                        ; Parse an address from the command line and store it at the location indicated
  1028                        ; by the X register.
  1029                        
  1030                        GetAddr:
  1031 00:04C5: 9E 00 00                     stz     0,x                     ; Set the target address
  1032 00:04C8: 9E 01 00                     stz     1,x
  1033 00:04CB: A5 22                        lda     BANK
  1034 00:04CD: 9D 02 00                     sta     2,x
  1035 00:04D0: 20 xx xx                     jsr     SkipSpaces              ; Skip to first real character
  1036 00:04D3: 90 01                        bcc     $+3
  1037 00:04D5: 60                           rts                             ; None found
  1038                        
  1039 00:04D6: 20 xx xx                     jsr     IsHexDigit              ; Must have at least one digit
  1040 00:04D9: 90 2C                        bcc     AddrFail
  1041 00:04DB: 20 xx xx                     jsr     AddDigit
  1042 00:04DE: 20 xx xx                     jsr     NextChar
  1043 00:04E1: B0 22                        bcs     AddrDone
  1044 00:04E3: 20 xx xx                     jsr     IsHexDigit
  1045 00:04E6: 90 1D                        bcc     AddrDone
  1046 00:04E8: 20 xx xx                     jsr     AddDigit
  1047 00:04EB: 20 xx xx                     jsr     NextChar
  1048 00:04EE: B0 15                        bcs     AddrDone
  1049 00:04F0: 20 xx xx                     jsr     IsHexDigit
  1050 00:04F3: 90 10                        bcc     AddrDone
  1051 00:04F5: 20 xx xx                     jsr     AddDigit
  1052 00:04F8: 20 xx xx                     jsr     NextChar
  1053 00:04FB: B0 08                        bcs     AddrDone
  1054 00:04FD: 20 xx xx                     jsr     IsHexDigit
  1055 00:0500: 90 03                        bcc     AddrDone
  1056 00:0502: 20 xx xx                     jsr     AddDigit
  1057 00:0505: 18           AddrDone:       clc                             ; Carry clear got an address
  1058 00:0506: 60                           rts
  1059 00:0507: 38           AddrFail:       sec                             ; Carry set -- failed.
  1060 00:0508: 60                           rts
  1061                        
  1062                        ; Add a hex digit to the 16-bit value being build at at the location indicated
  1063                        ; by X.
  1064                        
  1065                        AddDigit:
  1066 00:0509: 38                           sec                             ; Convert ASCII to binary
  1067 00:050A: E9 30                        sbc     #'0'
  1068 00:050C: C9 0A                        cmp     #$0a
  1069 00:050E: 90 02                        bcc     $+4
  1070 00:0510: E9 07                        sbc     #7
  1071                        
  1072 00:0512: 1E 00 00                     asl     0,x                     ; Shift up one nybble
  1073 00:0515: 3E 01 00                     rol     1,x
  Mon Jun 18 2018 10:11                                                                                                    Page 24


  1074 00:0518: 1E 00 00                     asl     0,x
  1075 00:051B: 3E 01 00                     rol     1,x
  1076 00:051E: 1E 00 00                     asl     0,x
  1077 00:0521: 3E 01 00                     rol     1,x
  1078 00:0524: 1E 00 00                     asl     0,x
  1079 00:0527: 3E 01 00                     rol     1,x
  1080                        
  1081 00:052A: 1D 00 00                     ora     0,x                     ; Merge in new digit
  1082 00:052D: 9D 00 00                     sta     0,x                     ; .. and save
  1083 00:0530: 60                           rts
  1084                        
  1085                        ;===============================================================================
  1086                        ; Command Line Parsing and Building
  1087                        ;-------------------------------------------------------------------------------
  1088                        
  1089                        ; Get the next character from the command buffer updating the position in X.
  1090                        ; Set the carry if the end of the buffer is reached.
  1091                        
  1092                        NextChar:
  1093 00:0531: C4 21                        cpy     BUFLEN                  ; Any characters left?
  1094 00:0533: 90 01                        bcc     $+3
  1095 00:0535: 60                           rts
  1096 00:0536: B9 00 02                     lda     BUFFER,y
  1097 00:0539: C8                           iny
  1098 00:053A: 4C xx xx                     jmp     ToUpperCase
  1099                        
  1100                        ; Skip over any spaces until a non-space character or the end of the string
  1101                        ; is reached.
  1102                        
  1103                        SkipSpaces:
  1104 00:053D: 20 xx xx                     jsr     NextChar                ; Fetch next character
  1105 00:0540: 90 01                        bcc     $+3                     ; Any left?
  1106 00:0542: 60                           rts                             ; No
  1107 00:0543: C9 20                        cmp     #' '                    ; Is it a space?
  1108 00:0545: F0 F6                        beq     SkipSpaces              ; Yes, try again
  1109 00:0547: 18                           clc
  1110 00:0548: 60                           rts                             ; Done
  1111                        
  1112                        ; Clear the buffer and the add the command character in A.
  1113                        
  1114                        StartCommand:
  1115 00:0549: 64 21                        stz     BUFLEN                  ; Clear the character count
  1116                        
  1117                        ; Append the character in A to the command being built updating the length.
  1118                        
  1119                        BuildCommand:
  1120 00:054B: A4 21                        ldy     BUFLEN
  1121 00:054D: E6 21                        inc     BUFLEN
  1122 00:054F: 99 00 02                     sta     BUFFER,y
  1123 00:0552: 60                           rts
  1124                        
  1125                        ; Convert the value in A into hex characters and append to the command buffer.
  1126                        
  1127                        BuildByte:
  1128 00:0553: 48                           pha                             ; Save the value
  1129 00:0554: 4A                           lsr     a                       ; Shift MS nybble down
  1130 00:0555: 4A                           lsr     a
  1131 00:0556: 4A                           lsr     a
  Mon Jun 18 2018 10:11                                                                                                    Page 25


  1132 00:0557: 4A                           lsr     a
  1133 00:0558: 20 xx xx                     jsr     HexToAscii              ; Convert to ASCII
  1134 00:055B: 20 xx xx                     jsr     BuildCommand            ; .. and add to command
  1135 00:055E: 68                           pla                             ; Pull LS nybble
  1136 00:055F: 20 xx xx                     jsr     HexToAscii              ; Convert to ASCII
  1137 00:0562: 4C xx xx                     jmp     BuildCommand            ; .. and add to command
  1138                        
  1139                        ;===============================================================================
  1140                        ; Character Classification
  1141                        ;-------------------------------------------------------------------------------
  1142                        
  1143                        ; If the character in MD_ACC is lower case then convert it to upper case.
  1144                        
  1145                        ToUpperCase:
  1146 00:0565: 20 xx xx                     jsr     IsLowerCase             ; Test the character
  1147 00:0568: 90 02                        bcc     $+4
  1148 00:056A: E9 20                        sbc     #32                     ; Convert lower case
  1149 00:056C: 18                           clc
  1150 00:056D: 60                           rts                             ; Done
  1151                        
  1152                        ; Determine if the character in MD_ACC is a lower case letter. Set the carry if it
  1153                        ; is, otherwise clear it.
  1154                        
  1155                                        longa   off
  1156                        IsLowerCase:
  1157 00:056E: C9 61                        cmp     #'a'                    ; Between a and z?
  1158 00:0570: 90 06                        bcc     ClearCarry
  1159 00:0572: C9 7B                        cmp     #'z'+1
  1160 00:0574: B0 02                        bcs     ClearCarry
  1161 00:0576: 38           SetCarry:       sec
  1162 00:0577: 60                           rts
  1163 00:0578: 18           ClearCarry:     clc
  1164 00:0579: 60                           rts
  1165                        
  1166                        ; Determine if the character in MD_ACC is a hex character. Set the carry if it is,
  1167                        ; otherwise clear it.
  1168                        
  1169                                        longa   off
  1170                        IsHexDigit:
  1171 00:057A: C9 30                        cmp     #'0'                    ; Between 0 and 9?
  1172 00:057C: 90 FA                        bcc     ClearCarry
  1173 00:057E: C9 3A                        cmp     #'9'+1
  1174 00:0580: 90 F4                        bcc     SetCarry
  1175 00:0582: C9 41                        cmp     #'A'                    ; Between MD_ACC and F?
  1176 00:0584: 90 F2                        bcc     ClearCarry
  1177 00:0586: C9 47                        cmp     #'F'+1
  1178 00:0588: 90 EC                        bcc     SetCarry
  1179 00:058A: 80 EC                        bra     ClearCarry
  1180                        
  1181                        ; Determine if the character in MD_ACC is a printable character. Set the carry if it
  1182                        ; is, otherwise clear it.
  1183                        
  1184                                        longa   off
  1185                        IsPrintable:
  1186 00:058C: C9 20                        cmp     #' '
  1187 00:058E: 90 E8                        bcc     ClearCarry
  1188 00:0590: C9 7F                        cmp     #DEL
  1189 00:0592: 90 E2                        bcc     SetCarry
  Mon Jun 18 2018 10:11                                                                                                    Page 26


  1190 00:0594: 80 E2                        bra     ClearCarry
  1191                        
  1192                        ;===============================================================================
  1193                        ; Display Utilities
  1194                        ;-------------------------------------------------------------------------------
  1195                        
  1196                        ; Display the value in MD_ACC as two hexadecimal digits.
  1197                        
  1198                        TxHex2:
  1199 00:0596: 48                           pha                             ; Save the original byte
  1200 00:0597: 4A                           lsr     a                       ; Shift down hi nybble
  1201 00:0598: 4A                           lsr     a
  1202 00:0599: 4A                           lsr     a
  1203 00:059A: 4A                           lsr     a
  1204 00:059B: 20 xx xx                     jsr     UartHex                 ; Display
  1205 00:059E: 68                           pla                             ; Recover data byte
  1206                        
  1207                        ; Display the LSB of the value in MD_ACC as a hexadecimal digit using decimal
  1208                        ; arithmetic to do the conversion.
  1209                        
  1210                        UartHex:
  1211 00:059F: 20 xx xx                     jsr     HexToAscii              ; Convert to ASCII
  1212 00:05A2: 4C xx xx                     jmp     UartTx                  ; And display
  1213                        
  1214                        ; Convert a LSB of the value in MD_ACC to a hexadecimal digit using decimal
  1215                        ; arithmetic.
  1216                        
  1217                        HexToAscii:
  1218 00:05A5: 29 0F                        and     #$0f                    ; Strip out lo nybble
  1219 00:05A7: F8                           sed                             ; Convert to ASCII
  1220 00:05A8: 18                           clc
  1221 00:05A9: 69 90                        adc     #$90
  1222 00:05AB: 69 40                        adc     #$40
  1223 00:05AD: D8                           cld
  1224 00:05AE: 60                           rts                             ; Done
  1225                        
  1226                        ; Display the string of characters starting a the memory location pointed to by
  1227                        ; X (16-bits).
  1228                        
  1229                                        .longa  off
  1230                                        .longi  on
  1231                        TxStr:
  1232 00:05AF: BD 00 00                     lda     0,x                     ; Fetch the next character
  1233 00:05B2: D0 01                        bne     $+3                     ; Return it end of string
  1234 00:05B4: 60                           rts
  1235 00:05B5: 20 xx xx                     jsr     UartTx                  ; Otherwise print it
  1236 00:05B8: E8                           inx                             ; Bump the pointer
  1237 00:05B9: 80 F4                        bra     TxStr                   ; And repeat
  1238                        
  1239                        ; Display a CR/LF control character sequence.
  1240                        
  1241                        TxCRLF:
  1242 00:05BB: 20 xx xx                     jsr     TxCR                    ; Transmit a CR
  1243 00:05BE: A9 0A                        lda     #LF                     ; Followed by a LF
  1244 00:05C0: 4C xx xx                     jmp     UartTx
  1245                        
  1246                        TxCR:
  1247 00:05C3: A9 0D                        lda     #CR                     ; Transmit a CR
  Mon Jun 18 2018 10:11                                                                                                    Page 27


  1248 00:05C5: 4C xx xx                     jmp     UartTx
  1249                        
  1250                        TxSpace:
  1251 00:05C8: A9 20                        lda     #' '                    ; Transmit a space
  1252 00:05CA: 4C xx xx                     jmp     UartTx
  1253                        
  1254                        ;===============================================================================
  1255                        ;-------------------------------------------------------------------------------
  1256                        
  1257                        ;
  1258                        
  1259                                        longa   off
  1260                                        longi   off
  1261                        TxCodeBytes:
  1262 00:05CD: A7 23                        lda     [ADDR_S]                ; Fetch the opcode
  1263 00:05CF: 20 xx xx                     jsr     OpcodeSize              ; and work out its size
  1264 00:05D2: AA                           tax
  1265 00:05D3: A0 00                        ldy     #0                      ; Clear byte count
  1266                        CodeLoop:
  1267 00:05D5: B7 23                        lda     [ADDR_S],Y              ; Fetch a byte of code
  1268 00:05D7: 20 xx xx                     jsr     TxHex2
  1269 00:05DA: 20 xx xx                     jsr     TxSpace
  1270 00:05DD: C8                           iny
  1271 00:05DE: CA                           dex
  1272 00:05DF: D0 F4                        bne     CodeLoop
  1273                        PadLoop:
  1274 00:05E1: C0 04                        cpy     #4                      ; Need to pad out?
  1275 00:05E3: D0 01                        bne     $+3
  1276 00:05E5: 60                           rts
  1277 00:05E6: 20 xx xx                     jsr     TxSpace
  1278 00:05E9: 20 xx xx                     jsr     TxSpace
  1279 00:05EC: 20 xx xx                     jsr     TxSpace
  1280 00:05EF: C8                           iny
  1281 00:05F0: 80 EF                        bra     PadLoop
  1282                        
  1283                        ;
  1284                        
  1285                                        longa   off
  1286                                        longi   off
  1287                        TxSymbolic:
  1288 00:05F2: A7 23                        lda     [ADDR_S]                ; Fetch opcode
  1289 00:05F4: 48                           pha
  1290 00:05F5: 20 xx xx                     jsr     TxOpcode
  1291 00:05F8: 68                           pla
  1292 00:05F9: 20 xx xx                     jsr     TxOperand
  1293 00:05FC: 60                           rts
  1294                        
  1295                        ;
  1296                        
  1297                                        longa   off
  1298                                        longi   off
  1299                        TxOpcode:
  1300 00:05FD: 08                           php                             ; Save register sizes
  1301 00:05FE: AA                           tax                             ; Work out the mnemonic
  1302 00:05FF: BD xx xx                     lda     OPCODES,x
  1303 00:0602: AA                           tax
  1304                                        long_a
+ 1304 00:0603: C2 20                        rep     #M_FLAG
  Mon Jun 18 2018 10:11                                                                                                    Page 28


+ 1304                                        longa   on
  1305 00:0605: BD xx xx                     lda     MNEMONICS,x
  1306                        
  1307 00:0608: 48                           pha                             ; Save last character
  1308 00:0609: 4A                           lsr     a                       ; Shift second down
  1309 00:060A: 4A                           lsr     a
  1310 00:060B: 4A                           lsr     a
  1311 00:060C: 4A                           lsr     a
  1312 00:060D: 4A                           lsr     a
  1313 00:060E: 48                           pha                             ; Save it
  1314 00:060F: 4A                           lsr     a                       ; Shift first down
  1315 00:0610: 4A                           lsr     a
  1316 00:0611: 4A                           lsr     a
  1317 00:0612: 4A                           lsr     a
  1318 00:0613: 4A                           lsr     a
  1319 00:0614: 20 xx xx                     jsr     ExpandMnem              ; Print first
  1320 00:0617: 68                           pla
  1321 00:0618: 20 xx xx                     jsr     ExpandMnem              ; .. second
  1322 00:061B: 68                           pla
  1323 00:061C: 20 xx xx                     jsr     ExpandMnem              ; .. and third
  1324 00:061F: 28                           plp
  1325 00:0620: 20 xx xx                     jsr     TxSpace
  1326 00:0623: 60                           rts
  1327                        
  1328                        ExpandMnem:
  1329 00:0624: 18                           clc
  1330 00:0625: 29 1F 00                     and     #$1f                    ; Expand letter code
  1331 00:0628: 69 40 00                     adc     #'@'
  1332 00:062B: 4C xx xx                     jmp     UartTx
  1333                        
  1334                        ;
  1335                        
  1336                                        longa   off
  1337                                        longi   off
  1338                        TxOperand:
  1339 00:062E: AA                           tax                             ; Work out addressing mode
  1340 00:062F: BD xx xx                     lda     MODES,x
  1341 00:0632: AA                           tax
  1342 00:0633: 7C xx xx                     jmp     (MODE_SHOW,x)
  1343                        
  1344                        MODE_SHOW:
  1345 00:0636: xx xx                        dw      TxAbsolute              ; a
  1346 00:0638: xx xx                        dw      TxAccumulator           ; A
  1347 00:063A: xx xx                        dw      TxAbsoluteX             ; a,x
  1348 00:063C: xx xx                        dw      TxAbsoluteY             ; a,y
  1349 00:063E: xx xx                        dw      TxLong                  ; al
  1350 00:0640: xx xx                        dw      TxLongX                 ; al,x
  1351 00:0642: xx xx                        dw      TxAbsoluteIndirect      ; (a)
  1352 00:0644: xx xx                        dw      TxAbsoluteXIndirect     ; (a,x)
  1353 00:0646: xx xx                        dw      TxDirect                ; d
  1354 00:0648: xx xx                        dw      TxStack                 ; d,s
  1355 00:064A: xx xx                        dw      TxDirectX               ; d,x
  1356 00:064C: xx xx                        dw      TxDirectY               ; d,y
  1357 00:064E: xx xx                        dw      TxDirectIndirect        ; (d)
  1358 00:0650: xx xx                        dw      TxDirectIndirectLong    ; [d]
  1359 00:0652: xx xx                        dw      TxStackIndirectY        ; (d,s),y
  1360 00:0654: xx xx                        dw      TxDirectXIndirect       ; (d,x)
  1361 00:0656: xx xx                        dw      TxDirectIndirectY       ; (d),y
  Mon Jun 18 2018 10:11                                                                                                    Page 29


  1362 00:0658: xx xx                        dw      TxDirectIndirectLongY   ; [d],y
  1363 00:065A: xx xx                        dw      TxImplied               ;
  1364 00:065C: xx xx                        dw      TxRelative              ; r
  1365 00:065E: xx xx                        dw      TxRelativeLong          ; rl
  1366 00:0660: xx xx                        dw      TxMove                  ; xyc
  1367 00:0662: xx xx                        dw      TxImmediateM            ; # (A & M)
  1368 00:0664: xx xx                        dw      TxImmediateByte         ; # (BRK/COP/WDM)
  1369 00:0666: xx xx                        dw      TxImmediateX            ; # (X or Y)
  1370                        
  1371                        
  1372                        TxAccumulator:
  1373 00:0668: A9 41                        lda     #'A'
  1374 00:066A: 4C xx xx                     jmp     UartTx
  1375                        
  1376                        TxImmediateM:
  1377 00:066D: A9 20                        lda     #M_FLAG
  1378 00:066F: 24 20                        bit     FLAGS
  1379 00:0671: F0 24                        beq     TxImmediateWord
  1380 00:0673: 80 1B                        bra     TxImmediateByte
  1381                        
  1382                        TxImmediateX:
  1383 00:0675: A9 10                        lda     #X_FLAG
  1384 00:0677: 24 20                        bit     FLAGS
  1385 00:0679: F0 1C                        beq     TxImmediateWord
  1386 00:067B: 80 13                        bra     TxImmediateByte
  1387                        
  1388                        TxImplied:
  1389 00:067D: 60                           rts
  1390                        
  1391                        TxMove:
  1392 00:067E: A0 01                        ldy     #1
  1393 00:0680: B7 23                        lda     [ADDR_S],Y
  1394 00:0682: 20 xx xx                     jsr     TxHex2
  1395 00:0685: A9 2C                        lda     #','
  1396 00:0687: 20 xx xx                     jsr     UartTx
  1397 00:068A: C8                           iny
  1398 00:068B: B7 23                        lda     [ADDR_S],Y
  1399 00:068D: 4C xx xx                     jmp     TxHex2
  1400                        
  1401                        TxImmediateByte:
  1402 00:0690: A9 23                        lda     #'#'
  1403 00:0692: 20 xx xx                     jsr     UartTx
  1404 00:0695: 80 14                        bra     TxDirect
  1405                        
  1406                        TxImmediateWord:
  1407 00:0697: A9 23                        lda     #'#'
  1408 00:0699: 20 xx xx                     jsr     UartTx
  1409 00:069C: 80 33                        bra     TxAbsolute
  1410                        
  1411                        TxStack:
  1412 00:069E: 20 xx xx                     jsr     TxDirect
  1413 00:06A1: A9 2C                        lda     #','
  1414 00:06A3: 20 xx xx                     jsr     UartTx
  1415 00:06A6: A9 53                        lda     #'S'
  1416 00:06A8: 4C xx xx                     jmp     UartTx
  1417                        
  1418                        TxDirect:
  1419 00:06AB: A9 24                        lda     #'$'
  Mon Jun 18 2018 10:11                                                                                                    Page 30


  1420 00:06AD: 20 xx xx                     jsr     UartTx
  1421 00:06B0: A0 01                        ldy     #1
  1422 00:06B2: B7 23                        lda     [ADDR_S],Y
  1423 00:06B4: 4C xx xx                     jmp     TxHex2
  1424                        
  1425                        TxDirectX:
  1426 00:06B7: 20 xx xx                     jsr     TxDirect
  1427 00:06BA: A9 2C        TxX:            lda     #','
  1428 00:06BC: 20 xx xx                     jsr     UartTx
  1429 00:06BF: A9 58                        lda     #'X'
  1430 00:06C1: 4C xx xx                     jmp     UartTx
  1431                        
  1432                        TxDirectY:
  1433 00:06C4: 20 xx xx                     jsr     TxDirect
  1434 00:06C7: A9 2C        TxY:            lda     #','
  1435 00:06C9: 20 xx xx                     jsr     UartTx
  1436 00:06CC: A9 59                        lda     #'Y'
  1437 00:06CE: 4C xx xx                     jmp     UartTx
  1438                        
  1439                        TxAbsolute:
  1440 00:06D1: A9 24                        lda     #'$'
  1441 00:06D3: 20 xx xx                     jsr     UartTx
  1442 00:06D6: A0 02                        ldy     #2
  1443 00:06D8: B7 23                        lda     [ADDR_S],Y
  1444 00:06DA: 20 xx xx                     jsr     TxHex2
  1445 00:06DD: 88                           dey
  1446 00:06DE: B7 23                        lda     [ADDR_S],Y
  1447 00:06E0: 4C xx xx                     jmp     TxHex2
  1448                        
  1449                        TxAbsoluteX:
  1450 00:06E3: 20 xx xx                     jsr     TxAbsolute
  1451 00:06E6: 80 D2                        bra     TxX
  1452                        
  1453                        TxAbsoluteY:
  1454 00:06E8: 20 xx xx                     jsr     TxAbsolute
  1455 00:06EB: 80 DA                        bra     TxY
  1456                        
  1457                        TxLong:
  1458 00:06ED: A9 24                        lda     #'$'
  1459 00:06EF: 20 xx xx                     jsr     UartTx
  1460 00:06F2: A0 03                        ldy     #3
  1461 00:06F4: B7 23                        lda     [ADDR_S],Y
  1462 00:06F6: 20 xx xx                     jsr     TxHex2
  1463 00:06F9: A9 3A                        lda     #':'
  1464 00:06FB: 20 xx xx                     jsr     UartTx
  1465 00:06FE: 88                           dey
  1466 00:06FF: B7 23                        lda     [ADDR_S],Y
  1467 00:0701: 20 xx xx                     jsr     TxHex2
  1468 00:0704: 88                           dey
  1469 00:0705: B7 23                        lda     [ADDR_S],Y
  1470 00:0707: 4C xx xx                     jmp     TxHex2
  1471                        
  1472                        TxLongX:
  1473 00:070A: 20 xx xx                     jsr     TxLong
  1474 00:070D: 80 AB                        bra     TxX
  1475                        
  1476                        TxAbsoluteIndirect:
  1477 00:070F: A9 28                        lda     #'('
  Mon Jun 18 2018 10:11                                                                                                    Page 31


  1478 00:0711: 20 xx xx                     jsr     UartTx
  1479 00:0714: 20 xx xx                     jsr     TxAbsolute
  1480 00:0717: A9 29                        lda     #')'
  1481 00:0719: 4C xx xx                     jmp     UartTx
  1482                        
  1483                        TxAbsoluteXIndirect:
  1484 00:071C: A9 28                        lda     #'('
  1485 00:071E: 20 xx xx                     jsr     UartTx
  1486 00:0721: 20 xx xx                     jsr     TxAbsoluteX
  1487 00:0724: A9 29                        lda     #')'
  1488 00:0726: 4C xx xx                     jmp     UartTx
  1489                        
  1490                        TxDirectIndirect:
  1491 00:0729: A9 28                        lda     #'('
  1492 00:072B: 20 xx xx                     jsr     UartTx
  1493 00:072E: 20 xx xx                     jsr     TxDirect
  1494 00:0731: A9 29                        lda     #')'
  1495 00:0733: 4C xx xx                     jmp     UartTx
  1496                        
  1497                        TxDirectXIndirect:
  1498 00:0736: A9 28                        lda     #'('
  1499 00:0738: 20 xx xx                     jsr     UartTx
  1500 00:073B: 20 xx xx                     jsr     TxDirectX
  1501 00:073E: A9 29                        lda     #')'
  1502 00:0740: 4C xx xx                     jmp     UartTx
  1503                        
  1504                        TxDirectIndirectY:
  1505 00:0743: A9 28                        lda     #'('
  1506 00:0745: 20 xx xx                     jsr     UartTx
  1507 00:0748: 20 xx xx                     jsr     TxDirect
  1508 00:074B: A9 29                        lda     #')'
  1509 00:074D: 20 xx xx                     jsr     UartTx
  1510 00:0750: 4C xx xx                     jmp     TxY
  1511                        
  1512                        TxDirectIndirectLong:
  1513 00:0753: A9 5B                        lda     #'['
  1514 00:0755: 20 xx xx                     jsr     UartTx
  1515 00:0758: 20 xx xx                     jsr     TxDirect
  1516 00:075B: A9 5D                        lda     #']'
  1517 00:075D: 4C xx xx                     jmp     UartTx
  1518                        
  1519                        TxDirectIndirectLongY:
  1520 00:0760: 20 xx xx                     jsr     TxDirectIndirectLong
  1521 00:0763: 4C xx xx                     jmp     TxY
  1522                        
  1523                        TxStackIndirectY:
  1524 00:0766: A9 28                        lda     #'('
  1525 00:0768: 20 xx xx                     jsr     UartTx
  1526 00:076B: 20 xx xx                     jsr     TxStack
  1527 00:076E: A9 29                        lda     #')'
  1528 00:0770: 20 xx xx                     jsr     UartTx
  1529 00:0773: 4C xx xx                     jmp     TxY
  1530                        
  1531                        TxRelative:
  1532 00:0776: A6 24                        ldx     ADDR_S+1                ; Work out next PC
  1533 00:0778: A5 23                        lda     ADDR_S+0
  1534 00:077A: 18                           clc
  1535 00:077B: 69 02                        adc     #2
  Mon Jun 18 2018 10:11                                                                                                    Page 32


  1536 00:077D: 90 01                        bcc     $+3
  1537 00:077F: E8                           inx
  1538                        
  1539 00:0780: 48                           pha                             ; Add relative offset
  1540 00:0781: A0 01                        ldy     #1
  1541 00:0783: B7 23                        lda     [ADDR_S],y
  1542 00:0785: 10 01                        bpl     $+3
  1543 00:0787: CA                           dex
  1544 00:0788: 18                           clc
  1545 00:0789: 63 01                        adc     1,s
  1546 00:078B: 83 01                        sta     1,s
  1547 00:078D: 90 01                        bcc     $+3
  1548 00:078F: E8                           inx
  1549 00:0790: 80 15                        bra     TxAddr
  1550                        
  1551                        TxRelativeLong:
  1552 00:0792: A6 24                        ldx     ADDR_S+1                ; Work out next PC
  1553 00:0794: A5 23                        lda     ADDR_S+0
  1554 00:0796: 18                           clc
  1555 00:0797: 69 03                        adc     #3
  1556 00:0799: 90 01                        bcc     $+3
  1557 00:079B: E8                           inx
  1558                        
  1559 00:079C: 18                           clc                             ; Add relative offset
  1560 00:079D: A0 01                        ldy     #1
  1561 00:079F: 77 23                        adc     [ADDR_S],y
  1562 00:07A1: 48                           pha
  1563 00:07A2: C8                           iny
  1564 00:07A3: 8A                           txa
  1565 00:07A4: 77 23                        adc     [ADDR_S],Y
  1566 00:07A6: AA                           tax
  1567                        
  1568                        TxAddr:
  1569 00:07A7: A9 24                        lda     #'$'                    ; Print address
  1570 00:07A9: 20 xx xx                     jsr     UartTx
  1571 00:07AC: 8A                           txa
  1572 00:07AD: 20 xx xx                     jsr     TxHex2
  1573 00:07B0: 68                           pla
  1574 00:07B1: 4C xx xx                     jmp     TxHex2
  1575                        
  1576                        ;  Returns the size of the opcode in A given the current flag settings.
  1577                        
  1578                                        longa   off
  1579                                        longi   off
  1580                        OpcodeSize:
  1581 00:07B4: AA                           tax                             ; Work out addressing mode
  1582 00:07B5: BD xx xx                     lda     MODES,x
  1583 00:07B8: AA                           tax
  1584 00:07B9: 7C xx xx                     jmp     (MODE_SIZE,x)
  1585                        
  1586                        MODE_SIZE:
  1587 00:07BC: xx xx                        dw      Size3                   ; a
  1588 00:07BE: xx xx                        dw      Size1                   ; A
  1589 00:07C0: xx xx                        dw      Size3                   ; a,x
  1590 00:07C2: xx xx                        dw      Size3                   ; a,y
  1591 00:07C4: xx xx                        dw      Size4                   ; al
  1592 00:07C6: xx xx                        dw      Size4                   ; al,x
  1593 00:07C8: xx xx                        dw      Size3                   ; (a)
  Mon Jun 18 2018 10:11                                                                                                    Page 33


  1594 00:07CA: xx xx                        dw      Size3                   ; (a,x)
  1595 00:07CC: xx xx                        dw      Size2                   ; d
  1596 00:07CE: xx xx                        dw      Size2                   ; d,s
  1597 00:07D0: xx xx                        dw      Size2                   ; d,x
  1598 00:07D2: xx xx                        dw      Size2                   ; d,y
  1599 00:07D4: xx xx                        dw      Size2                   ; (d)
  1600 00:07D6: xx xx                        dw      Size2                   ; [d]
  1601 00:07D8: xx xx                        dw      Size2                   ; (d,s),y
  1602 00:07DA: xx xx                        dw      Size2                   ; (d,x)
  1603 00:07DC: xx xx                        dw      Size2                   ; (d),y
  1604 00:07DE: xx xx                        dw      Size2                   ; [d],y
  1605 00:07E0: xx xx                        dw      Size1                   ;
  1606 00:07E2: xx xx                        dw      Size2                   ; r
  1607 00:07E4: xx xx                        dw      Size3                   ; rl
  1608 00:07E6: xx xx                        dw      Size3                   ; xyc
  1609 00:07E8: xx xx                        dw      TestM                   ; # (A & M)
  1610 00:07EA: xx xx                        dw      Size2                   ; # (BRK/COP/WDM)
  1611 00:07EC: xx xx                        dw      TestX                   ; # (X or Y)
  1612                        
  1613                        TestM
  1614 00:07EE: A9 20                        lda     #M_FLAG                 ; Is M bit set?
  1615 00:07F0: 25 20                        and     FLAGS
  1616 00:07F2: F0 10                        beq     Size3                   ; No, word
  1617 00:07F4: 80 0B                        bra     Size2                   ; else byte
  1618                        
  1619                        TestX
  1620 00:07F6: A9 10                        lda     #X_FLAG                 ; Is X bit set?
  1621 00:07F8: 25 20                        and     FLAGS
  1622 00:07FA: F0 08                        beq     Size3                   ; No, word
  1623 00:07FC: 80 03                        bra     Size2                   ; else byte
  1624                        
  1625 00:07FE: A9 01        Size1:          lda     #1
  1626 00:0800: 60                           rts
  1627 00:0801: A9 02        Size2:          lda     #2
  1628 00:0803: 60                           rts
  1629 00:0804: A9 03        Size3           lda     #3
  1630 00:0806: 60                           rts
  1631 00:0807: A9 04        Size4:          lda     #4
  1632 00:0809: 60                           rts
  1633                        
  1634                        OPCODES:
  1635 00:080A: 16 52 28 52                  db      OP_BRK,OP_ORA,OP_COP,OP_ORA     ; 00
  1636 00:080E: A0 52 04 52                  db      OP_TSB,OP_ORA,OP_ASL,OP_ORA
  1637 00:0812: 62 52 04 5E                  db      OP_PHP,OP_ORA,OP_ASL,OP_PHD
  1638 00:0816: A0 52 04 52                  db      OP_TSB,OP_ORA,OP_ASL,OP_ORA
  1639 00:081A: 12 52 52 52                  db      OP_BPL,OP_ORA,OP_ORA,OP_ORA     ; 10
  1640 00:081E: 9E 52 04 52                  db      OP_TRB,OP_ORA,OP_ASL,OP_ORA
  1641 00:0822: 1E 52 36 9A                  db      OP_CLC,OP_ORA,OP_INC,OP_TCS
  1642 00:0826: 9E 52 04 52                  db      OP_TRB,OP_ORA,OP_ASL,OP_ORA
  1643 00:082A: 42 02 40 02                  db      OP_JSR,OP_AND,OP_JSL,OP_AND     ; 20
  1644 00:082E: 0C 02 76 02                  db      OP_BIT,OP_AND,OP_ROL,OP_AND
  1645 00:0832: 6E 02 76 6C                  db      OP_PLP,OP_AND,OP_ROL,OP_PLD
  1646 00:0836: 0C 02 76 02                  db      OP_BIT,OP_AND,OP_ROL,OP_AND
  1647 00:083A: 0E 02 02 02                  db      OP_BMI,OP_AND,OP_AND,OP_AND     ; 30
  1648 00:083E: 0C 02 76 02                  db      OP_BIT,OP_AND,OP_ROL,OP_AND
  1649 00:0842: 82 02 2E A2                  db      OP_SEC,OP_AND,OP_DEC,OP_TSC
  1650 00:0846: 0C 02 76 02                  db      OP_BIT,OP_AND,OP_ROL,OP_AND
  1651 00:084A: 7A 34 B2 34                  db      OP_RTI,OP_EOR,OP_WDM,OP_EOR     ; 40
  Mon Jun 18 2018 10:11                                                                                                    Page 34


  1652 00:084E: 4E 34 4A 34                  db      OP_MVP,OP_EOR,OP_LSR,OP_EOR
  1653 00:0852: 5A 34 4A 60                  db      OP_PHA,OP_EOR,OP_LSR,OP_PHK
  1654 00:0856: 3E 34 4A 34                  db      OP_JMP,OP_EOR,OP_LSR,OP_EOR
  1655 00:085A: 1A 34 34 34                  db      OP_BVC,OP_EOR,OP_EOR,OP_EOR     ; 50
  1656 00:085E: 4C 34 4A 34                  db      OP_MVN,OP_EOR,OP_LSR,OP_EOR
  1657 00:0862: 22 34 66 98                  db      OP_CLI,OP_EOR,OP_PHY,OP_TCD
  1658 00:0866: 3E 34 4A 34                  db      OP_JMP,OP_EOR,OP_LSR,OP_EOR
  1659 00:086A: 7E 00 58 00                  db      OP_RTS,OP_ADC,OP_PER,OP_ADC     ; 60
  1660 00:086E: 92 00 78 00                  db      OP_STZ,OP_ADC,OP_ROR,OP_ADC
  1661 00:0872: 68 00 78 7C                  db      OP_PLA,OP_ADC,OP_ROR,OP_RTL
  1662 00:0876: 3E 00 78 00                  db      OP_JMP,OP_ADC,OP_ROR,OP_ADC
  1663 00:087A: 1C 00 00 00                  db      OP_BVS,OP_ADC,OP_ADC,OP_ADC     ; 70
  1664 00:087E: 92 00 78 00                  db      OP_STZ,OP_ADC,OP_ROR,OP_ADC
  1665 00:0882: 86 00 72 9C                  db      OP_SEI,OP_ADC,OP_PLY,OP_TDC
  1666 00:0886: 3E 00 78 00                  db      OP_JMP,OP_ADC,OP_ROR,OP_ADC
  1667 00:088A: 14 8A 18 8A                  db      OP_BRA,OP_STA,OP_BRL,OP_STA     ; 80
  1668 00:088E: 90 8A 8E 8A                  db      OP_STY,OP_STA,OP_STX,OP_STA
  1669 00:0892: 32 0C A6 5C                  db      OP_DEY,OP_BIT,OP_TXA,OP_PHB
  1670 00:0896: 90 8A 8E 8A                  db      OP_STY,OP_STA,OP_STX,OP_STA
  1671 00:089A: 06 8A 8A 8A                  db      OP_BCC,OP_STA,OP_STA,OP_STA     ; 90
  1672 00:089E: 90 8A 8E 8A                  db      OP_STY,OP_STA,OP_STX,OP_STA
  1673 00:08A2: AC 8A A8 AA                  db      OP_TYA,OP_STA,OP_TXS,OP_TXY
  1674 00:08A6: 92 8A 92 8A                  db      OP_STZ,OP_STA,OP_STZ,OP_STA
  1675 00:08AA: 48 44 46 44                  db      OP_LDY,OP_LDA,OP_LDX,OP_LDA     ; A0
  1676 00:08AE: 48 44 46 44                  db      OP_LDY,OP_LDA,OP_LDX,OP_LDA
  1677 00:08B2: 96 44 94 6A                  db      OP_TAY,OP_LDA,OP_TAX,OP_PLB
  1678 00:08B6: 48 44 46 44                  db      OP_LDY,OP_LDA,OP_LDX,OP_LDA
  1679 00:08BA: 08 44 44 44                  db      OP_BCS,OP_LDA,OP_LDA,OP_LDA     ; B0
  1680 00:08BE: 44 48 46 44                  db      OP_LDA,OP_LDY,OP_LDX,OP_LDA
  1681 00:08C2: 24 44 A4 AE                  db      OP_CLV,OP_LDA,OP_TSX,OP_TYX
  1682 00:08C6: 48 44 46 44                  db      OP_LDY,OP_LDA,OP_LDX,OP_LDA
  1683 00:08CA: 2C 26 74 26                  db      OP_CPY,OP_CMP,OP_REP,OP_CMP     ; C0
  1684 00:08CE: 2C 26 2E 26                  db      OP_CPY,OP_CMP,OP_DEC,OP_CMP
  1685 00:08D2: 3A 26 30 B0                  db      OP_INY,OP_CMP,OP_DEX,OP_WAI
  1686 00:08D6: 2C 26 2E 26                  db      OP_CPY,OP_CMP,OP_DEC,OP_CMP
  1687 00:08DA: 10 26 26 26                  db      OP_BNE,OP_CMP,OP_CMP,OP_CMP     ; D0
  1688 00:08DE: 56 26 2E 26                  db      OP_PEI,OP_CMP,OP_DEC,OP_CMP
  1689 00:08E2: 20 26 64 8C                  db      OP_CLD,OP_CMP,OP_PHX,OP_STP
  1690 00:08E6: 3C 26 2E 26                  db      OP_JML,OP_CMP,OP_DEC,OP_CMP
  1691 00:08EA: 2A 80 88 80                  db      OP_CPX,OP_SBC,OP_SEP,OP_SBC     ; E0
  1692 00:08EE: 2A 80 36 80                  db      OP_CPX,OP_SBC,OP_INC,OP_SBC
  1693 00:08F2: 38 80 50 B4                  db      OP_INX,OP_SBC,OP_NOP,OP_XBA
  1694 00:08F6: 2A 80 36 80                  db      OP_CPX,OP_SBC,OP_INC,OP_SBC
  1695 00:08FA: 0A 80 80 80                  db      OP_BEQ,OP_SBC,OP_SBC,OP_SBC     ; F0
  1696 00:08FE: 54 80 36 80                  db      OP_PEA,OP_SBC,OP_INC,OP_SBC
  1697 00:0902: 84 80 70 B6                  db      OP_SED,OP_SBC,OP_PLX,OP_XCE
  1698 00:0906: 42 80 36 80                  db      OP_JSR,OP_SBC,OP_INC,OP_SBC
  1699                        
  1700                        MODES:
  1701 00:090A: 2E 1E 2E 12                  db      MD_INT,MD_DIX,MD_INT,MD_STK     ; 00
  1702 00:090E: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1703 00:0912: 24 2C 02 24                  db      MD_IMP,MD_IMM,MD_ACC,MD_IMP
  1704 00:0916: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1705 00:091A: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; 10
  1706 00:091E: 10 14 14 22                  db      MD_DPG,MD_DPX,MD_DPX,MD_DLY
  1707 00:0922: 24 06 02 24                  db      MD_IMP,MD_ABY,MD_ACC,MD_IMP
  1708 00:0926: 00 04 04 0A                  db      MD_ABS,MD_ABX,MD_ABX,MD_ALX
  1709 00:092A: 00 1E 08 12                  db      MD_ABS,MD_DIX,MD_ALG,MD_STK     ; 20
  Mon Jun 18 2018 10:11                                                                                                    Page 35


  1710 00:092E: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1711 00:0932: 24 2C 02 24                  db      MD_IMP,MD_IMM,MD_ACC,MD_IMP
  1712 00:0936: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1713 00:093A: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; 30
  1714 00:093E: 14 14 14 22                  db      MD_DPX,MD_DPX,MD_DPX,MD_DLY
  1715 00:0942: 24 06 02 24                  db      MD_IMP,MD_ABY,MD_ACC,MD_IMP
  1716 00:0946: 04 04 04 0A                  db      MD_ABX,MD_ABX,MD_ABX,MD_ALX
  1717 00:094A: 24 1E 2E 12                  db      MD_IMP,MD_DIX,MD_INT,MD_STK     ; 40
  1718 00:094E: 2A 10 10 1A                  db      MD_MOV,MD_DPG,MD_DPG,MD_DLI
  1719 00:0952: 24 2C 02 24                  db      MD_IMP,MD_IMM,MD_ACC,MD_IMP
  1720 00:0956: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1721 00:095A: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; 50
  1722 00:095E: 2A 14 14 22                  db      MD_MOV,MD_DPX,MD_DPX,MD_DLY
  1723 00:0962: 24 06 24 24                  db      MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1724 00:0966: 08 04 04 0A                  db      MD_ALG,MD_ABX,MD_ABX,MD_ALX
  1725 00:096A: 24 1E 24 12                  db      MD_IMP,MD_DIX,MD_IMP,MD_STK     ; 60
  1726 00:096E: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1727 00:0972: 24 2C 02 24                  db      MD_IMP,MD_IMM,MD_ACC,MD_IMP
  1728 00:0976: 0C 00 00 08                  db      MD_AIN,MD_ABS,MD_ABS,MD_ALG
  1729 00:097A: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; 70
  1730 00:097E: 14 14 14 22                  db      MD_DPX,MD_DPX,MD_DPX,MD_DLY
  1731 00:0982: 24 06 24 24                  db      MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1732 00:0986: 0E 04 04 0A                  db      MD_AIX,MD_ABX,MD_ABX,MD_ALX
  1733 00:098A: 26 1E 28 12                  db      MD_REL,MD_DIX,MD_RLG,MD_STK     ; 80
  1734 00:098E: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1735 00:0992: 24 2C 24 24                  db      MD_IMP,MD_IMM,MD_IMP,MD_IMP
  1736 00:0996: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1737 00:099A: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; 90
  1738 00:099E: 14 14 16 22                  db      MD_DPX,MD_DPX,MD_DPY,MD_DLY
  1739 00:09A2: 24 06 24 24                  db      MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1740 00:09A6: 00 04 04 0A                  db      MD_ABS,MD_ABX,MD_ABX,MD_ALX
  1741 00:09AA: 30 1E 30 12                  db      MD_IMX,MD_DIX,MD_IMX,MD_STK     ; A0
  1742 00:09AE: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1743 00:09B2: 24 2C 24 24                  db      MD_IMP,MD_IMM,MD_IMP,MD_IMP
  1744 00:09B6: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1745 00:09BA: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; B0
  1746 00:09BE: 14 14 16 22                  db      MD_DPX,MD_DPX,MD_DPY,MD_DLY
  1747 00:09C2: 24 06 24 24                  db      MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1748 00:09C6: 04 04 06 0A                  db      MD_ABX,MD_ABX,MD_ABY,MD_ALX
  1749 00:09CA: 30 1E 2E 12                  db      MD_IMX,MD_DIX,MD_INT,MD_STK     ; C0
  1750 00:09CE: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1751 00:09D2: 24 2C 24 24                  db      MD_IMP,MD_IMM,MD_IMP,MD_IMP
  1752 00:09D6: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1753 00:09DA: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; D0
  1754 00:09DE: 24 14 14 22                  db      MD_IMP,MD_DPX,MD_DPX,MD_DLY
  1755 00:09E2: 24 06 24 24                  db      MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1756 00:09E6: 0C 04 04 0A                  db      MD_AIN,MD_ABX,MD_ABX,MD_ALX
  1757 00:09EA: 30 1E 2E 12                  db      MD_IMX,MD_DIX,MD_INT,MD_STK     ; E0
  1758 00:09EE: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1759 00:09F2: 24 2C 24 24                  db      MD_IMP,MD_IMM,MD_IMP,MD_IMP
  1760 00:09F6: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1761 00:09FA: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; F0
  1762 00:09FE: 24 14 14 22                  db      MD_IMP,MD_DPX,MD_DPX,MD_DLY
  1763 00:0A02: 24 06 24 24                  db      MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1764 00:0A06: 0E 04 04 0A                  db      MD_AIX,MD_ABX,MD_ABX,MD_ALX
  1765                        
  1766                        MNEMONICS:
  1767                                        MNEM    'A','D','C'
  Mon Jun 18 2018 10:11                                                                                                    Page 36


+ 1767 00:0A0A: 83 04                        dw      (((('A'-'@')<<5)|('D'-'@'))<<5)|('C'-'@')
  1768                                        MNEM    'A','N','D'
+ 1768 00:0A0C: C4 05                        dw      (((('A'-'@')<<5)|('N'-'@'))<<5)|('D'-'@')
  1769                                        MNEM    'A','S','L'
+ 1769 00:0A0E: 6C 06                        dw      (((('A'-'@')<<5)|('S'-'@'))<<5)|('L'-'@')
  1770                                        MNEM    'B','C','C'
+ 1770 00:0A10: 63 08                        dw      (((('B'-'@')<<5)|('C'-'@'))<<5)|('C'-'@')
  1771                                        MNEM    'B','C','S'
+ 1771 00:0A12: 73 08                        dw      (((('B'-'@')<<5)|('C'-'@'))<<5)|('S'-'@')
  1772                                        MNEM    'B','E','Q'
+ 1772 00:0A14: B1 08                        dw      (((('B'-'@')<<5)|('E'-'@'))<<5)|('Q'-'@')
  1773                                        MNEM    'B','I','T'
+ 1773 00:0A16: 34 09                        dw      (((('B'-'@')<<5)|('I'-'@'))<<5)|('T'-'@')
  1774                                        MNEM    'B','M','I'
+ 1774 00:0A18: A9 09                        dw      (((('B'-'@')<<5)|('M'-'@'))<<5)|('I'-'@')
  1775                                        MNEM    'B','N','E'
+ 1775 00:0A1A: C5 09                        dw      (((('B'-'@')<<5)|('N'-'@'))<<5)|('E'-'@')
  1776                                        MNEM    'B','P','L'
+ 1776 00:0A1C: 0C 0A                        dw      (((('B'-'@')<<5)|('P'-'@'))<<5)|('L'-'@')
  1777                                        MNEM    'B','R','A'
+ 1777 00:0A1E: 41 0A                        dw      (((('B'-'@')<<5)|('R'-'@'))<<5)|('A'-'@')
  1778                                        MNEM    'B','R','K'
+ 1778 00:0A20: 4B 0A                        dw      (((('B'-'@')<<5)|('R'-'@'))<<5)|('K'-'@')
  1779                                        MNEM    'B','R','L'
+ 1779 00:0A22: 4C 0A                        dw      (((('B'-'@')<<5)|('R'-'@'))<<5)|('L'-'@')
  1780                                        MNEM    'B','V','C'
+ 1780 00:0A24: C3 0A                        dw      (((('B'-'@')<<5)|('V'-'@'))<<5)|('C'-'@')
  1781                                        MNEM    'B','V','S'
+ 1781 00:0A26: D3 0A                        dw      (((('B'-'@')<<5)|('V'-'@'))<<5)|('S'-'@')
  1782                                        MNEM    'C','L','C'
+ 1782 00:0A28: 83 0D                        dw      (((('C'-'@')<<5)|('L'-'@'))<<5)|('C'-'@')
  1783                                        MNEM    'C','L','D'
+ 1783 00:0A2A: 84 0D                        dw      (((('C'-'@')<<5)|('L'-'@'))<<5)|('D'-'@')
  1784                                        MNEM    'C','L','I'
+ 1784 00:0A2C: 89 0D                        dw      (((('C'-'@')<<5)|('L'-'@'))<<5)|('I'-'@')
  1785                                        MNEM    'C','L','V'
+ 1785 00:0A2E: 96 0D                        dw      (((('C'-'@')<<5)|('L'-'@'))<<5)|('V'-'@')
  1786                                        MNEM    'C','M','P'
+ 1786 00:0A30: B0 0D                        dw      (((('C'-'@')<<5)|('M'-'@'))<<5)|('P'-'@')
  1787                                        MNEM    'C','O','P'
+ 1787 00:0A32: F0 0D                        dw      (((('C'-'@')<<5)|('O'-'@'))<<5)|('P'-'@')
  1788                                        MNEM    'C','P','X'
+ 1788 00:0A34: 18 0E                        dw      (((('C'-'@')<<5)|('P'-'@'))<<5)|('X'-'@')
  1789                                        MNEM    'C','P','Y'
+ 1789 00:0A36: 19 0E                        dw      (((('C'-'@')<<5)|('P'-'@'))<<5)|('Y'-'@')
  1790                                        MNEM    'D','E','C'
+ 1790 00:0A38: A3 10                        dw      (((('D'-'@')<<5)|('E'-'@'))<<5)|('C'-'@')
  1791                                        MNEM    'D','E','X'
+ 1791 00:0A3A: B8 10                        dw      (((('D'-'@')<<5)|('E'-'@'))<<5)|('X'-'@')
  1792                                        MNEM    'D','E','Y'
+ 1792 00:0A3C: B9 10                        dw      (((('D'-'@')<<5)|('E'-'@'))<<5)|('Y'-'@')
  1793                                        MNEM    'E','O','R'
+ 1793 00:0A3E: F2 15                        dw      (((('E'-'@')<<5)|('O'-'@'))<<5)|('R'-'@')
  1794                                        MNEM    'I','N','C'
+ 1794 00:0A40: C3 25                        dw      (((('I'-'@')<<5)|('N'-'@'))<<5)|('C'-'@')
  1795                                        MNEM    'I','N','X'
+ 1795 00:0A42: D8 25                        dw      (((('I'-'@')<<5)|('N'-'@'))<<5)|('X'-'@')
  1796                                        MNEM    'I','N','Y'
  Mon Jun 18 2018 10:11                                                                                                    Page 37


+ 1796 00:0A44: D9 25                        dw      (((('I'-'@')<<5)|('N'-'@'))<<5)|('Y'-'@')
  1797                                        MNEM    'J','M','L'
+ 1797 00:0A46: AC 29                        dw      (((('J'-'@')<<5)|('M'-'@'))<<5)|('L'-'@')
  1798                                        MNEM    'J','M','P'
+ 1798 00:0A48: B0 29                        dw      (((('J'-'@')<<5)|('M'-'@'))<<5)|('P'-'@')
  1799                                        MNEM    'J','S','L'
+ 1799 00:0A4A: 6C 2A                        dw      (((('J'-'@')<<5)|('S'-'@'))<<5)|('L'-'@')
  1800                                        MNEM    'J','S','R'
+ 1800 00:0A4C: 72 2A                        dw      (((('J'-'@')<<5)|('S'-'@'))<<5)|('R'-'@')
  1801                                        MNEM    'L','D','A'
+ 1801 00:0A4E: 81 30                        dw      (((('L'-'@')<<5)|('D'-'@'))<<5)|('A'-'@')
  1802                                        MNEM    'L','D','X'
+ 1802 00:0A50: 98 30                        dw      (((('L'-'@')<<5)|('D'-'@'))<<5)|('X'-'@')
  1803                                        MNEM    'L','D','Y'
+ 1803 00:0A52: 99 30                        dw      (((('L'-'@')<<5)|('D'-'@'))<<5)|('Y'-'@')
  1804                                        MNEM    'L','S','R'
+ 1804 00:0A54: 72 32                        dw      (((('L'-'@')<<5)|('S'-'@'))<<5)|('R'-'@')
  1805                                        MNEM    'M','V','N'
+ 1805 00:0A56: CE 36                        dw      (((('M'-'@')<<5)|('V'-'@'))<<5)|('N'-'@')
  1806                                        MNEM    'M','V','P'
+ 1806 00:0A58: D0 36                        dw      (((('M'-'@')<<5)|('V'-'@'))<<5)|('P'-'@')
  1807                                        MNEM    'N','O','P'
+ 1807 00:0A5A: F0 39                        dw      (((('N'-'@')<<5)|('O'-'@'))<<5)|('P'-'@')
  1808                                        MNEM    'O','R','A'
+ 1808 00:0A5C: 41 3E                        dw      (((('O'-'@')<<5)|('R'-'@'))<<5)|('A'-'@')
  1809                                        MNEM    'P','E','A'
+ 1809 00:0A5E: A1 40                        dw      (((('P'-'@')<<5)|('E'-'@'))<<5)|('A'-'@')
  1810                                        MNEM    'P','E','I'
+ 1810 00:0A60: A9 40                        dw      (((('P'-'@')<<5)|('E'-'@'))<<5)|('I'-'@')
  1811                                        MNEM    'P','E','R'
+ 1811 00:0A62: B2 40                        dw      (((('P'-'@')<<5)|('E'-'@'))<<5)|('R'-'@')
  1812                                        MNEM    'P','H','A'
+ 1812 00:0A64: 01 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('A'-'@')
  1813                                        MNEM    'P','H','B'
+ 1813 00:0A66: 02 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('B'-'@')
  1814                                        MNEM    'P','H','D'
+ 1814 00:0A68: 04 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('D'-'@')
  1815                                        MNEM    'P','H','K'
+ 1815 00:0A6A: 0B 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('K'-'@')
  1816                                        MNEM    'P','H','P'
+ 1816 00:0A6C: 10 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('P'-'@')
  1817                                        MNEM    'P','H','X'
+ 1817 00:0A6E: 18 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('X'-'@')
  1818                                        MNEM    'P','H','Y'
+ 1818 00:0A70: 19 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('Y'-'@')
  1819                                        MNEM    'P','L','A'
+ 1819 00:0A72: 81 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('A'-'@')
  1820                                        MNEM    'P','L','B'
+ 1820 00:0A74: 82 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('B'-'@')
  1821                                        MNEM    'P','L','D'
+ 1821 00:0A76: 84 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('D'-'@')
  1822                                        MNEM    'P','L','P'
+ 1822 00:0A78: 90 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('P'-'@')
  1823                                        MNEM    'P','L','X'
+ 1823 00:0A7A: 98 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('X'-'@')
  1824                                        MNEM    'P','L','Y'
+ 1824 00:0A7C: 99 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('Y'-'@')
  1825                                        MNEM    'R','E','P'
  Mon Jun 18 2018 10:11                                                                                                    Page 38


+ 1825 00:0A7E: B0 48                        dw      (((('R'-'@')<<5)|('E'-'@'))<<5)|('P'-'@')
  1826                                        MNEM    'R','O','L'
+ 1826 00:0A80: EC 49                        dw      (((('R'-'@')<<5)|('O'-'@'))<<5)|('L'-'@')
  1827                                        MNEM    'R','O','R'
+ 1827 00:0A82: F2 49                        dw      (((('R'-'@')<<5)|('O'-'@'))<<5)|('R'-'@')
  1828                                        MNEM    'R','T','I'
+ 1828 00:0A84: 89 4A                        dw      (((('R'-'@')<<5)|('T'-'@'))<<5)|('I'-'@')
  1829                                        MNEM    'R','T','L'
+ 1829 00:0A86: 8C 4A                        dw      (((('R'-'@')<<5)|('T'-'@'))<<5)|('L'-'@')
  1830                                        MNEM    'R','T','S'
+ 1830 00:0A88: 93 4A                        dw      (((('R'-'@')<<5)|('T'-'@'))<<5)|('S'-'@')
  1831                                        MNEM    'S','B','C'
+ 1831 00:0A8A: 43 4C                        dw      (((('S'-'@')<<5)|('B'-'@'))<<5)|('C'-'@')
  1832                                        MNEM    'S','E','C'
+ 1832 00:0A8C: A3 4C                        dw      (((('S'-'@')<<5)|('E'-'@'))<<5)|('C'-'@')
  1833                                        MNEM    'S','E','D'
+ 1833 00:0A8E: A4 4C                        dw      (((('S'-'@')<<5)|('E'-'@'))<<5)|('D'-'@')
  1834                                        MNEM    'S','E','I'
+ 1834 00:0A90: A9 4C                        dw      (((('S'-'@')<<5)|('E'-'@'))<<5)|('I'-'@')
  1835                                        MNEM    'S','E','P'
+ 1835 00:0A92: B0 4C                        dw      (((('S'-'@')<<5)|('E'-'@'))<<5)|('P'-'@')
  1836                                        MNEM    'S','T','A'
+ 1836 00:0A94: 81 4E                        dw      (((('S'-'@')<<5)|('T'-'@'))<<5)|('A'-'@')
  1837                                        MNEM    'S','T','P'
+ 1837 00:0A96: 90 4E                        dw      (((('S'-'@')<<5)|('T'-'@'))<<5)|('P'-'@')
  1838                                        MNEM    'S','T','X'
+ 1838 00:0A98: 98 4E                        dw      (((('S'-'@')<<5)|('T'-'@'))<<5)|('X'-'@')
  1839                                        MNEM    'S','T','Y'
+ 1839 00:0A9A: 99 4E                        dw      (((('S'-'@')<<5)|('T'-'@'))<<5)|('Y'-'@')
  1840                                        MNEM    'S','T','Z'
+ 1840 00:0A9C: 9A 4E                        dw      (((('S'-'@')<<5)|('T'-'@'))<<5)|('Z'-'@')
  1841                                        MNEM    'T','A','X'
+ 1841 00:0A9E: 38 50                        dw      (((('T'-'@')<<5)|('A'-'@'))<<5)|('X'-'@')
  1842                                        MNEM    'T','A','Y'
+ 1842 00:0AA0: 39 50                        dw      (((('T'-'@')<<5)|('A'-'@'))<<5)|('Y'-'@')
  1843                                        MNEM    'T','C','D'
+ 1843 00:0AA2: 64 50                        dw      (((('T'-'@')<<5)|('C'-'@'))<<5)|('D'-'@')
  1844                                        MNEM    'T','C','S'
+ 1844 00:0AA4: 73 50                        dw      (((('T'-'@')<<5)|('C'-'@'))<<5)|('S'-'@')
  1845                                        MNEM    'T','D','C'
+ 1845 00:0AA6: 83 50                        dw      (((('T'-'@')<<5)|('D'-'@'))<<5)|('C'-'@')
  1846                                        MNEM    'T','R','B'
+ 1846 00:0AA8: 42 52                        dw      (((('T'-'@')<<5)|('R'-'@'))<<5)|('B'-'@')
  1847                                        MNEM    'T','S','B'
+ 1847 00:0AAA: 62 52                        dw      (((('T'-'@')<<5)|('S'-'@'))<<5)|('B'-'@')
  1848                                        MNEM    'T','S','C'
+ 1848 00:0AAC: 63 52                        dw      (((('T'-'@')<<5)|('S'-'@'))<<5)|('C'-'@')
  1849                                        MNEM    'T','S','X'
+ 1849 00:0AAE: 78 52                        dw      (((('T'-'@')<<5)|('S'-'@'))<<5)|('X'-'@')
  1850                                        MNEM    'T','X','A'
+ 1850 00:0AB0: 01 53                        dw      (((('T'-'@')<<5)|('X'-'@'))<<5)|('A'-'@')
  1851                                        MNEM    'T','X','S'
+ 1851 00:0AB2: 13 53                        dw      (((('T'-'@')<<5)|('X'-'@'))<<5)|('S'-'@')
  1852                                        MNEM    'T','X','Y'
+ 1852 00:0AB4: 19 53                        dw      (((('T'-'@')<<5)|('X'-'@'))<<5)|('Y'-'@')
  1853                                        MNEM    'T','Y','A'
+ 1853 00:0AB6: 21 53                        dw      (((('T'-'@')<<5)|('Y'-'@'))<<5)|('A'-'@')
  1854                                        MNEM    'T','Y','X'
  Mon Jun 18 2018 10:11                                                                                                    Page 39


+ 1854 00:0AB8: 38 53                        dw      (((('T'-'@')<<5)|('Y'-'@'))<<5)|('X'-'@')
  1855                                        MNEM    'W','A','I'
+ 1855 00:0ABA: 29 5C                        dw      (((('W'-'@')<<5)|('A'-'@'))<<5)|('I'-'@')
  1856                                        MNEM    'W','D','M'
+ 1856 00:0ABC: 8D 5C                        dw      (((('W'-'@')<<5)|('D'-'@'))<<5)|('M'-'@')
  1857                                        MNEM    'X','B','A'
+ 1857 00:0ABE: 41 60                        dw      (((('X'-'@')<<5)|('B'-'@'))<<5)|('A'-'@')
  1858                                        MNEM    'X','C','E'
+ 1858 00:0AC0: 65 60                        dw      (((('X'-'@')<<5)|('C'-'@'))<<5)|('E'-'@')
  1859                        
  1860                        ;===============================================================================
  1861                        ; String Literals
  1862                        ;-------------------------------------------------------------------------------
  1863                        
  1864 00:0AC2: 0D 0A        TITLE           db      CR,LF
  1865                                        ifdef   W65C816SXB
  1866                                        db      "W65C816SXB"
  1867                                        endif
  1868                                        ifdef   W65C265SXB
  1869 00:0AC4: 57 36 35 43                  db      "W65C265SXB"
       00:0AC8: 32 36 35 53 
       00:0ACC: 58 42 
  1870                                        endif
  1871 00:0ACE: 2D 48 61 63                  db      "-Hacker [16.01]",0
       00:0AD2: 6B 65 72 20 
       00:0AD6: 5B 31 36 2E 
       00:0ADA: 30 31 5D 00 
  1872                        
  1873 00:0ADE: 0D 0A 45 72  ERROR           db      CR,LF,"Error - Type ? for help",0
       00:0AE2: 72 6F 72 20 
       00:0AE6: 2D 20 54 79 
       00:0AEA: 70 65 20 3F 
       00:0AEE: 20 66 6F 72 
       00:0AF2: 20 68 65 6C 
       00:0AF6: 70 00 
  1874                        
  1875 00:0AF8: 0D 0A 45 72  ERASE_FAILED    db      CR,LF,"Erase failed",0
       00:0AFC: 61 73 65 20 
       00:0B00: 66 61 69 6C 
       00:0B04: 65 64 00 
  1876 00:0B07: 0D 0A 57 72  WRITE_FAILED    db      CR,LF,"Write failed",0
       00:0B0B: 69 74 65 20 
       00:0B0F: 66 61 69 6C 
       00:0B13: 65 64 00 
  1877 00:0B16: 0D 0A 57 44  NOT_SAFE        db      CR,LF,"WDC ROM Bank Selected",0
       00:0B1A: 43 20 52 4F 
       00:0B1E: 4D 20 42 61 
       00:0B22: 6E 6B 20 53 
       00:0B26: 65 6C 65 63 
       00:0B2A: 74 65 64 00 
  1878 00:0B2E: 0D 0A 49 6E  INVALID_S19     db      CR,LF,"Invalid S19 record",0
       00:0B32: 76 61 6C 69 
       00:0B36: 64 20 53 31 
       00:0B3A: 39 20 72 65 
       00:0B3E: 63 6F 72 64 
       00:0B42: 00 
  1879                        
  1880 00:0B43: 0D 0A 57 61  WAITING         db      CR,LF,"Waiting for XMODEM transfer to start",0
  Mon Jun 18 2018 10:11                                                                                                    Page 40


       00:0B47: 69 74 69 6E 
       00:0B4B: 67 20 66 6F 
       00:0B4F: 72 20 58 4D 
       00:0B53: 4F 44 45 4D 
       00:0B57: 20 74 72 61 
       00:0B5B: 6E 73 66 65 
       00:0B5F: 72 20 74 6F 
       00:0B63: 20 73 74 61 
       00:0B67: 72 74 00 
  1881 00:0B6A: 0D 0A 54 69  TIMEOUT         db      CR,LF,"Timeout",0
       00:0B6E: 6D 65 6F 75 
       00:0B72: 74 00 
  1882                        
  1883 00:0B74: 0D 0A 42 20  HELP            db      CR,LF,"B bb           - Set memory bank"
       00:0B78: 62 62 20 20 
       00:0B7C: 20 20 20 20 
       00:0B80: 20 20 20 20 
       00:0B84: 20 2D 20 53 
       00:0B88: 65 74 20 6D 
       00:0B8C: 65 6D 6F 72 
       00:0B90: 79 20 62 61 
       00:0B94: 6E 6B 
  1884 00:0B96: 0D 0A 44 20                  db      CR,LF,"D ssss eeee    - Disassemble memory in current bank"
       00:0B9A: 73 73 73 73 
       00:0B9E: 20 65 65 65 
       00:0BA2: 65 20 20 20 
       00:0BA6: 20 2D 20 44 
       00:0BAA: 69 73 61 73 
       00:0BAE: 73 65 6D 62 
       00:0BB2: 6C 65 20 6D 
       00:0BB6: 65 6D 6F 72 
       00:0BBA: 79 20 69 6E 
       00:0BBE: 20 63 75 72 
       00:0BC2: 72 65 6E 74 
       00:0BC6: 20 62 61 6E 
       00:0BCA: 6B 
  1885 00:0BCB: 0D 0A 45 20                  db      CR,LF,"E              - Erase ROM area"
       00:0BCF: 20 20 20 20 
       00:0BD3: 20 20 20 20 
       00:0BD7: 20 20 20 20 
       00:0BDB: 20 2D 20 45 
       00:0BDF: 72 61 73 65 
       00:0BE3: 20 52 4F 4D 
       00:0BE7: 20 61 72 65 
       00:0BEB: 61 
  1886                                        ifdef   W65C265SXB
  1887 00:0BEC: 0D 0A 46 20                  db      CR,LF,"F 0-1          - Disable/Enable WDC ROM"
       00:0BF0: 30 2D 31 20 
       00:0BF4: 20 20 20 20 
       00:0BF8: 20 20 20 20 
       00:0BFC: 20 2D 20 44 
       00:0C00: 69 73 61 62 
       00:0C04: 6C 65 2F 45 
       00:0C08: 6E 61 62 6C 
       00:0C0C: 65 20 57 44 
       00:0C10: 43 20 52 4F 
       00:0C14: 4D 
  1888 00:0C15: 0D 0A 48 20                  db      CR,LF,"H              - Hunt for RAM"
  Mon Jun 18 2018 10:11                                                                                                    Page 41


       00:0C19: 20 20 20 20 
       00:0C1D: 20 20 20 20 
       00:0C21: 20 20 20 20 
       00:0C25: 20 2D 20 48 
       00:0C29: 75 6E 74 20 
       00:0C2D: 66 6F 72 20 
       00:0C31: 52 41 4D 
  1889                                        endif
  1890 00:0C34: 0D 0A 47 20                  db      CR,LF,"G [xxxx]       - Run from bb:xxxx or invoke reset vector"
       00:0C38: 5B 78 78 78 
       00:0C3C: 78 5D 20 20 
       00:0C40: 20 20 20 20 
       00:0C44: 20 2D 20 52 
       00:0C48: 75 6E 20 66 
       00:0C4C: 72 6F 6D 20 
       00:0C50: 62 62 3A 78 
       00:0C54: 78 78 78 20 
       00:0C58: 6F 72 20 69 
       00:0C5C: 6E 76 6F 6B 
       00:0C60: 65 20 72 65 
       00:0C64: 73 65 74 20 
       00:0C68: 76 65 63 74 
       00:0C6C: 6F 72 
  1891 00:0C6E: 0D 0A 4D 20                  db      CR,LF,"M ssss eeee    - Display memory in current bank"
       00:0C72: 73 73 73 73 
       00:0C76: 20 65 65 65 
       00:0C7A: 65 20 20 20 
       00:0C7E: 20 2D 20 44 
       00:0C82: 69 73 70 6C 
       00:0C86: 61 79 20 6D 
       00:0C8A: 65 6D 6F 72 
       00:0C8E: 79 20 69 6E 
       00:0C92: 20 63 75 72 
       00:0C96: 72 65 6E 74 
       00:0C9A: 20 62 61 6E 
       00:0C9E: 6B 
  1892 00:0C9F: 0D 0A 52 20                  db      CR,LF,"R 0-3          - Select ROM bank 0-3"
       00:0CA3: 30 2D 33 20 
       00:0CA7: 20 20 20 20 
       00:0CAB: 20 20 20 20 
       00:0CAF: 20 2D 20 53 
       00:0CB3: 65 6C 65 63 
       00:0CB7: 74 20 52 4F 
       00:0CBB: 4D 20 62 61 
       00:0CBF: 6E 6B 20 30 
       00:0CC3: 2D 33 
  1893 00:0CC5: 0D 0A 53 2E                  db      CR,LF,"S...           - Process S19 record"
       00:0CC9: 2E 2E 20 20 
       00:0CCD: 20 20 20 20 
       00:0CD1: 20 20 20 20 
       00:0CD5: 20 2D 20 50 
       00:0CD9: 72 6F 63 65 
       00:0CDD: 73 73 20 53 
       00:0CE1: 31 39 20 72 
       00:0CE5: 65 63 6F 72 
       00:0CE9: 64 
  1894 00:0CEA: 0D 0A 57 20                  db      CR,LF,"W xxxx yy      - Set memory at xxxx to yy"
       00:0CEE: 78 78 78 78 
  Mon Jun 18 2018 10:11                                                                                                    Page 42


       00:0CF2: 20 79 79 20 
       00:0CF6: 20 20 20 20 
       00:0CFA: 20 2D 20 53 
       00:0CFE: 65 74 20 6D 
       00:0D02: 65 6D 6F 72 
       00:0D06: 79 20 61 74 
       00:0D0A: 20 78 78 78 
       00:0D0E: 78 20 74 6F 
       00:0D12: 20 79 79 
  1895 00:0D15: 0D 0A 58 20                  db      CR,LF,"X xxxx         - XMODEM receive to bb:xxxx"
       00:0D19: 78 78 78 78 
       00:0D1D: 20 20 20 20 
       00:0D21: 20 20 20 20 
       00:0D25: 20 2D 20 58 
       00:0D29: 4D 4F 44 45 
       00:0D2D: 4D 20 72 65 
       00:0D31: 63 65 69 76 
       00:0D35: 65 20 74 6F 
       00:0D39: 20 62 62 3A 
       00:0D3D: 78 78 78 78 
  1896 00:0D41: 00                           db      0
  1897                        
  1898                                        end


      Lines assembled: 2247
      Errors: 0
