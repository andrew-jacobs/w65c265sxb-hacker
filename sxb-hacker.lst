  Sat Jan 23 2016 14:15                                                                                                    Page 1


                                               ***************************************
                                               **      WDC 65C816 Macro Assembler   **
                                               **                                   **
                                               **     Version 3.49.1- Feb  6 2006    **
                                               ***************************************

     1                        ;===============================================================================
     2                        ;  ______  ______        _   _            _
     3                        ; / ___\ \/ / __ )      | | | | __ _  ___| | _____ _ __
     4                        ; \___ \\  /|  _ \ _____| |_| |/ _` |/ __| |/ / _ \ '__|
     5                        ;  ___) /  \| |_) |_____|  _  | (_| | (__|   <  __/ |
     6                        ; |____/_/\_\____/      |_| |_|\__,_|\___|_|\_\___|_|
     7                        ;
     8                        ; A program for Hacking your W65C265SXB or W65C816SXB
     9                        ;-------------------------------------------------------------------------------
    10                        ; Copyright (C)2015 Andrew Jacobs
    11                        ; All rights reserved.
    12                        ;
    13                        ; This work is made available under the terms of the Creative Commons
    14                        ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
    15                        ; following URL to see the details.
    16                        ;
    17                        ; http://creativecommons.org/licenses/by-nc-sa/4.0/
    18                        ;
    19                        ;===============================================================================
    20                        ; Notes:
    21                        ;
    22                        ; This program provides a simple monitor that you can use to inspect the memory
    23                        ; in your SXB and reprogram parts of the flash ROM.
    24                        ;
    25                        ;-------------------------------------------------------------------------------
    26                        
    27                                        pw      132
    28                                        inclist on
    29                        
    30                                        chip    65816
    31                        
    32                                        ifdef   W65C265SXB
    33                                        include "w65c265.inc"
     1                        ;===============================================================================
     2                        ; __        ____  ____   ____ ____   __  ____
     3                        ; \ \      / / /_| ___| / ___|___ \ / /_| ___|
     4                        ;  \ \ /\ / / '_ \___ \| |     __) | '_ \___ \
     5                        ;   \ V  V /| (_) |__) | |___ / __/| (_) |__) |
     6                        ;    \_/\_/  \___/____/ \____|_____|\___/____/
     7                        ;
     8                        ; Western Design Center W65C265 device definitions
     9                        ;-------------------------------------------------------------------------------
    10                        ; Copyright (C)2015 HandCoded Software Ltd.
    11                        ; All rights reserved.
    12                        ;
    13                        ; This work is made available under the terms of the Creative Commons
    14                        ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
    15                        ; following URL to see the details.
    16                        ;
    17                        ; http://creativecommons.org/licenses/by-nc-sa/4.0/
    18                        ;
    19                        ;===============================================================================
  Sat Jan 23 2016 14:15                                                                                                    Page 2


    20                        ; Notes:
    21                        ;
    22                        ; Various macros and definitions for the W65C265 microcontroller.
    23                        ;
    24                        ;===============================================================================
    25                        ; Revision History:
    26                        ;
    27                        ; 2015-12-18 AJ Initial version
    28                        ;-------------------------------------------------------------------------------
    29                        ; $Id$
    30                        ;-------------------------------------------------------------------------------
    31                        
    32                        ;===============================================================================
    33                        ; Hardware Registers
    34                        ;-------------------------------------------------------------------------------
    35                        
    36                        ;00DF00-1F CS0 Port Replacement & Expansion uninitialized
    37                        
    38             0000DF00   PD0             equ     $00DF00         ; Port 0 Data Register
    39             0000DF01   PD1             equ     $00DF01         ; Port 1 Data Register
    40             0000DF02   PD2             equ     $00DF02         ; Port 2 Data Register
    41             0000DF03   PD3             equ     $00DF03         ; Port 3 Data Register
    42             0000DF04   PDD0            equ     $00DF04         ; Port 0 Data Direction Register
    43             0000DF05   PDD1            equ     $00DF05         ; Port 1 Data Direction Register
    44             0000DF06   PDD2            equ     $00DF06         ; Port 2 Data Direction Register
    45             0000DF07   PDD3            equ     $00DF07         ; Port 3 Data Direction Register
    46                        
    47             0000DF20   PD4             equ     $00DF20         ; Port 4 Data Register
    48             0000DF21   PD5             equ     $00DF21         ; Port 5 Data Register
    49             0000DF22   PD6             equ     $00DF22         ; Port 6 Data Register
    50             0000DF23   PD7             equ     $00DF23         ; Port 7 Data Register
    51             0000DF24   PDD4            equ     $00DF24         ; Port 4 Data Direction Register
    52             0000DF25   PDD5            equ     $00DF25         ; Port 5 Data Direction Register
    53             0000DF26   PDD6            equ     $00DF26         ; Port 6 Data Direction Register
    54             0000DF27   PCS7            equ     $00DF27         ; Port 7 Chip Select
    55                        
    56                        ;00DF28-3F --- Reserved uninitialized
    57                        
    58             0000DF40   BCR             equ     $00DF40         ; Bus Control Register
    59             0000DF41   SSCR            equ     $00DF41         ; System Speed Control Register
    60             0000DF42   TCR             equ     $00DF42         ; Timer Control Register
    61             0000DF43   TER             equ     $00DF43         ; Timer Enable Register
    62             0000DF44   TIFR            equ     $00DF44         ; Timer Interrupt Flag Register
    63             0000DF45   EIFR            equ     $00DF45         ; Edge Interrupt Flag Register
    64             0000DF46   TIER            equ     $00DF46         ; Timer Interrupt Enable Register
    65             0000DF47   EIER            equ     $00DF47         ; Edge Interrupt Enable Register
    66             0000DF48   UIFR            equ     $00DF48         ; UART Interrupt Flag Register
    67             0000DF49   UIER            equ     $00DF49         ; UART Interrupt Enable Register
    68                        
    69             0000DF50   T0LL            equ     $00DF50         ; Timer 0 Latch Low
    70             0000DF51   T0LH            equ     $00DF51         ; Timer 0 Latch High
    71             0000DF52   T1LL            equ     $00DF52         ; Timer 1 Latch Low
    72             0000DF53   T1LH            equ     $00DF53         ; Timer 1 Latch High
    73             0000DF54   T2LL            equ     $00DF54         ; Timer 2 Latch Low
    74             0000DF55   T2LH            equ     $00DF55         ; Timer 2 Latch High
    75             0000DF56   T3LL            equ     $00DF56         ; Timer 3 Latch Low
    76             0000DF57   T3LH            equ     $00DF57         ; Timer 3 Latch High
    77             0000DF58   T4LL            equ     $00DF58         ; Timer 4 Latch Low
  Sat Jan 23 2016 14:15                                                                                                    Page 3


    78             0000DF59   T4LH            equ     $00DF59         ; Timer 4 Latch High
    79             0000DF5A   T5LL            equ     $00DF5A         ; Timer 5 Latch Low
    80             0000DF5B   T5LH            equ     $00DF5B         ; Timer 5 Latch High
    81             0000DF5C   T6LL            equ     $00DF5C         ; Timer 6 Latch Low
    82             0000DF5D   T6LH            equ     $00DF5D         ; Timer 6 Latch High
    83             0000DF5E   T7LL            equ     $00DF5E         ; Timer 7 Latch Low
    84             0000DF5F   T7LH            equ     $00DF5F         ; Timer 7 Latch High
    85             0000DF60   T0CL            equ     $00DF60         ; Timer 0 Counter Low
    86             0000DF61   T0CH            equ     $00DF61         ; Timer 0 Counter High
    87             0000DF62   T1CL            equ     $00DF62         ; Timer 1 Counter Low
    88             0000DF63   T1CH            equ     $00DF63         ; Timer 1 Counter High
    89             0000DF64   T2CL            equ     $00DF64         ; Timer 2 Counter Low
    90             0000DF65   T2CH            equ     $00DF65         ; Timer 2 Counter High
    91             0000DF66   T3CL            equ     $00DF66         ; Timer 3 Counter Low
    92             0000DF67   T3CH            equ     $00DF67         ; Timer 3 Counter High
    93             0000DF68   T4CL            equ     $00DF68         ; Timer 4 Counter Low
    94             0000DF69   T4CH            equ     $00DF69         ; Timer 4 Counter High
    95             0000DF6A   T5CL            equ     $00DF6A         ; Timer 5 Counter Low
    96             0000DF6B   T5CH            equ     $00DF6B         ; Timer 5 Counter High
    97             0000DF6C   T6CL            equ     $00DF6C         ; Timer 6 Counter Low
    98             0000DF6D   T6CH            equ     $00DF6D         ; Timer 6 Counter High
    99             0000DF6E   T7CL            equ     $00DF6E         ; Timer 7 Counter Low
   100             0000DF6F   T7CH            equ     $00DF6F         ; Timer 7 Counter High
   101                        
   102                        ;00DFC0-FF CS1 COProcessor Expansion uninitialized
   103                        
   104             0000DF70   ACSR0           equ     $00DF70         ; UART 0 Control/Status Register
   105             0000DF71   ARTD0           equ     $00DF71         ; UART 0 Data Register
   106             0000DF72   ACSR1           equ     $00DF72         ; UART 1 Control/Status Register
   107             0000DF73   ARTD1           equ     $00DF73         ; UART 1 Data Register
   108             0000DF74   ACSR2           equ     $00DF74         ; UART 2 Control/Status Register
   109             0000DF75   ARTD2           equ     $00DF75         ; UART 2 Data Register
   110             0000DF76   ACSR3           equ     $00DF76         ; UART 3 Control/Status Register
   111             0000DF77   ARTD3           equ     $00DF77         ; UART 3 Data Register
   112             0000DF78   PIBFR           equ     $00DF78         ; Parallel Interface Flag Register
   113             0000DF79   PIBER           equ     $00DF79         ; Parallel Interface Enable Register
   114             0000DF7A   PIR2            equ     $00DF7A         ; Parallel Interface Register 2
   115             0000DF7B   PIR3            equ     $00DF7B         ; Parallel Interface Register 3
   116             0000DF7C   PIR4            equ     $00DF7C         ; Parallel Interface Register 4
   117             0000DF7D   PIR5            equ     $00DF7D         ; Parallel Interface Register 5
   118             0000DF7E   PIR6            equ     $00DF7E         ; Parallel Interface Register 6
   119             0000DF7F   PIR7            equ     $00DF7F         ; Parallel Interface Register 7
   120                        
   121                        ;00DF80-BF RAM RAM Registers uninitialized
   122                        
   123                                        include "w65c816.inc"
     1                        ;==============================================================================
     2                        ; __        ____  ____   ____ ___  _  __   
     3                        ; \ \      / / /_| ___| / ___( _ )/ |/ /_  
     4                        ;  \ \ /\ / / '_ \___ \| |   / _ \| | '_ \ 
     5                        ;   \ V  V /| (_) |__) | |__| (_) | | (_) |
     6                        ;    \_/\_/  \___/____/ \____\___/|_|\___/ 
     7                        ;
     8                        ; Western Design Center W65C816 device definitions                                          
     9                        ;------------------------------------------------------------------------------
    10                        ; Copyright (C)2015 HandCoded Software Ltd.
    11                        ; All rights reserved.
    12                        ;
  Sat Jan 23 2016 14:15                                                                                                    Page 4


    13                        ; This work is made available under the terms of the Creative Commons
    14                        ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
    15                        ; following URL to see the details.
    16                        ;
    17                        ; http://creativecommons.org/licenses/by-nc-sa/4.0/
    18                        ;
    19                        ;===============================================================================
    20                        ; Notes:
    21                        ;
    22                        ; Various macros and definitions for the W65C816 microprocessor.
    23                        ;
    24                        ;===============================================================================
    25                        ; Revision History:
    26                        ;
    27                        ; 2015-12-18 AJ Initial version
    28                        ;-------------------------------------------------------------------------------
    29                        ; $Id$
    30                        ;-------------------------------------------------------------------------------
    31                        
    32                        ;==============================================================================
    33                        ; Status Register Bits
    34                        ;------------------------------------------------------------------------------
    35                        
    36             00000080   N_FLAG          equ     1<<7
    37             00000040   V_FLAG          equ     1<<6
    38             00000020   M_FLAG          equ     1<<5
    39             00000010   X_FLAG          equ     1<<4
    40             00000010   B_FLAG          equ     1<<4
    41             00000008   D_FLAG          equ     1<<3
    42             00000004   I_FLAG          equ     1<<2
    43             00000002   Z_FLAG          equ     1<<1
    44             00000001   C_FLAG          equ     1<<0
    45                        
    46                        ;==============================================================================
    47                        ; Macros
    48                        ;------------------------------------------------------------------------------
    49                        
    50                        ; Puts the processor in emulation mode. A, X and Y become 8-bits and the stack
    51                        ; is fixed at $0100-$01ff. 
    52                        
    53                        emulate         macro
    54                                        sec
    55                                        xce
    56                                        endm
    57                        
    58                        ; Puts the processor in native mode. The size of the memory and index register
    59                        ; operations is not controlled by the M & X bits in the status register.
    60                        
    61                        native          macro
    62                                        clc
    63                                        xce
    64                                        endm
    65                        
    66                        ; Resets the M bit making the accumulator and memory accesses 16-bits wide.
    67                         
    68                        long_a          macro
    69                                        rep     #M_FLAG
    70                                        longa   on
  Sat Jan 23 2016 14:15                                                                                                    Page 5


    71                                        endm
    72                        
    73                        ; Resets the X bit making the index registers 16-bits wide
    74                        
    75                        long_i          macro
    76                                        rep     #X_FLAG
    77                                        longi   on
    78                                        endm
    79                        
    80                        ; Resets the M and X bits making the accumulator, memory accesses and index
    81                        ; registers 16-bits wide.
    82                                        
    83                        long_ai         macro
    84                                        rep     #M_FLAG|X_FLAG
    85                                        longa   on
    86                                        longi   on
    87                                        endm
    88                        
    89                        ; Sets the M bit making the accumulator and memory accesses 8-bits wide.
    90                        
    91                        short_a         macro
    92                                        sep     #M_FLAG
    93                                        longa   off
    94                                        endm
    95                        
    96                        ; Sets the X bit making the index registers 8-bits wide.
    97                        
    98                        short_i         macro
    99                                        sep     #X_FLAG
   100                                        longi   off
   101                                        endm
   102                                        
   103                        ; Sets the M & X bits making the accumulator, memory accesses and index
   104                        ; registers 8-bits wide.
   105                        
   106                        short_ai        macro
   107                                        sep     #M_FLAG|X_FLAG
   108                                        longa   off
   109                                        longi   off
   110                                        endm
    34                                        else
    35                                        include "w65c816.inc"
    36                                        endif
    37                        
    38                        ;===============================================================================
    39                        ;-------------------------------------------------------------------------------
    40                        
    41                        MNEM            macro   P,Q,R
    42                                        dw      ((((P-'@')<<5)|(Q-'@'))<<5)|(R-'@')
    43                                        endm
    44                        
    45                        ;===============================================================================
    46                        ; ASCII Character Codes
    47                        ;-------------------------------------------------------------------------------
    48                        
    49             00000001   SOH             equ     $01
    50             00000004   EOT             equ     $04
    51             00000006   ACK             equ     $06
  Sat Jan 23 2016 14:15                                                                                                    Page 6


    52             00000007   BEL             equ     $07
    53             00000008   BS              equ     $08
    54             0000000A   LF              equ     $0a
    55             0000000D   CR              equ     $0d
    56             00000015   NAK             equ     $15
    57             00000018   CAN             equ     $18
    58             0000001B   ESC             equ     $1b
    59             0000007F   DEL             equ     $7f
    60                        
    61                        ;===============================================================================
    62                        ;-------------------------------------------------------------------------------
    63                        
    64             00000000   OP_ADC          equ     0<<1
    65             00000002   OP_AND          equ     1<<1
    66             00000004   OP_ASL          equ     2<<1
    67             00000006   OP_BCC          equ     3<<1
    68             00000008   OP_BCS          equ     4<<1
    69             0000000A   OP_BEQ          equ     5<<1
    70             0000000C   OP_BIT          equ     6<<1
    71             0000000E   OP_BMI          equ     7<<1
    72             00000010   OP_BNE          equ     8<<1
    73             00000012   OP_BPL          equ     9<<1
    74             00000014   OP_BRA          equ     10<<1
    75             00000016   OP_BRK          equ     11<<1
    76             00000018   OP_BRL          equ     12<<1
    77             0000001A   OP_BVC          equ     13<<1
    78             0000001C   OP_BVS          equ     14<<1
    79             0000001E   OP_CLC          equ     15<<1
    80             00000020   OP_CLD          equ     16<<1
    81             00000022   OP_CLI          equ     17<<1
    82             00000024   OP_CLV          equ     18<<1
    83             00000026   OP_CMP          equ     19<<1
    84             00000028   OP_COP          equ     20<<1
    85             0000002A   OP_CPX          equ     21<<1
    86             0000002C   OP_CPY          equ     22<<1
    87             0000002E   OP_DEC          equ     23<<1
    88             00000030   OP_DEX          equ     24<<1
    89             00000032   OP_DEY          equ     25<<1
    90             00000034   OP_EOR          equ     26<<1
    91             00000036   OP_INC          equ     27<<1
    92             00000038   OP_INX          equ     28<<1
    93             0000003A   OP_INY          equ     29<<1
    94             0000003C   OP_JML          equ     30<<1
    95             0000003E   OP_JMP          equ     31<<1
    96             00000040   OP_JSL          equ     32<<1
    97             00000042   OP_JSR          equ     33<<1
    98             00000044   OP_LDA          equ     34<<1
    99             00000046   OP_LDX          equ     35<<1
   100             00000048   OP_LDY          equ     36<<1
   101             0000004A   OP_LSR          equ     37<<1
   102             0000004C   OP_MVN          equ     38<<1
   103             0000004E   OP_MVP          equ     39<<1
   104             00000050   OP_NOP          equ     40<<1
   105             00000052   OP_ORA          equ     41<<1
   106             00000054   OP_PEA          equ     42<<1
   107             00000056   OP_PEI          equ     43<<1
   108             00000058   OP_PER          equ     44<<1
   109             0000005A   OP_PHA          equ     45<<1
  Sat Jan 23 2016 14:15                                                                                                    Page 7


   110             0000005C   OP_PHB          equ     46<<1
   111             0000005E   OP_PHD          equ     47<<1
   112             00000060   OP_PHK          equ     48<<1
   113             00000062   OP_PHP          equ     49<<1
   114             00000064   OP_PHX          equ     50<<1
   115             00000066   OP_PHY          equ     51<<1
   116             00000068   OP_PLA          equ     52<<1
   117             0000006A   OP_PLB          equ     53<<1
   118             0000006C   OP_PLD          equ     54<<1
   119             0000006E   OP_PLP          equ     55<<1
   120             00000070   OP_PLX          equ     56<<1
   121             00000072   OP_PLY          equ     57<<1
   122             00000074   OP_REP          equ     58<<1
   123             00000076   OP_ROL          equ     59<<1
   124             00000078   OP_ROR          equ     60<<1
   125             0000007A   OP_RTI          equ     61<<1
   126             0000007C   OP_RTL          equ     62<<1
   127             0000007E   OP_RTS          equ     63<<1
   128             00000080   OP_SBC          equ     64<<1
   129             00000082   OP_SEC          equ     65<<1
   130             00000084   OP_SED          equ     66<<1
   131             00000086   OP_SEI          equ     67<<1
   132             00000088   OP_SEP          equ     68<<1
   133             0000008A   OP_STA          equ     69<<1
   134             0000008C   OP_STP          equ     70<<1
   135             0000008E   OP_STX          equ     71<<1
   136             00000090   OP_STY          equ     72<<1
   137             00000092   OP_STZ          equ     73<<1
   138             00000094   OP_TAX          equ     74<<1
   139             00000096   OP_TAY          equ     75<<1
   140             00000098   OP_TCD          equ     76<<1
   141             0000009A   OP_TCS          equ     77<<1
   142             0000009C   OP_TDC          equ     78<<1
   143             0000009E   OP_TRB          equ     79<<1
   144             000000A0   OP_TSB          equ     80<<1
   145             000000A2   OP_TSC          equ     81<<1
   146             000000A4   OP_TSX          equ     82<<1
   147             000000A6   OP_TXA          equ     83<<1
   148             000000A8   OP_TXS          equ     84<<1
   149             000000AA   OP_TXY          equ     85<<1
   150             000000AC   OP_TYA          equ     86<<1
   151             000000AE   OP_TYX          equ     87<<1
   152             000000B0   OP_WAI          equ     88<<1
   153             000000B2   OP_WDM          equ     89<<1
   154             000000B4   OP_XBA          equ     90<<1
   155             000000B6   OP_XCE          equ     91<<1
   156                        
   157             00000000   MD_ABS          equ     0<<1                    ; a
   158             00000002   MD_ACC          equ     1<<1                    ; A
   159             00000004   MD_ABX          equ     2<<1                    ; a,x
   160             00000006   MD_ABY          equ     3<<1                    ; a,y
   161             00000008   MD_ALG          equ     4<<1                    ; al
   162             0000000A   MD_ALX          equ     5<<1                    ; al,x
   163             0000000C   MD_AIN          equ     6<<1                    ; (a)
   164             0000000E   MD_AIX          equ     7<<1                    ; (a,x)
   165             00000010   MD_DPG          equ     8<<1                    ; d
   166             00000012   MD_STK          equ     9<<1                    ; d,s
   167             00000014   MD_DPX          equ     10<<1                   ; d,x
  Sat Jan 23 2016 14:15                                                                                                    Page 8


   168             00000016   MD_DPY          equ     11<<1                   ; d,x
   169             00000018   MD_DIN          equ     12<<1                   ; (d)
   170             0000001A   MD_DLI          equ     13<<1                   ; [d]
   171             0000001C   MD_SKY          equ     14<<1                   ; (d,s),y
   172             0000001E   MD_DIX          equ     15<<1                   ; (d,x)
   173             00000020   MD_DIY          equ     16<<1                   ; (d),y
   174             00000022   MD_DLY          equ     17<<1                   ; [d],y
   175             00000024   MD_IMP          equ     18<<1                   ;
   176             00000026   MD_REL          equ     19<<1                   ; r
   177             00000028   MD_RLG          equ     20<<1                   ; rl
   178             0000002A   MD_MOV          equ     21<<1                   ; xyc
   179             0000002C   MD_IMM          equ     22<<1                   ; # (A or M)
   180             0000002E   MD_INT          equ     23<<1                   ; # (BRK/COP/WDM)
   181             00000030   MD_IMX          equ     24<<1                   ; # (X or Y)
   182                        
   183                        ;===============================================================================
   184                        ; Data Areas
   185                        ;-------------------------------------------------------------------------------
   186                        
   187                                        page0
   188                                        org     $20
   189                        
   190 00:0020:              FLAGS           ds      1                       ; Emulated processor flags
   191 00:0021:              BUFLEN          ds      1                       ; Command buffer length
   192 00:0022:              BANK            ds      1                       ; Memory bank
   193                        
   194 00:0023:              ADDR_S          ds      3                       ; Start address
   195 00:0026:              ADDR_E          ds      3                       ; End address
   196                        
   197 00:0029:              BLOCK           ds      1                       ; XMODEM block number
   198 00:002A:              RETRIES         ds      1                       ; Retry count
   199 00:002B:              SUM             ds      1                       ; Checksum
   200                        
   201 00:002C:              TEMP            ds      4                       ; Scratch workspace
   202                        
   203                                        data
   204                                        org     $200
   205                        
   206 00:0200:              BUFFER          ds      128                     ; Command buffer
   207                        
   208                        ;===============================================================================
   209                        ; Initialisation
   210                        ;-------------------------------------------------------------------------------
   211                        
   212                                        code
   213                                        public  Start
   214                                        extern  UartRx
   215                                        extern  UartTx
   216                                        extern  UartRxTest
   217                                        extern  RomSelect
   218                                        extern  RomCheck
   219                        Start:
   220                                        short_a                         ; Configure register sizes
+  220 00:0000: E2 20                        sep     #M_FLAG
+  220                                        longa   off
   221                                        long_i
+  221 00:0002: C2 10                        rep     #X_FLAG
+  221                                        longi   on
  Sat Jan 23 2016 14:15                                                                                                    Page 9


   222 00:0004: 20 xx xx                     jsr     TxCRLF
   223 00:0007: A2 xx xx                     ldx     #TITLE                  ; Display application title
   224 00:000A: 20 xx xx                     jsr     TxStr
   225                        
   226 00:000D: 64 22                        stz     BANK                    ; Reset default bank
   227                        
   228                        ;===============================================================================
   229                        ; Command Processor
   230                        ;-------------------------------------------------------------------------------
   231                        
   232                        NewCommand:
   233 00:000F: 64 21                        stz     BUFLEN                  ; Clear the buffer
   234                        ShowCommand:
   235                                        short_i
+  235 00:0011: E2 10                        sep     #X_FLAG
+  235                                        longi   off
   236 00:0013: 20 xx xx                     jsr     TxCRLF                  ; Move to a new line
   237                        
   238 00:0016: A9 2E                        lda     #'.'                    ; Output the prompt
   239 00:0018: 20 xx xx                     jsr     UartTx
   240                        
   241 00:001B: A2 00                        ldx     #0
   242 00:001D: E4 21        DisplayCmd:     cpx     BUFLEN                  ; Any saved characters
   243 00:001F: F0 0E                        beq     ReadCommand
   244 00:0021: BD 00 02                     lda     BUFFER,x                ; Yes, display them
   245 00:0024: 20 xx xx                     jsr     UartTx
   246 00:0027: E8                           inx
   247 00:0028: 80 F3                        bra     DisplayCmd
   248                        
   249                        RingBell:
   250 00:002A: A9 07                        lda     #BEL                    ; Make a beep
   251 00:002C: 20 xx xx                     jsr     UartTx
   252                        
   253                        ReadCommand:
   254 00:002F: 20 xx xx                     jsr     UartRx                  ; Wait for character
   255                        
   256 00:0032: C9 1B                        cmp     #ESC                    ; Cancel input?
   257 00:0034: F0 D9                        beq     NewCommand              ; Yes, clear and restart
   258 00:0036: C9 0D                        cmp     #CR                     ; End of command?
   259 00:0038: F0 2D                        beq     ProcessCommand          ; Yes, start processing
   260                        
   261 00:003A: C9 08                        cmp     #BS                     ; Back space?
   262 00:003C: F0 15                        beq     BackSpace
   263 00:003E: C9 7F                        cmp     #DEL                    ; Delete?
   264 00:0040: F0 11                        beq     BackSpace
   265                        
   266 00:0042: C9 20                        cmp     #' '                    ; Printable character
   267 00:0044: 90 E4                        bcc     RingBell                ; No.
   268 00:0046: C9 7F                        cmp     #DEL
   269 00:0048: B0 E0                        bcs     RingBell                ; No.
   270 00:004A: 9D 00 02                     sta     BUFFER,x                ; Save the character
   271 00:004D: E8                           inx
   272 00:004E: 20 xx xx                     jsr     UartTx                  ; Echo it and repeat
   273 00:0051: 80 DC                        bra     ReadCommand
   274                        
   275                        BackSpace:
   276 00:0053: E0 00                        cpx     #0                      ; Buffer empty?
   277 00:0055: F0 D3                        beq     RingBell                ; Yes, beep and continue
  Sat Jan 23 2016 14:15                                                                                                    Page 10


   278 00:0057: CA                           dex                             ; No, remove last character
   279 00:0058: A9 08                        lda     #BS
   280 00:005A: 20 xx xx                     jsr     UartTx
   281 00:005D: 20 xx xx                     jsr     TxSpace
   282 00:0060: A9 08                        lda     #BS
   283 00:0062: 20 xx xx                     jsr     UartTx
   284 00:0065: 80 C8                        bra     ReadCommand             ; And retry
   285                        
   286                        ProcessCommand:
   287 00:0067: 86 21                        stx     BUFLEN                  ; Save final length
   288 00:0069: A0 00                        ldy     #0                      ; Load index for start
   289                        
   290 00:006B: 20 xx xx                     jsr     SkipSpaces              ; Fetch command character
   291 00:006E: B0 9F                        bcs     NewCommand              ; None, empty command
   292                        
   293                        ;===============================================================================
   294                        ; B - Select Memory Bank
   295                        ;-------------------------------------------------------------------------------
   296                        
   297 00:0070: C9 42                        cmp     #'B'                    ; Select memory bank?
   298 00:0072: D0 0D                        bne     NotMemoryBank
   299                        
   300 00:0074: A2 22                        ldx     #BANK                   ; Parse bank
   301 00:0076: 20 xx xx                     jsr     GetByte
   302 00:0079: 90 03                        bcc     $+5
   303 00:007B: 4C xx xx                     jmp     ShowError
   304 00:007E: 4C xx xx                     jmp     NewCommand
   305                        NotMemoryBank:
   306                        
   307                        ;===============================================================================
   308                        ; D - Disassemble Memory
   309                        ;-------------------------------------------------------------------------------
   310                        
   311 00:0081: C9 44                        cmp     #'D'                    ; Memory display?
   312 00:0083: D0 52                        bne     NotDisassemble
   313                        
   314 00:0085: A2 23                        ldx     #ADDR_S                 ; Parse start address
   315 00:0087: 20 xx xx                     jsr     GetAddr
   316 00:008A: 90 03                        bcc     $+5
   317 00:008C: 4C xx xx                     jmp     ShowError
   318 00:008F: A2 26                        ldx     #ADDR_E                 ; Parse end address
   319 00:0091: 20 xx xx                     jsr     GetAddr
   320 00:0094: 90 03                        bcc     $+5
   321 00:0096: 4C xx xx                     jmp     ShowError
   322                        
   323 00:0099: 08                           php
   324 00:009A: 68                           pla
   325 00:009B: 85 20                        sta     FLAGS
   326                        
   327                        Disassemble:
   328 00:009D: 20 xx xx                     jsr     TxCRLF
   329 00:00A0: A5 25                        lda     ADDR_S+2                ; Show memory address
   330 00:00A2: 20 xx xx                     jsr     TxHex2
   331 00:00A5: A9 3A                        lda     #':'
   332 00:00A7: 20 xx xx                     jsr     UartTx
   333 00:00AA: A5 24                        lda     ADDR_S+1
   334 00:00AC: 20 xx xx                     jsr     TxHex2
   335 00:00AF: A5 23                        lda     ADDR_S+0
  Sat Jan 23 2016 14:15                                                                                                    Page 11


   336 00:00B1: 20 xx xx                     jsr     TxHex2
   337 00:00B4: 20 xx xx                     jsr     TxSpace
   338                        
   339 00:00B7: 20 xx xx                     jsr     TxCodeBytes             ; Show code bytes
   340 00:00BA: 20 xx xx                     jsr     TxSymbolic              ; And instruction
   341                        
   342 00:00BD: A7 23                        lda     [ADDR_S]                ; Fetch opcode again
   343 00:00BF: 20 xx xx                     jsr     OpcodeSize
   344                        
   345 00:00C2: 18                           clc
   346 00:00C3: 65 23                        adc     ADDR_S+0                ; And move start address on
   347 00:00C5: 85 23                        sta     ADDR_S+0
   348 00:00C7: 90 02                        bcc     $+4
   349 00:00C9: E6 24                        inc     ADDR_S+1
   350                        
   351 00:00CB: 38                           sec                             ; Exceeded the end address?
   352 00:00CC: E5 26                        sbc     ADDR_E+0
   353 00:00CE: A5 24                        lda     ADDR_S+1
   354 00:00D0: E5 27                        sbc     ADDR_E+1
   355 00:00D2: 30 C9                        bmi     Disassemble             ; No, show more
   356                        
   357 00:00D4: 4C xx xx                     jmp     NewCommand              ; Done
   358                        NotDisassemble:
   359                        
   360                        ;===============================================================================
   361                        ; E - Erase ROM bank
   362                        ;-------------------------------------------------------------------------------
   363                        
   364 00:00D7: C9 45                        cmp     #'E'                    ; Erase bank?
   365 00:00D9: D0 52                        bne     NotEraseBank
   366                        
   367 00:00DB: 20 xx xx                     jsr     CheckSafe
   368                        
   369                                        ifdef   W65C265SXB
   370 00:00DE: AD 40 DF                     lda     BCR                     ; Save mask rom state
   371 00:00E1: 48                           pha
   372 00:00E2: A9 80                        lda     #$80                    ; Then ensure disabled
   373 00:00E4: 0C 40 DF                     tsb     BCR
   374                                        endif
   375                        
   376 00:00E7: A9 00                        lda     #$00                    ; Set start address
   377 00:00E9: 85 23                        sta     ADDR_S+0
   378 00:00EB: A9 80                        lda     #$80
   379 00:00ED: 85 24                        sta     ADDR_S+1
   380                        EraseLoop:
   381 00:00EF: A9 AA                        lda     #$aa                    ; Unlock flash
   382 00:00F1: 8D 55 D5                     sta     $8000+$5555
   383 00:00F4: A9 55                        lda     #$55
   384 00:00F6: 8D AA AA                     sta     $8000+$2aaa
   385 00:00F9: A9 80                        lda     #$80                    ; Signal erase
   386 00:00FB: 8D 55 D5                     sta     $8000+$5555
   387 00:00FE: A9 AA                        lda     #$aa
   388 00:0100: 8D 55 D5                     sta     $8000+$5555
   389 00:0103: A9 55                        lda     #$55
   390 00:0105: 8D AA AA                     sta     $8000+$2aaa
   391 00:0108: A9 30                        lda     #$30                    ; Sector erase
   392 00:010A: 92 23                        sta     (ADDR_S)
   393                        
  Sat Jan 23 2016 14:15                                                                                                    Page 12


   394                        EraseWait:
   395 00:010C: B2 23                        lda     (ADDR_S)                ; Wait for erase to finish
   396 00:010E: C9 FF                        cmp     #$FF
   397 00:0110: D0 FA                        bne     EraseWait
   398                        
   399 00:0112: 18                           clc                             ; Move to next sector
   400 00:0113: A5 24                        lda     ADDR_S+1
   401 00:0115: 69 10                        adc     #$10
   402 00:0117: 85 24                        sta     ADDR_S+1
   403 00:0119: 90 D4                        bcc     EraseLoop               ; Repeat until end of memory
   404                        
   405                                        ifdef   W65C265SXB
   406 00:011B: 68                           pla                             ; Restore mask ROM state
   407 00:011C: 8D 40 DF                     sta     BCR
   408                                        endif
   409                        
   410 00:011F: 4C xx xx                     jmp     NewCommand              ; And start over
   411                        
   412                        EraseFailed:
   413                                        long_i                          ; Warn that erase failed
+  413 00:0122: C2 10                        rep     #X_FLAG
+  413                                        longi   on
   414 00:0124: A2 xx xx                     ldx     #ERASE_FAILED
   415 00:0127: 20 xx xx                     jsr     TxStr
   416                                        longi   off
   417 00:012A: 4C xx xx                     jmp     NewCommand              ; And start over
   418                        NotEraseBank:
   419                        
   420                        ;===============================================================================
   421                        ; F - WDC Mask ROM Enable/Disable
   422                        ;-------------------------------------------------------------------------------
   423                        
   424                                        ifdef   W65C265SXB
   425 00:012D: C9 46                        cmp     #'F'
   426 00:012F: D0 20                        bne     NotMaskROM
   427                        
   428 00:0131: 20 xx xx                     jsr     SkipSpaces              ; Find first argument
   429 00:0134: B0 08                        bcs     MaskFail                ; Success?
   430                        
   431 00:0136: C9 30                        cmp     #'0'                    ; Check bank is 0..3
   432 00:0138: F0 0F                        beq     MaskOff
   433 00:013A: C9 31                        cmp     #'1'
   434 00:013C: F0 03                        beq     MaskOn
   435                        MaskFail:
   436 00:013E: 4C xx xx                     jmp     ShowError
   437                        
   438                        MaskOn:
   439 00:0141: A9 80                        lda     #$80                    ; Enable mask ROM
   440 00:0143: 1C 40 DF                     trb     BCR
   441 00:0146: 4C xx xx                     jmp     NewCommand
   442                        
   443                        MaskOff:
   444 00:0149: A9 80                        lda     #$80                    ; Disable mask ROM
   445 00:014B: 0C 40 DF                     tsb     BCR
   446 00:014E: 4C xx xx                     jmp     NewCommand
   447                        
   448                        NotMaskROM:
   449                                        endif
  Sat Jan 23 2016 14:15                                                                                                    Page 13


   450                        
   451                        ;===============================================================================
   452                        ; G - Goto
   453                        ;-------------------------------------------------------------------------------
   454                        
   455 00:0151: C9 47                        cmp     #'G'                    ; Invoke code
   456 00:0153: D0 0D                        bne     NotGoto
   457                        
   458 00:0155: A2 23                        ldx     #ADDR_S                 ; Parse execution address
   459 00:0157: 20 xx xx                     jsr     GetAddr
   460 00:015A: B0 03                        bcs     $+5
   461 00:015C: DC 23 00                     jmp     [ADDR_S]                ; Run from address
   462 00:015F: 6C FC FF                     jmp     ($FFFC)                 ; Otherwise reset
   463                        NotGoto:
   464                        
   465                        ;===============================================================================
   466                        ; H - Hunt for RAM
   467                        ;-------------------------------------------------------------------------------
   468                        
   469 00:0162: C9 48                        cmp     #'H'                    ; Hunt for RAM
   470 00:0164: F0 03                        beq     $+5
   471 00:0166: 4C xx xx                     jmp     NotHunt
   472                        
   473 00:0169: 64 23                        stz     ADDR_S+0                ; Start at $00:0000
   474 00:016B: 64 24                        stz     ADDR_S+1
   475 00:016D: 64 25                        stz     ADDR_S+2
   476                        
   477                        HuntStart:
   478 00:016F: A7 23                        lda     [ADDR_S]                ; Is byte is writeable?
   479 00:0171: 48                           pha
   480 00:0172: 49 FF                        eor     #$ff
   481 00:0174: 87 23                        sta     [ADDR_S]
   482 00:0176: C7 23                        cmp     [ADDR_S]
   483 00:0178: F0 11                        beq     HuntFound               ; Yes
   484                        
   485 00:017A: 68                           pla
   486 00:017B: 18                           clc                             ; Try the next block
   487 00:017C: A5 24                        lda     ADDR_S+1
   488 00:017E: 69 10                        adc     #$10
   489 00:0180: 85 24                        sta     ADDR_S+1
   490 00:0182: 90 EB                        bcc     HuntStart
   491 00:0184: E6 25                        inc     ADDR_S+2
   492 00:0186: D0 E7                        bne     HuntStart
   493 00:0188: 4C xx xx                     jmp     NewCommand              ; Reached end of RAM
   494                        
   495                        HuntFound:
   496 00:018B: 20 xx xx                     jsr     TxCRLF
   497 00:018E: A5 25                        lda     ADDR_S+2                ; Print start address
   498 00:0190: 20 xx xx                     jsr     TxHex2
   499 00:0193: A9 3A                        lda     #':'
   500 00:0195: 20 xx xx                     jsr     UartTx
   501 00:0198: A5 24                        lda     ADDR_S+1
   502 00:019A: 20 xx xx                     jsr     TxHex2
   503 00:019D: A5 23                        lda     ADDR_S+0
   504 00:019F: 20 xx xx                     jsr     TxHex2
   505                        
   506 00:01A2: A9 2D                        lda     #'-'
   507 00:01A4: 20 xx xx                     jsr     UartTx
  Sat Jan 23 2016 14:15                                                                                                    Page 14


   508                        
   509                        HuntEnd:
   510 00:01A7: 68                           pla                             ; Restore memory bytes
   511 00:01A8: 87 23                        sta     [ADDR_S]
   512 00:01AA: 18                           clc                             ; Try the next block
   513 00:01AB: A5 24                        lda     ADDR_S+1
   514 00:01AD: 69 10                        adc     #$10
   515 00:01AF: 85 24                        sta     ADDR_S+1
   516 00:01B1: 90 04                        bcc     HuntNext
   517 00:01B3: E6 25                        inc     ADDR_S+2
   518 00:01B5: F0 2D                        beq     HuntDone
   519                        
   520                        HuntNext
   521 00:01B7: A7 23                        lda     [ADDR_S]                ; Is byte is writeable?
   522 00:01B9: 48                           pha
   523 00:01BA: 49 FF                        eor     #$ff
   524 00:01BC: 87 23                        sta     [ADDR_S]
   525 00:01BE: C7 23                        cmp     [ADDR_S]
   526 00:01C0: F0 E5                        beq     HuntEnd                 ; Yes, keep looking
   527                        
   528 00:01C2: 68                           pla
   529 00:01C3: 38                           sec                             ; Print end address
   530 00:01C4: A5 23                        lda     ADDR_S+0
   531 00:01C6: E9 01                        sbc     #1
   532 00:01C8: 48                           pha
   533 00:01C9: A5 24                        lda     ADDR_S+1
   534 00:01CB: E9 00                        sbc     #0
   535 00:01CD: 48                           pha
   536 00:01CE: A5 25                        lda     ADDR_S+2
   537 00:01D0: E9 00                        sbc     #0
   538 00:01D2: 20 xx xx                     jsr     TxHex2
   539 00:01D5: A9 3A                        lda     #':'
   540 00:01D7: 20 xx xx                     jsr     UartTx
   541 00:01DA: 68                           pla
   542 00:01DB: 20 xx xx                     jsr     TxHex2
   543 00:01DE: 68                           pla
   544 00:01DF: 20 xx xx                     jsr     TxHex2
   545 00:01E2: 80 8B                        bra     HuntStart
   546                        
   547                        HuntDone:
   548 00:01E4: A9 FF                        lda     #$ff                    ; Pring FF:FFFF
   549 00:01E6: 48                           pha
   550 00:01E7: 48                           pha
   551 00:01E8: 20 xx xx                     jsr     TxHex2
   552 00:01EB: A9 3A                        lda     #':'
   553 00:01ED: 20 xx xx                     jsr     UartTx
   554 00:01F0: 68                           pla
   555 00:01F1: 20 xx xx                     jsr     TxHex2
   556 00:01F4: 68                           pla
   557 00:01F5: 20 xx xx                     jsr     TxHex2
   558 00:01F8: 4C xx xx                     jmp     NewCommand
   559                        NotHunt:
   560                        
   561                        ;===============================================================================
   562                        ; M - Display Memory
   563                        ;-------------------------------------------------------------------------------
   564                        
   565 00:01FB: C9 4D                        cmp     #'M'                    ; Memory display?
  Sat Jan 23 2016 14:15                                                                                                    Page 15


   566 00:01FD: D0 70                        bne     NotMemoryDisplay
   567                        
   568 00:01FF: A2 23                        ldx     #ADDR_S                 ; Parse start address
   569 00:0201: 20 xx xx                     jsr     GetAddr
   570 00:0204: 90 03                        bcc     $+5
   571 00:0206: 4C xx xx                     jmp     ShowError
   572 00:0209: A2 26                        ldx     #ADDR_E                 ; Parse end address
   573 00:020B: 20 xx xx                     jsr     GetAddr
   574 00:020E: 90 03                        bcc     $+5
   575 00:0210: 4C xx xx                     jmp     ShowError
   576                        
   577                        DisplayMemory:
   578 00:0213: 20 xx xx                     jsr     TxCRLF
   579 00:0216: A5 25                        lda     ADDR_S+2                ; Show memory address
   580 00:0218: 20 xx xx                     jsr     TxHex2
   581 00:021B: A9 3A                        lda     #':'
   582 00:021D: 20 xx xx                     jsr     UartTx
   583 00:0220: A5 24                        lda     ADDR_S+1
   584 00:0222: 20 xx xx                     jsr     TxHex2
   585 00:0225: A5 23                        lda     ADDR_S+0
   586 00:0227: 20 xx xx                     jsr     TxHex2
   587                        
   588 00:022A: A0 00                        ldy     #0                      ; Show sixteen bytes of data
   589 00:022C: 20 xx xx     ByteLoop:       jsr     TxSpace
   590 00:022F: B7 23                        lda     [ADDR_S],y
   591 00:0231: 20 xx xx                     jsr     TxHex2
   592 00:0234: C8                           iny
   593 00:0235: C0 10                        cpy     #16
   594 00:0237: D0 F3                        bne     ByteLoop
   595                        
   596 00:0239: 20 xx xx                     jsr     TxSpace
   597 00:023C: A9 7C                        lda     #'|'
   598 00:023E: 20 xx xx                     jsr     UartTx
   599 00:0241: A0 00                        ldy     #0                      ; Show sixteen characters
   600 00:0243: B7 23        CharLoop:       lda     [ADDR_S],Y
   601 00:0245: 20 xx xx                     jsr     IsPrintable
   602 00:0248: B0 02                        bcs     $+4
   603 00:024A: A9 2E                        lda     #'.'
   604 00:024C: 20 xx xx                     jsr     UartTx
   605 00:024F: C8                           iny
   606 00:0250: C0 10                        cpy     #16
   607 00:0252: D0 EF                        bne     CharLoop
   608 00:0254: A9 7C                        lda     #'|'
   609 00:0256: 20 xx xx                     jsr     UartTx
   610                        
   611 00:0259: 18                           clc                             ; Bump the display address
   612 00:025A: 98                           tya
   613 00:025B: 65 23                        adc     ADDR_S+0
   614 00:025D: 85 23                        sta     ADDR_S+0
   615 00:025F: 90 02                        bcc     $+4
   616 00:0261: E6 24                        inc     ADDR_S+1
   617                        
   618 00:0263: 38                           sec                             ; Exceeded the end address?
   619 00:0264: E5 26                        sbc     ADDR_E+0
   620 00:0266: A5 24                        lda     ADDR_S+1
   621 00:0268: E5 27                        sbc     ADDR_E+1
   622 00:026A: 30 A7                        bmi     DisplayMemory           ; No, show more
   623                        
  Sat Jan 23 2016 14:15                                                                                                    Page 16


   624 00:026C: 4C xx xx                     jmp     NewCommand
   625                        NotMemoryDisplay:
   626                        
   627                        ;===============================================================================
   628                        ; R - Select ROM Bank
   629                        ;-------------------------------------------------------------------------------
   630                        
   631 00:026F: C9 52                        cmp     #'R'                    ; ROM Bank?
   632 00:0271: D0 16                        bne     NotROMBank              ; No
   633                        
   634 00:0273: 20 xx xx                     jsr     SkipSpaces              ; Find first argument
   635 00:0276: 90 03                        bcc     $+5                     ; Success?
   636 00:0278: 4C xx xx     BankFail:       jmp     ShowError               ; No
   637                        
   638 00:027B: C9 30                        cmp     #'0'                    ; Check bank is 0..3
   639 00:027D: 90 F9                        bcc     BankFail
   640 00:027F: C9 34                        cmp     #'3'+1
   641 00:0281: B0 F5                        bcs     BankFail
   642                        
   643 00:0283: 20 xx xx                     jsr     RomSelect               ; Switch ROM banks
   644 00:0286: 4C xx xx                     jmp     NewCommand              ; Done
   645                        NotROMBank:
   646                        
   647                        ;===============================================================================
   648                        ; S - S19 Record
   649                        ;-------------------------------------------------------------------------------
   650                        
   651 00:0289: C9 53                        cmp     #'S'                    ; S19?
   652 00:028B: F0 03                        beq     $+5
   653 00:028D: 4C xx xx                     jmp     NotS19
   654                        
   655 00:0290: 20 xx xx                     jsr     NextChar                ; Get record type
   656 00:0293: B0 75                        bcs     S19Fail
   657 00:0295: C9 31                        cmp     #'1'                    ; Only process type 1
   658 00:0297: D0 6E                        bne     S19Done
   659                        
   660 00:0299: A2 26                        ldx     #ADDR_E                 ; Get byte count
   661 00:029B: 20 xx xx                     jsr     GetByte
   662 00:029E: B0 6A                        bcs     S19Fail
   663 00:02A0: A5 26                        lda     ADDR_E                  ; Use as initial checksum
   664 00:02A2: 85 2B                        sta     SUM
   665 00:02A4: C6 26                        dec     ADDR_E
   666 00:02A6: F0 62                        beq     S19Fail
   667                        
   668 00:02A8: A2 23                        ldx     #ADDR_S                 ; Get address
   669 00:02AA: 20 xx xx                     jsr     GetAddr
   670 00:02AD: B0 5B                        bcs     S19Fail
   671 00:02AF: A5 23                        lda     ADDR_S+0                ; Add to checksum
   672 00:02B1: 65 24                        adc     ADDR_S+1
   673 00:02B3: 18                           clc
   674 00:02B4: 65 2B                        adc     SUM
   675 00:02B6: 85 2B                        sta     SUM
   676 00:02B8: C6 26                        dec     ADDR_E
   677 00:02BA: F0 4E                        beq     S19Fail
   678 00:02BC: C6 26                        dec     ADDR_E
   679 00:02BE: F0 4A                        beq     S19Fail
   680                        
   681                        S19Load:
  Sat Jan 23 2016 14:15                                                                                                    Page 17


   682 00:02C0: A2 2C                        ldx     #TEMP                   ; Fetch a data byte
   683 00:02C2: 20 xx xx                     jsr     GetByte
   684 00:02C5: B0 43                        bcs     S19Fail
   685 00:02C7: A5 2C                        lda     TEMP
   686 00:02C9: 65 2B                        adc     SUM
   687 00:02CB: 85 2B                        sta     SUM
   688 00:02CD: C6 26                        dec     ADDR_E
   689 00:02CF: F0 39                        beq     S19Fail
   690                        
   691 00:02D1: A5 25                        lda     ADDR_S+2                ; Writing to ROM?
   692 00:02D3: D0 13                        bne     WriteS19                ; No
   693 00:02D5: 24 24                        bit     ADDR_S+1
   694 00:02D7: 10 0F                        bpl     WriteS19                ; No
   695                        
   696 00:02D9: A9 AA                        lda     #$aa                    ; Yes, unlock flash
   697 00:02DB: 8D 55 D5                     sta     $8000+$5555
   698 00:02DE: A9 55                        lda     #$55
   699 00:02E0: 8D AA AA                     sta     $8000+$2aaa
   700 00:02E3: A9 A0                        lda     #$a0                    ; Start byte write
   701 00:02E5: 8D 55 D5                     sta     $8000+$5555
   702                        WriteS19:
   703 00:02E8: A5 2C                        lda     TEMP                    ; Write the value
   704 00:02EA: 87 23                        sta     [ADDR_S]
   705                        
   706 00:02EC: E6 23                        inc     ADDR_S+0                ; Bump address by one
   707 00:02EE: D0 02                        bne     $+4
   708 00:02F0: E6 24                        inc     ADDR_S+1
   709                        
   710 00:02F2: A5 26                        lda     ADDR_E                  ; Reached checksum?
   711 00:02F4: C9 01                        cmp     #1
   712 00:02F6: D0 C8                        bne     S19Load
   713                        
   714 00:02F8: A2 2C                        ldx     #TEMP                   ; Yes, read it
   715 00:02FA: 20 xx xx                     jsr     GetByte
   716 00:02FD: B0 0B                        bcs     S19Fail
   717 00:02FF: A5 2C                        lda     TEMP
   718 00:0301: 65 2B                        adc     SUM
   719 00:0303: C9 FF                        cmp     #$ff                    ; Checksum correct?
   720 00:0305: D0 03                        bne     S19Fail
   721                        
   722 00:0307: 4C xx xx     S19Done:        jmp     NewCommand              ; Get
   723                        
   724                        S19Fail:
   725                                        long_i                          ; Display error message
+  725 00:030A: C2 10                        rep     #X_FLAG
+  725                                        longi   on
   726 00:030C: A2 xx xx                     ldx     #INVALID_S19
   727 00:030F: 20 xx xx                     jsr     TxStr
   728                                        longi   off
   729 00:0312: 4C xx xx                     jmp     NewCommand              ; And start over
   730                        NotS19:
   731                        
   732                        ;===============================================================================
   733                        ; W - Write memory
   734                        ;-------------------------------------------------------------------------------
   735                        
   736 00:0315: C9 57                        cmp     #'W'                    ; Write memory?
   737 00:0317: D0 58                        bne     NotWrite
  Sat Jan 23 2016 14:15                                                                                                    Page 18


   738                        
   739 00:0319: A2 23                        ldx     #ADDR_S                 ; Parse start address
   740 00:031B: 20 xx xx                     jsr     GetAddr
   741 00:031E: 90 03                        bcc     $+5
   742 00:0320: 4C xx xx                     jmp     ShowError
   743                        
   744 00:0323: 24 24                        bit     ADDR_S+1                ; Load into ROM area?
   745 00:0325: 10 03                        bpl     $+5
   746 00:0327: 20 xx xx                     jsr     CheckSafe               ; Yes, check selection
   747                        
   748 00:032A: A2 26                        ldx     #ADDR_E                 ; Parse value byte
   749 00:032C: 20 xx xx                     jsr     GetByte                 ; Is there a value?
   750 00:032F: 90 03                        bcc     $+5
   751 00:0331: 4C xx xx                     jmp     NewCommand              ; No.
   752                        
   753 00:0334: A5 25                        lda     ADDR_S+2                ; Writing to ROM?
   754 00:0336: D0 13                        bne     WriteMemory             ; No
   755 00:0338: 24 24                        bit     ADDR_S+1
   756 00:033A: 10 0F                        bpl     WriteMemory             ; No
   757                        
   758 00:033C: A9 AA                        lda     #$aa                    ; Yes, unlock flash
   759 00:033E: 8D 55 D5                     sta     $8000+$5555
   760 00:0341: A9 55                        lda     #$55
   761 00:0343: 8D AA AA                     sta     $8000+$2aaa
   762 00:0346: A9 A0                        lda     #$a0                    ; Start byte write
   763 00:0348: 8D 55 D5                     sta     $8000+$5555
   764                        WriteMemory:
   765 00:034B: A5 26                        lda     ADDR_E                  ; Write the value
   766 00:034D: 87 23                        sta     [ADDR_S]
   767                        
   768 00:034F: E6 23                        inc     ADDR_S+0                ; Bump address by one
   769 00:0351: D0 02                        bne     $+4
   770 00:0353: E6 24                        inc     ADDR_S+1
   771                        
   772 00:0355: A9 57                        lda     #'W'                    ; Build command for next byte
   773 00:0357: 20 xx xx                     jsr     StartCommand
   774 00:035A: A9 20                        lda     #' '
   775 00:035C: 20 xx xx                     jsr     BuildCommand
   776 00:035F: A5 24                        lda     ADDR_S+1                ; Add the next address
   777 00:0361: 20 xx xx                     jsr     BuildByte
   778 00:0364: A5 23                        lda     ADDR_S+0
   779 00:0366: 20 xx xx                     jsr     BuildByte
   780 00:0369: A9 20                        lda     #' '
   781 00:036B: 20 xx xx                     jsr     BuildCommand
   782 00:036E: 4C xx xx                     jmp     ShowCommand             ; And prompt for data
   783                        
   784                        NotWrite:
   785                        
   786                        ;===============================================================================
   787                        ; X - XMODEM Receive
   788                        ;-------------------------------------------------------------------------------
   789                        
   790 00:0371: C9 58                        cmp     #'X'                    ; XModem upload?
   791 00:0373: F0 03                        beq     $+5                     ; Yes.
   792 00:0375: 4C xx xx                     jmp     NotXModem
   793                        
   794 00:0378: A2 23                        ldx     #ADDR_S                 ; Parse start address
   795 00:037A: 20 xx xx                     jsr     GetAddr
  Sat Jan 23 2016 14:15                                                                                                    Page 19


   796 00:037D: 90 03                        bcc     $+5
   797 00:037F: 4C xx xx                     jmp     ShowError
   798                        
   799 00:0382: 24 24                        bit     ADDR_S+1                ; Load into ROM area?
   800 00:0384: 10 03                        bpl     $+5
   801 00:0386: 20 xx xx                     jsr     CheckSafe               ; Yes, check selection
   802                        
   803                                        long_i                          ; Display waiting message
+  803 00:0389: C2 10                        rep     #X_FLAG
+  803                                        longi   on
   804 00:038B: A2 xx xx                     ldx     #WAITING
   805 00:038E: 20 xx xx                     jsr     TxStr
   806 00:0391: 20 xx xx                     jsr     TxCRLF
   807                                        short_i
+  807 00:0394: E2 10                        sep     #X_FLAG
+  807                                        longi   off
   808 00:0396: 64 29                        stz     BLOCK                   ; Reset the block number
   809 00:0398: E6 29                        inc     BLOCK
   810                        
   811                        ResetRetries:
   812 00:039A: A9 0A                        lda     #10                     ; Reset the retry counter
   813 00:039C: 85 2A                        sta     RETRIES
   814                        
   815                        TransferWait:
   816 00:039E: 64 2C                        stz     TEMP+0                  ; Clear timeout counter
   817 00:03A0: 64 2D                        stz     TEMP+1
   818 00:03A2: A9 EC                        lda     #-20
   819 00:03A4: 85 2E                        sta     TEMP+2
   820                        TransferPoll:
   821 00:03A6: 20 xx xx                     jsr     UartRxTest              ; Any data yet?
   822 00:03A9: B0 20                        bcs     TransferScan
   823 00:03AB: E6 2C                        inc     TEMP+0
   824 00:03AD: D0 F7                        bne     TransferPoll
   825 00:03AF: E6 2D                        inc     TEMP+1
   826 00:03B1: D0 F3                        bne     TransferPoll
   827 00:03B3: E6 2E                        inc     TEMP+2
   828 00:03B5: D0 EF                        bne     TransferPoll
   829 00:03B7: C6 2A                        dec     RETRIES
   830 00:03B9: F0 05                        beq     TimedOut
   831 00:03BB: 20 xx xx                     jsr     SendNAK                 ; Send a NAK
   832 00:03BE: 80 DE                        bra     TransferWait
   833                        
   834                        TimedOut:
   835                                        long_i
+  835 00:03C0: C2 10                        rep     #X_FLAG
+  835                                        longi   on
   836 00:03C2: A2 xx xx                     ldx     #TIMEOUT
   837 00:03C5: 20 xx xx                     jsr     TxStr
   838                                        longi   off
   839 00:03C8: 4C xx xx                     jmp     NewCommand
   840                        
   841                        TransferScan:
   842 00:03CB: 20 xx xx                     jsr     UartRx                  ; Wait for SOH or EOT
   843 00:03CE: C9 04                        cmp     #EOT
   844 00:03D0: F0 63                        beq     TransferDone
   845 00:03D2: C9 01                        cmp     #SOH
   846 00:03D4: D0 C8                        bne     TransferWait
   847 00:03D6: 20 xx xx                     jsr     UartRx                  ; Check the block number
  Sat Jan 23 2016 14:15                                                                                                    Page 20


   848 00:03D9: C5 29                        cmp     BLOCK
   849 00:03DB: D0 52                        bne     TransferError
   850 00:03DD: 20 xx xx                     jsr     UartRx                  ; Check inverted block
   851 00:03E0: 49 FF                        eor     #$ff
   852 00:03E2: C5 29                        cmp     BLOCK
   853 00:03E4: D0 49                        bne     TransferError
   854                        
   855 00:03E6: A0 00                        ldy     #0
   856 00:03E8: 84 2B                        sty     SUM                     ; Clear the check sum
   857                        TransferBlock:
   858 00:03EA: 20 xx xx                     jsr     UartRx
   859 00:03ED: 48                           pha
   860                        
   861 00:03EE: A5 25                        lda     ADDR_S+2                ; Writing to ROM?
   862 00:03F0: D0 13                        bne     WriteByte               ; No
   863 00:03F2: 24 24                        bit     ADDR_S+1
   864 00:03F4: 10 0F                        bpl     WriteByte               ; No
   865                        
   866 00:03F6: A9 AA                        lda     #$aa                    ; Yes, unlock flash
   867 00:03F8: 8D 55 D5                     sta     $8000+$5555
   868 00:03FB: A9 55                        lda     #$55
   869 00:03FD: 8D AA AA                     sta     $8000+$2aaa
   870 00:0400: A9 A0                        lda     #$a0                    ; Start byte write
   871 00:0402: 8D 55 D5                     sta     $8000+$5555
   872                        
   873                        WriteByte:
   874 00:0405: 68                           pla
   875 00:0406: 97 23                        sta     [ADDR_S],Y
   876                        
   877                        WriteWait:
   878 00:0408: D7 23                        cmp     [ADDR_S],Y              ; Wait for write
   879 00:040A: D0 FC                        bne     WriteWait
   880                        
   881 00:040C: 18                           clc                             ; Add to check sum
   882 00:040D: 65 2B                        adc     SUM
   883 00:040F: 85 2B                        sta     SUM
   884 00:0411: C8                           iny
   885 00:0412: C0 80                        cpy     #128
   886 00:0414: D0 D4                        bne     TransferBlock
   887 00:0416: 20 xx xx                     jsr     UartRx                  ; Check the check sum
   888 00:0419: C5 2B                        cmp     SUM
   889 00:041B: D0 12                        bne     TransferError           ; Failed
   890 00:041D: 18                           clc
   891 00:041E: 98                           tya
   892 00:041F: 65 23                        adc     ADDR_S+0                ; Bump address one block
   893 00:0421: 85 23                        sta     ADDR_S+0
   894 00:0423: 90 02                        bcc     $+4
   895 00:0425: E6 24                        inc     ADDR_S+1
   896                        
   897 00:0427: 20 xx xx                     jsr     SendACK                 ; Acknowledge block
   898 00:042A: E6 29                        inc     BLOCK                   ; Bump block number
   899 00:042C: 4C xx xx                     jmp     TransferWait
   900                        
   901                        TransferError;
   902 00:042F: 20 xx xx                     jsr     SendNAK                 ; Send a NAK
   903 00:0432: 4C xx xx                     jmp     TransferWait            ; And try again
   904                        
   905                        TransferDone:
  Sat Jan 23 2016 14:15                                                                                                    Page 21


   906 00:0435: 20 xx xx                     jsr     SendACK                 ; Acknowledge transmission
   907 00:0438: 4C xx xx                     jmp     NewCommand              ; Done
   908                        
   909                        SendACK:
   910 00:043B: A9 06                        lda     #ACK
   911 00:043D: 4C xx xx                     jmp     UartTx
   912                        
   913                        SendNAK:
   914 00:0440: A9 15                        lda     #NAK
   915 00:0442: 4C xx xx                     jmp     UartTx
   916                        
   917                        NotXModem:
   918                        
   919                        ;===============================================================================
   920                        ; ? - Help
   921                        ;-------------------------------------------------------------------------------
   922                        
   923 00:0445: C9 3F                        cmp     #'?'                    ; Help command?
   924 00:0447: D0 0B                        bne     NotHelp
   925                        
   926                                        long_i
+  926 00:0449: C2 10                        rep     #X_FLAG
+  926                                        longi   on
   927 00:044B: A2 xx xx                     ldx     #HELP                   ; Output help string
   928 00:044E: 20 xx xx                     jsr     TxStr
   929                                        longi   off
   930 00:0451: 4C xx xx                     jmp     NewCommand
   931                        NotHelp:
   932                        
   933                        ;-------------------------------------------------------------------------------
   934                        
   935                        ShowError:
   936                                        long_i
+  936 00:0454: C2 10                        rep     #X_FLAG
+  936                                        longi   on
   937 00:0456: A2 xx xx                     ldx     #ERROR                  ; Output error message
   938 00:0459: 20 xx xx                     jsr     TxStr
   939                                        longi   off
   940 00:045C: 4C xx xx                     jmp     NewCommand
   941                        
   942                        ;===============================================================================
   943                        ;-------------------------------------------------------------------------------
   944                        
   945                        ; Checks if an expendable ROM bank is currently selected. If the bank with the
   946                        ; WDC firmware is selected then warn and accept a new command.
   947                        
   948                        CheckSafe:
   949 00:045F: 20 xx xx                     jsr     RomCheck                ; WDC ROM selected?
   950 00:0462: F0 01                        beq     $+3
   951 00:0464: 60                           rts                             ; No, save to change
   952                        
   953 00:0465: 68                           pla                             ; Discard return address
   954 00:0466: 68                           pla
   955                                        long_i                          ; Complain about bank
+  955 00:0467: C2 10                        rep     #X_FLAG
+  955                                        longi   on
   956 00:0469: A2 xx xx                     ldx     #NOT_SAFE
   957 00:046C: 20 xx xx                     jsr     TxStr
  Sat Jan 23 2016 14:15                                                                                                    Page 22


   958                                        longi   off
   959 00:046F: 4C xx xx                     jmp     NewCommand              ; And start over
   960                        
   961                        ;===============================================================================
   962                        ; Byte and Word Parsing
   963                        ;-------------------------------------------------------------------------------
   964                        
   965                        ; Parse a hex byte from the command line and store it at the location indicated
   966                        ; by the X register.
   967                        
   968                        GetByte:
   969 00:0472: 9E 00 00                     stz     0,x                     ; Set the target address
   970 00:0475: 20 xx xx                     jsr     SkipSpaces              ; Skip to first real character
   971 00:0478: 90 01                        bcc     $+3
   972 00:047A: 60                           rts                             ; None found
   973 00:047B: 20 xx xx                     jsr     IsHexDigit              ; Must have at least one digit
   974 00:047E: 90 12                        bcc     ByteFail
   975 00:0480: 20 xx xx                     jsr     AddDigit
   976 00:0483: 20 xx xx                     jsr     NextChar
   977 00:0486: B0 08                        bcs     ByteDone
   978 00:0488: 20 xx xx                     jsr     IsHexDigit
   979 00:048B: 90 03                        bcc     ByteDone
   980 00:048D: 20 xx xx                     jsr     AddDigit
   981 00:0490: 18           ByteDone:       clc
   982 00:0491: 60                           rts
   983 00:0492: 38           ByteFail:       sec
   984 00:0493: 60                           rts
   985                        
   986                        ; Parse an address from the command line and store it at the location indicated
   987                        ; by the X register.
   988                        
   989                        GetAddr:
   990 00:0494: 9E 00 00                     stz     0,x                     ; Set the target address
   991 00:0497: 9E 01 00                     stz     1,x
   992 00:049A: A5 22                        lda     BANK
   993 00:049C: 9D 02 00                     sta     2,x
   994 00:049F: 20 xx xx                     jsr     SkipSpaces              ; Skip to first real character
   995 00:04A2: 90 01                        bcc     $+3
   996 00:04A4: 60                           rts                             ; None found
   997                        
   998 00:04A5: 20 xx xx                     jsr     IsHexDigit              ; Must have at least one digit
   999 00:04A8: 90 2C                        bcc     AddrFail
  1000 00:04AA: 20 xx xx                     jsr     AddDigit
  1001 00:04AD: 20 xx xx                     jsr     NextChar
  1002 00:04B0: B0 22                        bcs     AddrDone
  1003 00:04B2: 20 xx xx                     jsr     IsHexDigit
  1004 00:04B5: 90 1D                        bcc     AddrDone
  1005 00:04B7: 20 xx xx                     jsr     AddDigit
  1006 00:04BA: 20 xx xx                     jsr     NextChar
  1007 00:04BD: B0 15                        bcs     AddrDone
  1008 00:04BF: 20 xx xx                     jsr     IsHexDigit
  1009 00:04C2: 90 10                        bcc     AddrDone
  1010 00:04C4: 20 xx xx                     jsr     AddDigit
  1011 00:04C7: 20 xx xx                     jsr     NextChar
  1012 00:04CA: B0 08                        bcs     AddrDone
  1013 00:04CC: 20 xx xx                     jsr     IsHexDigit
  1014 00:04CF: 90 03                        bcc     AddrDone
  1015 00:04D1: 20 xx xx                     jsr     AddDigit
  Sat Jan 23 2016 14:15                                                                                                    Page 23


  1016 00:04D4: 18           AddrDone:       clc                             ; Carry clear got an address
  1017 00:04D5: 60                           rts
  1018 00:04D6: 38           AddrFail:       sec                             ; Carry set -- failed.
  1019 00:04D7: 60                           rts
  1020                        
  1021                        ; Add a hex digit to the 16-bit value being build at at the location indicated
  1022                        ; by X.
  1023                        
  1024                        AddDigit:
  1025 00:04D8: 38                           sec                             ; Convert ASCII to binary
  1026 00:04D9: E9 30                        sbc     #'0'
  1027 00:04DB: C9 0A                        cmp     #$0a
  1028 00:04DD: 90 02                        bcc     $+4
  1029 00:04DF: E9 07                        sbc     #7
  1030                        
  1031 00:04E1: 1E 00 00                     asl     0,x                     ; Shift up one nybble
  1032 00:04E4: 3E 01 00                     rol     1,x
  1033 00:04E7: 1E 00 00                     asl     0,x
  1034 00:04EA: 3E 01 00                     rol     1,x
  1035 00:04ED: 1E 00 00                     asl     0,x
  1036 00:04F0: 3E 01 00                     rol     1,x
  1037 00:04F3: 1E 00 00                     asl     0,x
  1038 00:04F6: 3E 01 00                     rol     1,x
  1039                        
  1040 00:04F9: 1D 00 00                     ora     0,x                     ; Merge in new digit
  1041 00:04FC: 9D 00 00                     sta     0,x                     ; .. and save
  1042 00:04FF: 60                           rts
  1043                        
  1044                        ;===============================================================================
  1045                        ; Command Line Parsing and Building
  1046                        ;-------------------------------------------------------------------------------
  1047                        
  1048                        ; Get the next character from the command buffer updating the position in X.
  1049                        ; Set the carry if the end of the buffer is reached.
  1050                        
  1051                        NextChar:
  1052 00:0500: C4 21                        cpy     BUFLEN                  ; Any characters left?
  1053 00:0502: 90 01                        bcc     $+3
  1054 00:0504: 60                           rts
  1055 00:0505: B9 00 02                     lda     BUFFER,y
  1056 00:0508: C8                           iny
  1057 00:0509: 4C xx xx                     jmp     ToUpperCase
  1058                        
  1059                        ; Skip over any spaces until a non-space character or the end of the string
  1060                        ; is reached.
  1061                        
  1062                        SkipSpaces:
  1063 00:050C: 20 xx xx                     jsr     NextChar                ; Fetch next character
  1064 00:050F: 90 01                        bcc     $+3                     ; Any left?
  1065 00:0511: 60                           rts                             ; No
  1066 00:0512: C9 20                        cmp     #' '                    ; Is it a space?
  1067 00:0514: F0 F6                        beq     SkipSpaces              ; Yes, try again
  1068 00:0516: 18                           clc
  1069 00:0517: 60                           rts                             ; Done
  1070                        
  1071                        ; Clear the buffer and the add the command character in A.
  1072                        
  1073                        StartCommand:
  Sat Jan 23 2016 14:15                                                                                                    Page 24


  1074 00:0518: 64 21                        stz     BUFLEN                  ; Clear the character count
  1075                        
  1076                        ; Append the character in A to the command being built updating the length.
  1077                        
  1078                        BuildCommand:
  1079 00:051A: A4 21                        ldy     BUFLEN
  1080 00:051C: E6 21                        inc     BUFLEN
  1081 00:051E: 99 00 02                     sta     BUFFER,y
  1082 00:0521: 60                           rts
  1083                        
  1084                        ; Convert the value in A into hex characters and append to the command buffer.
  1085                        
  1086                        BuildByte:
  1087 00:0522: 48                           pha                             ; Save the value
  1088 00:0523: 4A                           lsr     a                       ; Shift MS nybble down
  1089 00:0524: 4A                           lsr     a
  1090 00:0525: 4A                           lsr     a
  1091 00:0526: 4A                           lsr     a
  1092 00:0527: 20 xx xx                     jsr     HexToAscii              ; Convert to ASCII
  1093 00:052A: 20 xx xx                     jsr     BuildCommand            ; .. and add to command
  1094 00:052D: 68                           pla                             ; Pull LS nybble
  1095 00:052E: 20 xx xx                     jsr     HexToAscii              ; Convert to ASCII
  1096 00:0531: 4C xx xx                     jmp     BuildCommand            ; .. and add to command
  1097                        
  1098                        ;===============================================================================
  1099                        ; Character Classification
  1100                        ;-------------------------------------------------------------------------------
  1101                        
  1102                        ; If the character in MD_ACC is lower case then convert it to upper case.
  1103                        
  1104                        ToUpperCase:
  1105 00:0534: 20 xx xx                     jsr     IsLowerCase             ; Test the character
  1106 00:0537: 90 02                        bcc     $+4
  1107 00:0539: E9 20                        sbc     #32                     ; Convert lower case
  1108 00:053B: 18                           clc
  1109 00:053C: 60                           rts                             ; Done
  1110                        
  1111                        ; Determine if the character in MD_ACC is a lower case letter. Set the carry if it
  1112                        ; is, otherwise clear it.
  1113                        
  1114                                        longa   off
  1115                        IsLowerCase:
  1116 00:053D: C9 61                        cmp     #'a'                    ; Between a and z?
  1117 00:053F: 90 06                        bcc     ClearCarry
  1118 00:0541: C9 7B                        cmp     #'z'+1
  1119 00:0543: B0 02                        bcs     ClearCarry
  1120 00:0545: 38           SetCarry:       sec
  1121 00:0546: 60                           rts
  1122 00:0547: 18           ClearCarry:     clc
  1123 00:0548: 60                           rts
  1124                        
  1125                        ; Determine if the character in MD_ACC is a hex character. Set the carry if it is,
  1126                        ; otherwise clear it.
  1127                        
  1128                                        longa   off
  1129                        IsHexDigit:
  1130 00:0549: C9 30                        cmp     #'0'                    ; Between 0 and 9?
  1131 00:054B: 90 FA                        bcc     ClearCarry
  Sat Jan 23 2016 14:15                                                                                                    Page 25


  1132 00:054D: C9 3A                        cmp     #'9'+1
  1133 00:054F: 90 F4                        bcc     SetCarry
  1134 00:0551: C9 41                        cmp     #'A'                    ; Between MD_ACC and F?
  1135 00:0553: 90 F2                        bcc     ClearCarry
  1136 00:0555: C9 47                        cmp     #'F'+1
  1137 00:0557: 90 EC                        bcc     SetCarry
  1138 00:0559: 80 EC                        bra     ClearCarry
  1139                        
  1140                        ; Determine if the character in MD_ACC is a printable character. Set the carry if it
  1141                        ; is, otherwise clear it.
  1142                        
  1143                                        longa   off
  1144                        IsPrintable:
  1145 00:055B: C9 20                        cmp     #' '
  1146 00:055D: 90 E8                        bcc     ClearCarry
  1147 00:055F: C9 7F                        cmp     #DEL
  1148 00:0561: 90 E2                        bcc     SetCarry
  1149 00:0563: 80 E2                        bra     ClearCarry
  1150                        
  1151                        ;===============================================================================
  1152                        ; Display Utilities
  1153                        ;-------------------------------------------------------------------------------
  1154                        
  1155                        ; Display the value in MD_ACC as two hexadecimal digits.
  1156                        
  1157                        TxHex2:
  1158 00:0565: 48                           pha                             ; Save the original byte
  1159 00:0566: 4A                           lsr     a                       ; Shift down hi nybble
  1160 00:0567: 4A                           lsr     a
  1161 00:0568: 4A                           lsr     a
  1162 00:0569: 4A                           lsr     a
  1163 00:056A: 20 xx xx                     jsr     UartHex                 ; Display
  1164 00:056D: 68                           pla                             ; Recover data byte
  1165                        
  1166                        ; Display the LSB of the value in MD_ACC as a hexadecimal digit using decimal
  1167                        ; arithmetic to do the conversion.
  1168                        
  1169                        UartHex:
  1170 00:056E: 20 xx xx                     jsr     HexToAscii              ; Convert to ASCII
  1171 00:0571: 4C xx xx                     jmp     UartTx                  ; And display
  1172                        
  1173                        ; Convert a LSB of the value in MD_ACC to a hexadecimal digit using decimal
  1174                        ; arithmetic.
  1175                        
  1176                        HexToAscii:
  1177 00:0574: 29 0F                        and     #$0f                    ; Strip out lo nybble
  1178 00:0576: F8                           sed                             ; Convert to ASCII
  1179 00:0577: 18                           clc
  1180 00:0578: 69 90                        adc     #$90
  1181 00:057A: 69 40                        adc     #$40
  1182 00:057C: D8                           cld
  1183 00:057D: 60                           rts                             ; Done
  1184                        
  1185                        ; Display the string of characters starting a the memory location pointed to by
  1186                        ; X (16-bits).
  1187                        
  1188                                        .longa  off
  1189                                        .longi  on
  Sat Jan 23 2016 14:15                                                                                                    Page 26


  1190                        TxStr:
  1191 00:057E: BD 00 00                     lda     0,x                     ; Fetch the next character
  1192 00:0581: D0 01                        bne     $+3                     ; Return it end of string
  1193 00:0583: 60                           rts
  1194 00:0584: 20 xx xx                     jsr     UartTx                  ; Otherwise print it
  1195 00:0587: E8                           inx                             ; Bump the pointer
  1196 00:0588: 80 F4                        bra     TxStr                   ; And repeat
  1197                        
  1198                        ; Display a CR/LF control character sequence.
  1199                        
  1200                        TxCRLF:
  1201 00:058A: 20 xx xx                     jsr     TxCR                    ; Transmit a CR
  1202 00:058D: A9 0A                        lda     #LF                     ; Followed by a LF
  1203 00:058F: 4C xx xx                     jmp     UartTx
  1204                        
  1205                        TxCR:
  1206 00:0592: A9 0D                        lda     #CR                     ; Transmit a CR
  1207 00:0594: 4C xx xx                     jmp     UartTx
  1208                        
  1209                        TxSpace:
  1210 00:0597: A9 20                        lda     #' '                    ; Transmit a space
  1211 00:0599: 4C xx xx                     jmp     UartTx
  1212                        
  1213                        ;===============================================================================
  1214                        ;-------------------------------------------------------------------------------
  1215                        
  1216                        ;
  1217                        
  1218                                        longa   off
  1219                                        longi   off
  1220                        TxCodeBytes:
  1221 00:059C: A7 23                        lda     [ADDR_S]                ; Fetch the opcode
  1222 00:059E: 20 xx xx                     jsr     OpcodeSize              ; and work out its size
  1223 00:05A1: AA                           tax
  1224 00:05A2: A0 00                        ldy     #0                      ; Clear byte count
  1225                        CodeLoop:
  1226 00:05A4: B7 23                        lda     [ADDR_S],Y              ; Fetch a byte of code
  1227 00:05A6: 20 xx xx                     jsr     TxHex2
  1228 00:05A9: 20 xx xx                     jsr     TxSpace
  1229 00:05AC: C8                           iny
  1230 00:05AD: CA                           dex
  1231 00:05AE: D0 F4                        bne     CodeLoop
  1232                        PadLoop:
  1233 00:05B0: C0 04                        cpy     #4                      ; Need to pad out?
  1234 00:05B2: D0 01                        bne     $+3
  1235 00:05B4: 60                           rts
  1236 00:05B5: 20 xx xx                     jsr     TxSpace
  1237 00:05B8: 20 xx xx                     jsr     TxSpace
  1238 00:05BB: 20 xx xx                     jsr     TxSpace
  1239 00:05BE: C8                           iny
  1240 00:05BF: 80 EF                        bra     PadLoop
  1241                        
  1242                        ;
  1243                        
  1244                                        longa   off
  1245                                        longi   off
  1246                        TxSymbolic:
  1247 00:05C1: A7 23                        lda     [ADDR_S]                ; Fetch opcode
  Sat Jan 23 2016 14:15                                                                                                    Page 27


  1248 00:05C3: 48                           pha
  1249 00:05C4: 20 xx xx                     jsr     TxOpcode
  1250 00:05C7: 68                           pla
  1251 00:05C8: 20 xx xx                     jsr     TxOperand
  1252 00:05CB: 60                           rts
  1253                        
  1254                        ;
  1255                        
  1256                                        longa   off
  1257                                        longi   off
  1258                        TxOpcode:
  1259 00:05CC: 08                           php                             ; Save register sizes
  1260 00:05CD: AA                           tax                             ; Work out the mnemonic
  1261 00:05CE: BD xx xx                     lda     OPCODES,x
  1262 00:05D1: AA                           tax
  1263                                        long_a
+ 1263 00:05D2: C2 20                        rep     #M_FLAG
+ 1263                                        longa   on
  1264 00:05D4: BD xx xx                     lda     MNEMONICS,x
  1265                        
  1266 00:05D7: 48                           pha                             ; Save last character
  1267 00:05D8: 4A                           lsr     a                       ; Shift second down
  1268 00:05D9: 4A                           lsr     a
  1269 00:05DA: 4A                           lsr     a
  1270 00:05DB: 4A                           lsr     a
  1271 00:05DC: 4A                           lsr     a
  1272 00:05DD: 48                           pha                             ; Save it
  1273 00:05DE: 4A                           lsr     a                       ; Shift first down
  1274 00:05DF: 4A                           lsr     a
  1275 00:05E0: 4A                           lsr     a
  1276 00:05E1: 4A                           lsr     a
  1277 00:05E2: 4A                           lsr     a
  1278 00:05E3: 20 xx xx                     jsr     ExpandMnem              ; Print first
  1279 00:05E6: 68                           pla
  1280 00:05E7: 20 xx xx                     jsr     ExpandMnem              ; .. second
  1281 00:05EA: 68                           pla
  1282 00:05EB: 20 xx xx                     jsr     ExpandMnem              ; .. and third
  1283 00:05EE: 28                           plp
  1284 00:05EF: 20 xx xx                     jsr     TxSpace
  1285 00:05F2: 60                           rts
  1286                        
  1287                        ExpandMnem:
  1288 00:05F3: 18                           clc
  1289 00:05F4: 29 1F 00                     and     #$1f                    ; Expand letter code
  1290 00:05F7: 69 40 00                     adc     #'@'
  1291 00:05FA: 4C xx xx                     jmp     UartTx
  1292                        
  1293                        ;
  1294                        
  1295                                        longa   off
  1296                                        longi   off
  1297                        TxOperand:
  1298 00:05FD: AA                           tax                             ; Work out addressing mode
  1299 00:05FE: BD xx xx                     lda     MODES,x
  1300 00:0601: AA                           tax
  1301 00:0602: 7C xx xx                     jmp     (MODE_SHOW,x)
  1302                        
  1303                        MODE_SHOW:
  Sat Jan 23 2016 14:15                                                                                                    Page 28


  1304 00:0605: xx xx                        dw      TxAbsolute              ; a
  1305 00:0607: xx xx                        dw      TxAccumulator           ; A
  1306 00:0609: xx xx                        dw      TxAbsoluteX             ; a,x
  1307 00:060B: xx xx                        dw      TxAbsoluteY             ; a,y
  1308 00:060D: xx xx                        dw      TxLong                  ; al
  1309 00:060F: xx xx                        dw      TxLongX                 ; al,x
  1310 00:0611: xx xx                        dw      TxAbsoluteIndirect      ; (a)
  1311 00:0613: xx xx                        dw      TxAbsoluteXIndirect     ; (a,x)
  1312 00:0615: xx xx                        dw      TxDirect                ; d
  1313 00:0617: xx xx                        dw      TxStack                 ; d,s
  1314 00:0619: xx xx                        dw      TxDirectX               ; d,x
  1315 00:061B: xx xx                        dw      TxDirectY               ; d,y
  1316 00:061D: xx xx                        dw      TxDirectIndirect        ; (d)
  1317 00:061F: xx xx                        dw      TxDirectIndirectLong    ; [d]
  1318 00:0621: xx xx                        dw      TxStackIndirectY        ; (d,s),y
  1319 00:0623: xx xx                        dw      TxDirectXIndirect       ; (d,x)
  1320 00:0625: xx xx                        dw      TxDirectIndirectY       ; (d),y
  1321 00:0627: xx xx                        dw      TxDirectIndirectLongY   ; [d],y
  1322 00:0629: xx xx                        dw      TxImplied               ;
  1323 00:062B: xx xx                        dw      TxRelative              ; r
  1324 00:062D: xx xx                        dw      TxRelativeLong          ; rl
  1325 00:062F: xx xx                        dw      TxImplied               ; xyc
  1326 00:0631: xx xx                        dw      TxImmediateM            ; # (A & M)
  1327 00:0633: xx xx                        dw      TxImmediateByte         ; # (BRK/COP/WDM)
  1328 00:0635: xx xx                        dw      TxImmediateX            ; # (X or Y)
  1329                        
  1330                        
  1331                        TxAccumulator:
  1332 00:0637: A9 41                        lda     #'A'
  1333 00:0639: 4C xx xx                     jmp     UartTx
  1334                        
  1335                        TxImmediateM:
  1336 00:063C: A9 20                        lda     #M_FLAG
  1337 00:063E: 24 20                        bit     FLAGS
  1338 00:0640: F0 12                        beq     TxImmediateWord
  1339 00:0642: 80 09                        bra     TxImmediateByte
  1340                        
  1341                        TxImmediateX:
  1342 00:0644: A9 10                        lda     #X_FLAG
  1343 00:0646: 24 20                        bit     FLAGS
  1344 00:0648: F0 0A                        beq     TxImmediateWord
  1345 00:064A: 80 01                        bra     TxImmediateByte
  1346                        
  1347                        TxImplied:
  1348 00:064C: 60                           rts
  1349                        
  1350                        TxImmediateByte:
  1351 00:064D: A9 23                        lda     #'#'
  1352 00:064F: 20 xx xx                     jsr     UartTx
  1353 00:0652: 80 14                        bra     TxDirect
  1354                        
  1355                        TxImmediateWord:
  1356 00:0654: A9 23                        lda     #'#'
  1357 00:0656: 20 xx xx                     jsr     UartTx
  1358 00:0659: 80 33                        bra     TxAbsolute
  1359                        
  1360                        TxStack:
  1361 00:065B: 20 xx xx                     jsr     TxDirect
  Sat Jan 23 2016 14:15                                                                                                    Page 29


  1362 00:065E: A9 2C                        lda     #','
  1363 00:0660: 20 xx xx                     jsr     UartTx
  1364 00:0663: A9 53                        lda     #'S'
  1365 00:0665: 4C xx xx                     jmp     UartTx
  1366                        
  1367                        TxDirect:
  1368 00:0668: A9 24                        lda     #'$'
  1369 00:066A: 20 xx xx                     jsr     UartTx
  1370 00:066D: A0 01                        ldy     #1
  1371 00:066F: B7 23                        lda     [ADDR_S],Y
  1372 00:0671: 4C xx xx                     jmp     TxHex2
  1373                        
  1374                        TxDirectX:
  1375 00:0674: 20 xx xx                     jsr     TxDirect
  1376 00:0677: A9 2C        TxX:            lda     #','
  1377 00:0679: 20 xx xx                     jsr     UartTx
  1378 00:067C: A9 58                        lda     #'X'
  1379 00:067E: 4C xx xx                     jmp     UartTx
  1380                        
  1381                        TxDirectY:
  1382 00:0681: 20 xx xx                     jsr     TxDirect
  1383 00:0684: A9 2C        TxY:            lda     #','
  1384 00:0686: 20 xx xx                     jsr     UartTx
  1385 00:0689: A9 59                        lda     #'Y'
  1386 00:068B: 4C xx xx                     jmp     UartTx
  1387                        
  1388                        TxAbsolute:
  1389 00:068E: A9 24                        lda     #'$'
  1390 00:0690: 20 xx xx                     jsr     UartTx
  1391 00:0693: A0 02                        ldy     #2
  1392 00:0695: B7 23                        lda     [ADDR_S],Y
  1393 00:0697: 20 xx xx                     jsr     TxHex2
  1394 00:069A: 88                           dey
  1395 00:069B: B7 23                        lda     [ADDR_S],Y
  1396 00:069D: 4C xx xx                     jmp     TxHex2
  1397                        
  1398                        TxAbsoluteX:
  1399 00:06A0: 20 xx xx                     jsr     TxAbsolute
  1400 00:06A3: 80 D2                        bra     TxX
  1401                        
  1402                        TxAbsoluteY:
  1403 00:06A5: 20 xx xx                     jsr     TxAbsolute
  1404 00:06A8: 80 DA                        bra     TxY
  1405                        
  1406                        TxLong:
  1407 00:06AA: A9 24                        lda     #'$'
  1408 00:06AC: 20 xx xx                     jsr     UartTx
  1409 00:06AF: A0 03                        ldy     #3
  1410 00:06B1: B7 23                        lda     [ADDR_S],Y
  1411 00:06B3: 20 xx xx                     jsr     TxHex2
  1412 00:06B6: A9 3A                        lda     #':'
  1413 00:06B8: 20 xx xx                     jsr     UartTx
  1414 00:06BB: 88                           dey
  1415 00:06BC: B7 23                        lda     [ADDR_S],Y
  1416 00:06BE: 20 xx xx                     jsr     TxHex2
  1417 00:06C1: 88                           dey
  1418 00:06C2: B7 23                        lda     [ADDR_S],Y
  1419 00:06C4: 4C xx xx                     jmp     TxHex2
  Sat Jan 23 2016 14:15                                                                                                    Page 30


  1420                        
  1421                        TxLongX:
  1422 00:06C7: 20 xx xx                     jsr     TxLong
  1423 00:06CA: 80 AB                        bra     TxX
  1424                        
  1425                        TxAbsoluteIndirect:
  1426 00:06CC: A9 28                        lda     #'('
  1427 00:06CE: 20 xx xx                     jsr     UartTx
  1428 00:06D1: 20 xx xx                     jsr     TxAbsolute
  1429 00:06D4: A9 29                        lda     #')'
  1430 00:06D6: 4C xx xx                     jmp     UartTx
  1431                        
  1432                        TxAbsoluteXIndirect:
  1433 00:06D9: A9 28                        lda     #'('
  1434 00:06DB: 20 xx xx                     jsr     UartTx
  1435 00:06DE: 20 xx xx                     jsr     TxAbsoluteX
  1436 00:06E1: A9 29                        lda     #')'
  1437 00:06E3: 4C xx xx                     jmp     UartTx
  1438                        
  1439                        TxDirectIndirect:
  1440 00:06E6: A9 28                        lda     #'('
  1441 00:06E8: 20 xx xx                     jsr     UartTx
  1442 00:06EB: 20 xx xx                     jsr     TxDirect
  1443 00:06EE: A9 29                        lda     #')'
  1444 00:06F0: 4C xx xx                     jmp     UartTx
  1445                        
  1446                        TxDirectXIndirect:
  1447 00:06F3: A9 28                        lda     #'('
  1448 00:06F5: 20 xx xx                     jsr     UartTx
  1449 00:06F8: 20 xx xx                     jsr     TxDirectX
  1450 00:06FB: A9 29                        lda     #')'
  1451 00:06FD: 4C xx xx                     jmp     UartTx
  1452                        
  1453                        TxDirectIndirectY:
  1454 00:0700: A9 28                        lda     #'('
  1455 00:0702: 20 xx xx                     jsr     UartTx
  1456 00:0705: 20 xx xx                     jsr     TxDirect
  1457 00:0708: A9 29                        lda     #')'
  1458 00:070A: 20 xx xx                     jsr     UartTx
  1459 00:070D: 4C xx xx                     jmp     TxY
  1460                        
  1461                        TxDirectIndirectLong:
  1462 00:0710: A9 5B                        lda     #'['
  1463 00:0712: 20 xx xx                     jsr     UartTx
  1464 00:0715: 20 xx xx                     jsr     TxDirect
  1465 00:0718: A9 5D                        lda     #']'
  1466 00:071A: 4C xx xx                     jmp     UartTx
  1467                        
  1468                        TxDirectIndirectLongY:
  1469 00:071D: 20 xx xx                     jsr     TxDirectIndirectLong
  1470 00:0720: 4C xx xx                     jmp     TxY
  1471                        
  1472                        TxStackIndirectY:
  1473 00:0723: A9 28                        lda     #'('
  1474 00:0725: 20 xx xx                     jsr     UartTx
  1475 00:0728: 20 xx xx                     jsr     TxStack
  1476 00:072B: A9 29                        lda     #')'
  1477 00:072D: 20 xx xx                     jsr     UartTx
  Sat Jan 23 2016 14:15                                                                                                    Page 31


  1478 00:0730: 4C xx xx                     jmp     TxY
  1479                        
  1480                        TxRelative:
  1481 00:0733: A6 24                        ldx     ADDR_S+1                ; Work out next PC
  1482 00:0735: A5 23                        lda     ADDR_S+0
  1483 00:0737: 18                           clc
  1484 00:0738: 69 02                        adc     #2
  1485 00:073A: 90 01                        bcc     $+3
  1486 00:073C: E8                           inx
  1487                        
  1488 00:073D: 48                           pha                             ; Add relative offset
  1489 00:073E: A0 01                        ldy     #1
  1490 00:0740: B7 23                        lda     [ADDR_S],y
  1491 00:0742: 10 01                        bpl     $+3
  1492 00:0744: CA                           dex
  1493 00:0745: 18                           clc
  1494 00:0746: 63 01                        adc     1,s
  1495 00:0748: 83 01                        sta     1,s
  1496 00:074A: 90 01                        bcc     $+3
  1497 00:074C: E8                           inx
  1498 00:074D: 80 15                        bra     TxAddr
  1499                        
  1500                        TxRelativeLong:
  1501 00:074F: A6 24                        ldx     ADDR_S+1                ; Work out next PC
  1502 00:0751: A5 23                        lda     ADDR_S+0
  1503 00:0753: 18                           clc
  1504 00:0754: 69 03                        adc     #3
  1505 00:0756: 90 01                        bcc     $+3
  1506 00:0758: E8                           inx
  1507                        
  1508 00:0759: 18                           clc                             ; Add relative offset
  1509 00:075A: A0 01                        ldy     #1
  1510 00:075C: 77 23                        adc     [ADDR_S],y
  1511 00:075E: 48                           pha
  1512 00:075F: C8                           iny
  1513 00:0760: 8A                           txa
  1514 00:0761: 77 23                        adc     [ADDR_S],Y
  1515 00:0763: AA                           tax
  1516                        
  1517                        TxAddr:
  1518 00:0764: A9 24                        lda     #'$'                    ; Print address
  1519 00:0766: 20 xx xx                     jsr     UartTx
  1520 00:0769: 8A                           txa
  1521 00:076A: 20 xx xx                     jsr     TxHex2
  1522 00:076D: 68                           pla
  1523 00:076E: 4C xx xx                     jmp     TxHex2
  1524                        
  1525                        ;  Returns the size of the opcode in A given the current flag settings.
  1526                        
  1527                                        longa   off
  1528                                        longi   off
  1529                        OpcodeSize:
  1530 00:0771: AA                           tax                             ; Work out addressing mode
  1531 00:0772: BD xx xx                     lda     MODES,x
  1532 00:0775: AA                           tax
  1533 00:0776: 7C xx xx                     jmp     (MODE_SIZE,x)
  1534                        
  1535                        MODE_SIZE:
  Sat Jan 23 2016 14:15                                                                                                    Page 32


  1536 00:0779: xx xx                        dw      Size3                   ; a
  1537 00:077B: xx xx                        dw      Size1                   ; A
  1538 00:077D: xx xx                        dw      Size3                   ; a,x
  1539 00:077F: xx xx                        dw      Size3                   ; a,y
  1540 00:0781: xx xx                        dw      Size4                   ; al
  1541 00:0783: xx xx                        dw      Size4                   ; al,x
  1542 00:0785: xx xx                        dw      Size3                   ; (a)
  1543 00:0787: xx xx                        dw      Size3                   ; (a,x)
  1544 00:0789: xx xx                        dw      Size2                   ; d
  1545 00:078B: xx xx                        dw      Size2                   ; d,s
  1546 00:078D: xx xx                        dw      Size2                   ; d,x
  1547 00:078F: xx xx                        dw      Size2                   ; d,y
  1548 00:0791: xx xx                        dw      Size2                   ; (d)
  1549 00:0793: xx xx                        dw      Size2                   ; [d]
  1550 00:0795: xx xx                        dw      Size2                   ; (d,s),y
  1551 00:0797: xx xx                        dw      Size2                   ; (d,x)
  1552 00:0799: xx xx                        dw      Size2                   ; (d),y
  1553 00:079B: xx xx                        dw      Size2                   ; [d],y
  1554 00:079D: xx xx                        dw      Size1                   ;
  1555 00:079F: xx xx                        dw      Size2                   ; r
  1556 00:07A1: xx xx                        dw      Size3                   ; rl
  1557 00:07A3: xx xx                        dw      Size3                   ; xyc
  1558 00:07A5: xx xx                        dw      TestM                   ; # (A & M)
  1559 00:07A7: xx xx                        dw      Size2                   ; # (BRK/COP/WDM)
  1560 00:07A9: xx xx                        dw      TestX                   ; # (X or Y)
  1561                        
  1562                        TestM
  1563 00:07AB: A9 20                        lda     #M_FLAG                 ; Is M bit set?
  1564 00:07AD: 25 20                        and     FLAGS
  1565 00:07AF: F0 10                        beq     Size3                   ; No, word
  1566 00:07B1: 80 0B                        bra     Size2                   ; else byte
  1567                        
  1568                        TestX
  1569 00:07B3: A9 10                        lda     #X_FLAG                 ; Is X bit set?
  1570 00:07B5: 25 20                        and     FLAGS
  1571 00:07B7: F0 08                        beq     Size3                   ; No, word
  1572 00:07B9: 80 03                        bra     Size2                   ; else byte
  1573                        
  1574 00:07BB: A9 01        Size1:          lda     #1
  1575 00:07BD: 60                           rts
  1576 00:07BE: A9 02        Size2:          lda     #2
  1577 00:07C0: 60                           rts
  1578 00:07C1: A9 03        Size3           lda     #3
  1579 00:07C3: 60                           rts
  1580 00:07C4: A9 04        Size4:          lda     #4
  1581 00:07C6: 60                           rts
  1582                        
  1583                        OPCODES:
  1584 00:07C7: 16 52 28 52                  db      OP_BRK,OP_ORA,OP_COP,OP_ORA     ; 00
  1585 00:07CB: A0 52 04 52                  db      OP_TSB,OP_ORA,OP_ASL,OP_ORA
  1586 00:07CF: 62 52 04 5E                  db      OP_PHP,OP_ORA,OP_ASL,OP_PHD
  1587 00:07D3: A0 52 04 52                  db      OP_TSB,OP_ORA,OP_ASL,OP_ORA
  1588 00:07D7: 12 52 52 52                  db      OP_BPL,OP_ORA,OP_ORA,OP_ORA     ; 10
  1589 00:07DB: 9E 52 04 52                  db      OP_TRB,OP_ORA,OP_ASL,OP_ORA
  1590 00:07DF: 1E 52 36 9A                  db      OP_CLC,OP_ORA,OP_INC,OP_TCS
  1591 00:07E3: 9E 52 04 52                  db      OP_TRB,OP_ORA,OP_ASL,OP_ORA
  1592 00:07E7: 42 02 40 02                  db      OP_JSR,OP_AND,OP_JSL,OP_AND     ; 20
  1593 00:07EB: 0C 02 76 02                  db      OP_BIT,OP_AND,OP_ROL,OP_AND
  Sat Jan 23 2016 14:15                                                                                                    Page 33


  1594 00:07EF: 6E 02 76 6C                  db      OP_PLP,OP_AND,OP_ROL,OP_PLD
  1595 00:07F3: 0C 02 76 02                  db      OP_BIT,OP_AND,OP_ROL,OP_AND
  1596 00:07F7: 0E 02 02 02                  db      OP_BMI,OP_AND,OP_AND,OP_AND     ; 30
  1597 00:07FB: 0C 02 76 02                  db      OP_BIT,OP_AND,OP_ROL,OP_AND
  1598 00:07FF: 82 02 2E A2                  db      OP_SEC,OP_AND,OP_DEC,OP_TSC
  1599 00:0803: 0C 02 76 02                  db      OP_BIT,OP_AND,OP_ROL,OP_AND
  1600 00:0807: 7A 34 B2 34                  db      OP_RTI,OP_EOR,OP_WDM,OP_EOR     ; 40
  1601 00:080B: 4E 34 4A 34                  db      OP_MVP,OP_EOR,OP_LSR,OP_EOR
  1602 00:080F: 5A 34 4A 60                  db      OP_PHA,OP_EOR,OP_LSR,OP_PHK
  1603 00:0813: 3E 34 4A 34                  db      OP_JMP,OP_EOR,OP_LSR,OP_EOR
  1604 00:0817: 1A 34 34 34                  db      OP_BVC,OP_EOR,OP_EOR,OP_EOR     ; 50
  1605 00:081B: 4C 34 4A 34                  db      OP_MVN,OP_EOR,OP_LSR,OP_EOR
  1606 00:081F: 22 34 66 98                  db      OP_CLI,OP_EOR,OP_PHY,OP_TCD
  1607 00:0823: 3E 34 4A 34                  db      OP_JMP,OP_EOR,OP_LSR,OP_EOR
  1608 00:0827: 7E 00 58 00                  db      OP_RTS,OP_ADC,OP_PER,OP_ADC     ; 60
  1609 00:082B: 92 00 78 00                  db      OP_STZ,OP_ADC,OP_ROR,OP_ADC
  1610 00:082F: 68 00 78 7C                  db      OP_PLA,OP_ADC,OP_ROR,OP_RTL
  1611 00:0833: 3E 00 78 00                  db      OP_JMP,OP_ADC,OP_ROR,OP_ADC
  1612 00:0837: 1C 00 00 00                  db      OP_BVS,OP_ADC,OP_ADC,OP_ADC     ; 70
  1613 00:083B: 92 00 78 00                  db      OP_STZ,OP_ADC,OP_ROR,OP_ADC
  1614 00:083F: 86 00 72 9C                  db      OP_SEI,OP_ADC,OP_PLY,OP_TDC
  1615 00:0843: 3E 00 78 00                  db      OP_JMP,OP_ADC,OP_ROR,OP_ADC
  1616 00:0847: 14 8A 18 8A                  db      OP_BRA,OP_STA,OP_BRL,OP_STA     ; 80
  1617 00:084B: 90 8A 8E 8A                  db      OP_STY,OP_STA,OP_STX,OP_STA
  1618 00:084F: 32 0C A6 5C                  db      OP_DEY,OP_BIT,OP_TXA,OP_PHB
  1619 00:0853: 90 8A 8E 8A                  db      OP_STY,OP_STA,OP_STX,OP_STA
  1620 00:0857: 06 8A 8A 8A                  db      OP_BCC,OP_STA,OP_STA,OP_STA     ; 90
  1621 00:085B: 90 8A 8E 8A                  db      OP_STY,OP_STA,OP_STX,OP_STA
  1622 00:085F: AC 8A A8 AA                  db      OP_TYA,OP_STA,OP_TXS,OP_TXY
  1623 00:0863: 92 8A 92 8A                  db      OP_STZ,OP_STA,OP_STZ,OP_STA
  1624 00:0867: 48 44 46 44                  db      OP_LDY,OP_LDA,OP_LDX,OP_LDA     ; A0
  1625 00:086B: 48 44 46 44                  db      OP_LDY,OP_LDA,OP_LDX,OP_LDA
  1626 00:086F: 96 44 94 6A                  db      OP_TAY,OP_LDA,OP_TAX,OP_PLB
  1627 00:0873: 48 44 46 44                  db      OP_LDY,OP_LDA,OP_LDX,OP_LDA
  1628 00:0877: 08 44 44 48                  db      OP_BCS,OP_LDA,OP_LDA,OP_LDY     ; B0
  1629 00:087B: 44 48 46 44                  db      OP_LDA,OP_LDY,OP_LDX,OP_LDA
  1630 00:087F: 24 44 A4 AE                  db      OP_CLV,OP_LDA,OP_TSX,OP_TYX
  1631 00:0883: 48 44 46 44                  db      OP_LDY,OP_LDA,OP_LDX,OP_LDA
  1632 00:0887: 2C 26 74 26                  db      OP_CPY,OP_CMP,OP_REP,OP_CMP     ; C0
  1633 00:088B: 2C 26 2E 26                  db      OP_CPY,OP_CMP,OP_DEC,OP_CMP
  1634 00:088F: 3A 26 30 B0                  db      OP_INY,OP_CMP,OP_DEX,OP_WAI
  1635 00:0893: 2C 26 2E 26                  db      OP_CPY,OP_CMP,OP_DEC,OP_CMP
  1636 00:0897: 10 26 26 26                  db      OP_BNE,OP_CMP,OP_CMP,OP_CMP     ; D0
  1637 00:089B: 56 26 2E 26                  db      OP_PEI,OP_CMP,OP_DEC,OP_CMP
  1638 00:089F: 20 26 64 8C                  db      OP_CLD,OP_CMP,OP_PHX,OP_STP
  1639 00:08A3: 3C 26 2E 26                  db      OP_JML,OP_CMP,OP_DEC,OP_CMP
  1640 00:08A7: 2A 80 88 80                  db      OP_CPX,OP_SBC,OP_SEP,OP_SBC     ; E0
  1641 00:08AB: 2A 80 36 80                  db      OP_CPX,OP_SBC,OP_INC,OP_SBC
  1642 00:08AF: 38 80 50 B4                  db      OP_INX,OP_SBC,OP_NOP,OP_XBA
  1643 00:08B3: 2A 80 36 80                  db      OP_CPX,OP_SBC,OP_INC,OP_SBC
  1644 00:08B7: 0A 80 80 80                  db      OP_BEQ,OP_SBC,OP_SBC,OP_SBC     ; F0
  1645 00:08BB: 54 80 36 80                  db      OP_PEA,OP_SBC,OP_INC,OP_SBC
  1646 00:08BF: 84 80 70 B6                  db      OP_SED,OP_SBC,OP_PLX,OP_XCE
  1647 00:08C3: 42 80 36 80                  db      OP_JSR,OP_SBC,OP_INC,OP_SBC
  1648                        
  1649                        MODES:
  1650 00:08C7: 2E 1E 2E 12                  db      MD_INT,MD_DIX,MD_INT,MD_STK     ; 00
  1651 00:08CB: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  Sat Jan 23 2016 14:15                                                                                                    Page 34


  1652 00:08CF: 24 2C 02 24                  db      MD_IMP,MD_IMM,MD_ACC,MD_IMP
  1653 00:08D3: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1654 00:08D7: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; 10
  1655 00:08DB: 10 14 14 22                  db      MD_DPG,MD_DPX,MD_DPX,MD_DLY
  1656 00:08DF: 24 06 02 24                  db      MD_IMP,MD_ABY,MD_ACC,MD_IMP
  1657 00:08E3: 00 04 04 0A                  db      MD_ABS,MD_ABX,MD_ABX,MD_ALX
  1658 00:08E7: 00 1E 08 12                  db      MD_ABS,MD_DIX,MD_ALG,MD_STK     ; 20
  1659 00:08EB: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1660 00:08EF: 24 2C 02 24                  db      MD_IMP,MD_IMM,MD_ACC,MD_IMP
  1661 00:08F3: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1662 00:08F7: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; 30
  1663 00:08FB: 14 14 14 22                  db      MD_DPX,MD_DPX,MD_DPX,MD_DLY
  1664 00:08FF: 24 06 02 24                  db      MD_IMP,MD_ABY,MD_ACC,MD_IMP
  1665 00:0903: 04 04 04 0A                  db      MD_ABX,MD_ABX,MD_ABX,MD_ALX
  1666 00:0907: 24 1E 2E 12                  db      MD_IMP,MD_DIX,MD_INT,MD_STK     ; 40
  1667 00:090B: 2A 10 10 1A                  db      MD_MOV,MD_DPG,MD_DPG,MD_DLI
  1668 00:090F: 24 2C 02 24                  db      MD_IMP,MD_IMM,MD_ACC,MD_IMP
  1669 00:0913: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1670 00:0917: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; 50
  1671 00:091B: 2A 14 14 22                  db      MD_MOV,MD_DPX,MD_DPX,MD_DLY
  1672 00:091F: 24 06 24 24                  db      MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1673 00:0923: 08 04 04 0A                  db      MD_ALG,MD_ABX,MD_ABX,MD_ALX
  1674 00:0927: 24 1E 24 12                  db      MD_IMP,MD_DIX,MD_IMP,MD_STK     ; 60
  1675 00:092B: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1676 00:092F: 24 2C 02 24                  db      MD_IMP,MD_IMM,MD_ACC,MD_IMP
  1677 00:0933: 0C 00 00 08                  db      MD_AIN,MD_ABS,MD_ABS,MD_ALG
  1678 00:0937: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; 70
  1679 00:093B: 14 14 14 22                  db      MD_DPX,MD_DPX,MD_DPX,MD_DLY
  1680 00:093F: 24 06 24 24                  db      MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1681 00:0943: 0E 04 04 0A                  db      MD_AIX,MD_ABX,MD_ABX,MD_ALX
  1682 00:0947: 26 1E 28 12                  db      MD_REL,MD_DIX,MD_RLG,MD_STK     ; 80
  1683 00:094B: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1684 00:094F: 24 2C 24 24                  db      MD_IMP,MD_IMM,MD_IMP,MD_IMP
  1685 00:0953: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1686 00:0957: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; 90
  1687 00:095B: 14 14 16 22                  db      MD_DPX,MD_DPX,MD_DPY,MD_DLY
  1688 00:095F: 24 06 24 24                  db      MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1689 00:0963: 00 04 04 0A                  db      MD_ABS,MD_ABX,MD_ABX,MD_ALX
  1690 00:0967: 30 1E 30 12                  db      MD_IMX,MD_DIX,MD_IMX,MD_STK     ; A0
  1691 00:096B: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1692 00:096F: 24 2C 24 24                  db      MD_IMP,MD_IMM,MD_IMP,MD_IMP
  1693 00:0973: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1694 00:0977: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; B0
  1695 00:097B: 14 14 16 22                  db      MD_DPX,MD_DPX,MD_DPY,MD_DLY
  1696 00:097F: 24 06 24 24                  db      MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1697 00:0983: 04 04 06 0A                  db      MD_ABX,MD_ABX,MD_ABY,MD_ALX
  1698 00:0987: 30 1E 2E 12                  db      MD_IMX,MD_DIX,MD_INT,MD_STK     ; C0
  1699 00:098B: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1700 00:098F: 24 2C 24 24                  db      MD_IMP,MD_IMM,MD_IMP,MD_IMP
  1701 00:0993: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1702 00:0997: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; D0
  1703 00:099B: 24 14 14 22                  db      MD_IMP,MD_DPX,MD_DPX,MD_DLY
  1704 00:099F: 24 06 24 24                  db      MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1705 00:09A3: 0C 04 04 0A                  db      MD_AIN,MD_ABX,MD_ABX,MD_ALX
  1706 00:09A7: 30 1E 2E 12                  db      MD_IMX,MD_DIX,MD_INT,MD_STK     ; E0
  1707 00:09AB: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1708 00:09AF: 24 2C 24 24                  db      MD_IMP,MD_IMM,MD_IMP,MD_IMP
  1709 00:09B3: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  Sat Jan 23 2016 14:15                                                                                                    Page 35


  1710 00:09B7: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; F0
  1711 00:09BB: 24 14 14 22                  db      MD_IMP,MD_DPX,MD_DPX,MD_DLY
  1712 00:09BF: 24 06 24 24                  db      MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1713 00:09C3: 0E 04 04 0A                  db      MD_AIX,MD_ABX,MD_ABX,MD_ALX
  1714                        
  1715                        MNEMONICS:
  1716                                        MNEM    'A','D','C'
+ 1716 00:09C7: 83 04                        dw      (((('A'-'@')<<5)|('D'-'@'))<<5)|('C'-'@')
  1717                                        MNEM    'A','N','D'
+ 1717 00:09C9: C4 05                        dw      (((('A'-'@')<<5)|('N'-'@'))<<5)|('D'-'@')
  1718                                        MNEM    'A','S','L'
+ 1718 00:09CB: 6C 06                        dw      (((('A'-'@')<<5)|('S'-'@'))<<5)|('L'-'@')
  1719                                        MNEM    'B','C','C'
+ 1719 00:09CD: 63 08                        dw      (((('B'-'@')<<5)|('C'-'@'))<<5)|('C'-'@')
  1720                                        MNEM    'B','C','S'
+ 1720 00:09CF: 73 08                        dw      (((('B'-'@')<<5)|('C'-'@'))<<5)|('S'-'@')
  1721                                        MNEM    'B','E','Q'
+ 1721 00:09D1: B1 08                        dw      (((('B'-'@')<<5)|('E'-'@'))<<5)|('Q'-'@')
  1722                                        MNEM    'B','I','T'
+ 1722 00:09D3: 34 09                        dw      (((('B'-'@')<<5)|('I'-'@'))<<5)|('T'-'@')
  1723                                        MNEM    'B','M','I'
+ 1723 00:09D5: A9 09                        dw      (((('B'-'@')<<5)|('M'-'@'))<<5)|('I'-'@')
  1724                                        MNEM    'B','N','E'
+ 1724 00:09D7: C5 09                        dw      (((('B'-'@')<<5)|('N'-'@'))<<5)|('E'-'@')
  1725                                        MNEM    'B','P','L'
+ 1725 00:09D9: 0C 0A                        dw      (((('B'-'@')<<5)|('P'-'@'))<<5)|('L'-'@')
  1726                                        MNEM    'B','R','A'
+ 1726 00:09DB: 41 0A                        dw      (((('B'-'@')<<5)|('R'-'@'))<<5)|('A'-'@')
  1727                                        MNEM    'B','R','K'
+ 1727 00:09DD: 4B 0A                        dw      (((('B'-'@')<<5)|('R'-'@'))<<5)|('K'-'@')
  1728                                        MNEM    'B','R','L'
+ 1728 00:09DF: 4C 0A                        dw      (((('B'-'@')<<5)|('R'-'@'))<<5)|('L'-'@')
  1729                                        MNEM    'B','V','C'
+ 1729 00:09E1: C3 0A                        dw      (((('B'-'@')<<5)|('V'-'@'))<<5)|('C'-'@')
  1730                                        MNEM    'B','V','S'
+ 1730 00:09E3: D3 0A                        dw      (((('B'-'@')<<5)|('V'-'@'))<<5)|('S'-'@')
  1731                                        MNEM    'C','L','C'
+ 1731 00:09E5: 83 0D                        dw      (((('C'-'@')<<5)|('L'-'@'))<<5)|('C'-'@')
  1732                                        MNEM    'C','L','D'
+ 1732 00:09E7: 84 0D                        dw      (((('C'-'@')<<5)|('L'-'@'))<<5)|('D'-'@')
  1733                                        MNEM    'C','L','I'
+ 1733 00:09E9: 89 0D                        dw      (((('C'-'@')<<5)|('L'-'@'))<<5)|('I'-'@')
  1734                                        MNEM    'C','L','V'
+ 1734 00:09EB: 96 0D                        dw      (((('C'-'@')<<5)|('L'-'@'))<<5)|('V'-'@')
  1735                                        MNEM    'C','M','P'
+ 1735 00:09ED: B0 0D                        dw      (((('C'-'@')<<5)|('M'-'@'))<<5)|('P'-'@')
  1736                                        MNEM    'C','O','P'
+ 1736 00:09EF: F0 0D                        dw      (((('C'-'@')<<5)|('O'-'@'))<<5)|('P'-'@')
  1737                                        MNEM    'C','P','X'
+ 1737 00:09F1: 18 0E                        dw      (((('C'-'@')<<5)|('P'-'@'))<<5)|('X'-'@')
  1738                                        MNEM    'C','P','Y'
+ 1738 00:09F3: 19 0E                        dw      (((('C'-'@')<<5)|('P'-'@'))<<5)|('Y'-'@')
  1739                                        MNEM    'D','E','C'
+ 1739 00:09F5: A3 10                        dw      (((('D'-'@')<<5)|('E'-'@'))<<5)|('C'-'@')
  1740                                        MNEM    'D','E','X'
+ 1740 00:09F7: B8 10                        dw      (((('D'-'@')<<5)|('E'-'@'))<<5)|('X'-'@')
  1741                                        MNEM    'D','E','Y'
+ 1741 00:09F9: B9 10                        dw      (((('D'-'@')<<5)|('E'-'@'))<<5)|('Y'-'@')
  Sat Jan 23 2016 14:15                                                                                                    Page 36


  1742                                        MNEM    'E','O','R'
+ 1742 00:09FB: F2 15                        dw      (((('E'-'@')<<5)|('O'-'@'))<<5)|('R'-'@')
  1743                                        MNEM    'I','N','C'
+ 1743 00:09FD: C3 25                        dw      (((('I'-'@')<<5)|('N'-'@'))<<5)|('C'-'@')
  1744                                        MNEM    'I','N','X'
+ 1744 00:09FF: D8 25                        dw      (((('I'-'@')<<5)|('N'-'@'))<<5)|('X'-'@')
  1745                                        MNEM    'I','N','Y'
+ 1745 00:0A01: D9 25                        dw      (((('I'-'@')<<5)|('N'-'@'))<<5)|('Y'-'@')
  1746                                        MNEM    'J','M','L'
+ 1746 00:0A03: AC 29                        dw      (((('J'-'@')<<5)|('M'-'@'))<<5)|('L'-'@')
  1747                                        MNEM    'J','M','P'
+ 1747 00:0A05: B0 29                        dw      (((('J'-'@')<<5)|('M'-'@'))<<5)|('P'-'@')
  1748                                        MNEM    'J','S','L'
+ 1748 00:0A07: 6C 2A                        dw      (((('J'-'@')<<5)|('S'-'@'))<<5)|('L'-'@')
  1749                                        MNEM    'J','S','R'
+ 1749 00:0A09: 72 2A                        dw      (((('J'-'@')<<5)|('S'-'@'))<<5)|('R'-'@')
  1750                                        MNEM    'L','D','A'
+ 1750 00:0A0B: 81 30                        dw      (((('L'-'@')<<5)|('D'-'@'))<<5)|('A'-'@')
  1751                                        MNEM    'L','D','X'
+ 1751 00:0A0D: 98 30                        dw      (((('L'-'@')<<5)|('D'-'@'))<<5)|('X'-'@')
  1752                                        MNEM    'L','D','Y'
+ 1752 00:0A0F: 99 30                        dw      (((('L'-'@')<<5)|('D'-'@'))<<5)|('Y'-'@')
  1753                                        MNEM    'L','S','R'
+ 1753 00:0A11: 72 32                        dw      (((('L'-'@')<<5)|('S'-'@'))<<5)|('R'-'@')
  1754                                        MNEM    'M','V','N'
+ 1754 00:0A13: CE 36                        dw      (((('M'-'@')<<5)|('V'-'@'))<<5)|('N'-'@')
  1755                                        MNEM    'M','V','P'
+ 1755 00:0A15: D0 36                        dw      (((('M'-'@')<<5)|('V'-'@'))<<5)|('P'-'@')
  1756                                        MNEM    'N','O','P'
+ 1756 00:0A17: F0 39                        dw      (((('N'-'@')<<5)|('O'-'@'))<<5)|('P'-'@')
  1757                                        MNEM    'O','R','A'
+ 1757 00:0A19: 41 3E                        dw      (((('O'-'@')<<5)|('R'-'@'))<<5)|('A'-'@')
  1758                                        MNEM    'P','E','A'
+ 1758 00:0A1B: A1 40                        dw      (((('P'-'@')<<5)|('E'-'@'))<<5)|('A'-'@')
  1759                                        MNEM    'P','E','I'
+ 1759 00:0A1D: A9 40                        dw      (((('P'-'@')<<5)|('E'-'@'))<<5)|('I'-'@')
  1760                                        MNEM    'P','E','R'
+ 1760 00:0A1F: B2 40                        dw      (((('P'-'@')<<5)|('E'-'@'))<<5)|('R'-'@')
  1761                                        MNEM    'P','H','A'
+ 1761 00:0A21: 01 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('A'-'@')
  1762                                        MNEM    'P','H','B'
+ 1762 00:0A23: 02 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('B'-'@')
  1763                                        MNEM    'P','H','D'
+ 1763 00:0A25: 04 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('D'-'@')
  1764                                        MNEM    'P','H','K'
+ 1764 00:0A27: 0B 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('K'-'@')
  1765                                        MNEM    'P','H','P'
+ 1765 00:0A29: 10 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('P'-'@')
  1766                                        MNEM    'P','H','X'
+ 1766 00:0A2B: 18 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('X'-'@')
  1767                                        MNEM    'P','H','Y'
+ 1767 00:0A2D: 19 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('Y'-'@')
  1768                                        MNEM    'P','L','A'
+ 1768 00:0A2F: 81 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('A'-'@')
  1769                                        MNEM    'P','L','B'
+ 1769 00:0A31: 82 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('B'-'@')
  1770                                        MNEM    'P','L','D'
+ 1770 00:0A33: 84 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('D'-'@')
  Sat Jan 23 2016 14:15                                                                                                    Page 37


  1771                                        MNEM    'P','L','P'
+ 1771 00:0A35: 90 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('P'-'@')
  1772                                        MNEM    'P','L','X'
+ 1772 00:0A37: 98 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('X'-'@')
  1773                                        MNEM    'P','L','Y'
+ 1773 00:0A39: 99 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('Y'-'@')
  1774                                        MNEM    'R','E','P'
+ 1774 00:0A3B: B0 48                        dw      (((('R'-'@')<<5)|('E'-'@'))<<5)|('P'-'@')
  1775                                        MNEM    'R','O','L'
+ 1775 00:0A3D: EC 49                        dw      (((('R'-'@')<<5)|('O'-'@'))<<5)|('L'-'@')
  1776                                        MNEM    'R','O','R'
+ 1776 00:0A3F: F2 49                        dw      (((('R'-'@')<<5)|('O'-'@'))<<5)|('R'-'@')
  1777                                        MNEM    'R','T','I'
+ 1777 00:0A41: 89 4A                        dw      (((('R'-'@')<<5)|('T'-'@'))<<5)|('I'-'@')
  1778                                        MNEM    'R','T','L'
+ 1778 00:0A43: 8C 4A                        dw      (((('R'-'@')<<5)|('T'-'@'))<<5)|('L'-'@')
  1779                                        MNEM    'R','T','S'
+ 1779 00:0A45: 93 4A                        dw      (((('R'-'@')<<5)|('T'-'@'))<<5)|('S'-'@')
  1780                                        MNEM    'S','B','C'
+ 1780 00:0A47: 43 4C                        dw      (((('S'-'@')<<5)|('B'-'@'))<<5)|('C'-'@')
  1781                                        MNEM    'S','E','C'
+ 1781 00:0A49: A3 4C                        dw      (((('S'-'@')<<5)|('E'-'@'))<<5)|('C'-'@')
  1782                                        MNEM    'S','E','D'
+ 1782 00:0A4B: A4 4C                        dw      (((('S'-'@')<<5)|('E'-'@'))<<5)|('D'-'@')
  1783                                        MNEM    'S','E','I'
+ 1783 00:0A4D: A9 4C                        dw      (((('S'-'@')<<5)|('E'-'@'))<<5)|('I'-'@')
  1784                                        MNEM    'S','E','P'
+ 1784 00:0A4F: B0 4C                        dw      (((('S'-'@')<<5)|('E'-'@'))<<5)|('P'-'@')
  1785                                        MNEM    'S','T','A'
+ 1785 00:0A51: 81 4E                        dw      (((('S'-'@')<<5)|('T'-'@'))<<5)|('A'-'@')
  1786                                        MNEM    'S','T','P'
+ 1786 00:0A53: 90 4E                        dw      (((('S'-'@')<<5)|('T'-'@'))<<5)|('P'-'@')
  1787                                        MNEM    'S','T','X'
+ 1787 00:0A55: 98 4E                        dw      (((('S'-'@')<<5)|('T'-'@'))<<5)|('X'-'@')
  1788                                        MNEM    'S','T','Y'
+ 1788 00:0A57: 99 4E                        dw      (((('S'-'@')<<5)|('T'-'@'))<<5)|('Y'-'@')
  1789                                        MNEM    'S','T','Z'
+ 1789 00:0A59: 9A 4E                        dw      (((('S'-'@')<<5)|('T'-'@'))<<5)|('Z'-'@')
  1790                                        MNEM    'T','A','X'
+ 1790 00:0A5B: 38 50                        dw      (((('T'-'@')<<5)|('A'-'@'))<<5)|('X'-'@')
  1791                                        MNEM    'T','A','Y'
+ 1791 00:0A5D: 39 50                        dw      (((('T'-'@')<<5)|('A'-'@'))<<5)|('Y'-'@')
  1792                                        MNEM    'T','C','D'
+ 1792 00:0A5F: 64 50                        dw      (((('T'-'@')<<5)|('C'-'@'))<<5)|('D'-'@')
  1793                                        MNEM    'T','C','S'
+ 1793 00:0A61: 73 50                        dw      (((('T'-'@')<<5)|('C'-'@'))<<5)|('S'-'@')
  1794                                        MNEM    'T','D','C'
+ 1794 00:0A63: 83 50                        dw      (((('T'-'@')<<5)|('D'-'@'))<<5)|('C'-'@')
  1795                                        MNEM    'T','R','B'
+ 1795 00:0A65: 42 52                        dw      (((('T'-'@')<<5)|('R'-'@'))<<5)|('B'-'@')
  1796                                        MNEM    'T','S','B'
+ 1796 00:0A67: 62 52                        dw      (((('T'-'@')<<5)|('S'-'@'))<<5)|('B'-'@')
  1797                                        MNEM    'T','S','C'
+ 1797 00:0A69: 63 52                        dw      (((('T'-'@')<<5)|('S'-'@'))<<5)|('C'-'@')
  1798                                        MNEM    'T','S','X'
+ 1798 00:0A6B: 78 52                        dw      (((('T'-'@')<<5)|('S'-'@'))<<5)|('X'-'@')
  1799                                        MNEM    'T','X','A'
+ 1799 00:0A6D: 01 53                        dw      (((('T'-'@')<<5)|('X'-'@'))<<5)|('A'-'@')
  Sat Jan 23 2016 14:15                                                                                                    Page 38


  1800                                        MNEM    'T','X','S'
+ 1800 00:0A6F: 13 53                        dw      (((('T'-'@')<<5)|('X'-'@'))<<5)|('S'-'@')
  1801                                        MNEM    'T','X','Y'
+ 1801 00:0A71: 19 53                        dw      (((('T'-'@')<<5)|('X'-'@'))<<5)|('Y'-'@')
  1802                                        MNEM    'T','Y','A'
+ 1802 00:0A73: 21 53                        dw      (((('T'-'@')<<5)|('Y'-'@'))<<5)|('A'-'@')
  1803                                        MNEM    'T','Y','X'
+ 1803 00:0A75: 38 53                        dw      (((('T'-'@')<<5)|('Y'-'@'))<<5)|('X'-'@')
  1804                                        MNEM    'W','A','I'
+ 1804 00:0A77: 29 5C                        dw      (((('W'-'@')<<5)|('A'-'@'))<<5)|('I'-'@')
  1805                                        MNEM    'W','D','M'
+ 1805 00:0A79: 8D 5C                        dw      (((('W'-'@')<<5)|('D'-'@'))<<5)|('M'-'@')
  1806                                        MNEM    'X','B','A'
+ 1806 00:0A7B: 41 60                        dw      (((('X'-'@')<<5)|('B'-'@'))<<5)|('A'-'@')
  1807                                        MNEM    'X','C','E'
+ 1807 00:0A7D: 65 60                        dw      (((('X'-'@')<<5)|('C'-'@'))<<5)|('E'-'@')
  1808                        
  1809                        ;===============================================================================
  1810                        ; String Literals
  1811                        ;-------------------------------------------------------------------------------
  1812                        
  1813 00:0A7F: 0D 0A        TITLE           db      CR,LF
  1814                                        ifdef   W65C816SXB
  1815                                        db      "W65C816SXB"
  1816                                        endif
  1817                                        ifdef   W65C265SXB
  1818 00:0A81: 57 36 35 43                  db      "W65C265SXB"
       00:0A85: 32 36 35 53 
       00:0A89: 58 42 
  1819                                        endif
  1820 00:0A8B: 2D 48 61 63                  db      "-Hacker [16.01]",0
       00:0A8F: 6B 65 72 20 
       00:0A93: 5B 31 36 2E 
       00:0A97: 30 31 5D 00 
  1821                        
  1822 00:0A9B: 0D 0A 45 72  ERROR           db      CR,LF,"Error - Type ? for help",0
       00:0A9F: 72 6F 72 20 
       00:0AA3: 2D 20 54 79 
       00:0AA7: 70 65 20 3F 
       00:0AAB: 20 66 6F 72 
       00:0AAF: 20 68 65 6C 
       00:0AB3: 70 00 
  1823                        
  1824 00:0AB5: 0D 0A 45 72  ERASE_FAILED    db      CR,LF,"Erase failed",0
       00:0AB9: 61 73 65 20 
       00:0ABD: 66 61 69 6C 
       00:0AC1: 65 64 00 
  1825 00:0AC4: 0D 0A 57 72  WRITE_FAILED    db      CR,LF,"Write failed",0
       00:0AC8: 69 74 65 20 
       00:0ACC: 66 61 69 6C 
       00:0AD0: 65 64 00 
  1826 00:0AD3: 0D 0A 57 44  NOT_SAFE        db      CR,LF,"WDC ROM Bank Selected",0
       00:0AD7: 43 20 52 4F 
       00:0ADB: 4D 20 42 61 
       00:0ADF: 6E 6B 20 53 
       00:0AE3: 65 6C 65 63 
       00:0AE7: 74 65 64 00 
  1827 00:0AEB: 0D 0A 49 6E  INVALID_S19     db      CR,LF,"Invalid S19 record",0
  Sat Jan 23 2016 14:15                                                                                                    Page 39


       00:0AEF: 76 61 6C 69 
       00:0AF3: 64 20 53 31 
       00:0AF7: 39 20 72 65 
       00:0AFB: 63 6F 72 64 
       00:0AFF: 00 
  1828                        
  1829 00:0B00: 0D 0A 57 61  WAITING         db      CR,LF,"Waiting for XMODEM transfer to start",0
       00:0B04: 69 74 69 6E 
       00:0B08: 67 20 66 6F 
       00:0B0C: 72 20 58 4D 
       00:0B10: 4F 44 45 4D 
       00:0B14: 20 74 72 61 
       00:0B18: 6E 73 66 65 
       00:0B1C: 72 20 74 6F 
       00:0B20: 20 73 74 61 
       00:0B24: 72 74 00 
  1830 00:0B27: 0D 0A 54 69  TIMEOUT         db      CR,LF,"Timeout",0
       00:0B2B: 6D 65 6F 75 
       00:0B2F: 74 00 
  1831                        
  1832 00:0B31: 0D 0A 42 20  HELP            db      CR,LF,"B bb           - Set memory bank"
       00:0B35: 62 62 20 20 
       00:0B39: 20 20 20 20 
       00:0B3D: 20 20 20 20 
       00:0B41: 20 2D 20 53 
       00:0B45: 65 74 20 6D 
       00:0B49: 65 6D 6F 72 
       00:0B4D: 79 20 62 61 
       00:0B51: 6E 6B 
  1833 00:0B53: 0D 0A 44 20                  db      CR,LF,"D ssss eeee    - Disassemble memory in current bank"
       00:0B57: 73 73 73 73 
       00:0B5B: 20 65 65 65 
       00:0B5F: 65 20 20 20 
       00:0B63: 20 2D 20 44 
       00:0B67: 69 73 61 73 
       00:0B6B: 73 65 6D 62 
       00:0B6F: 6C 65 20 6D 
       00:0B73: 65 6D 6F 72 
       00:0B77: 79 20 69 6E 
       00:0B7B: 20 63 75 72 
       00:0B7F: 72 65 6E 74 
       00:0B83: 20 62 61 6E 
       00:0B87: 6B 
  1834 00:0B88: 0D 0A 45 20                  db      CR,LF,"E              - Erase ROM area"
       00:0B8C: 20 20 20 20 
       00:0B90: 20 20 20 20 
       00:0B94: 20 20 20 20 
       00:0B98: 20 2D 20 45 
       00:0B9C: 72 61 73 65 
       00:0BA0: 20 52 4F 4D 
       00:0BA4: 20 61 72 65 
       00:0BA8: 61 
  1835                                        ifdef   W65C265SXB
  1836 00:0BA9: 0D 0A 46 20                  db      CR,LF,"F 0-1          - Disable/Enable WDC ROM"
       00:0BAD: 30 2D 31 20 
       00:0BB1: 20 20 20 20 
       00:0BB5: 20 20 20 20 
       00:0BB9: 20 2D 20 44 
  Sat Jan 23 2016 14:15                                                                                                    Page 40


       00:0BBD: 69 73 61 62 
       00:0BC1: 6C 65 2F 45 
       00:0BC5: 6E 61 62 6C 
       00:0BC9: 65 20 57 44 
       00:0BCD: 43 20 52 4F 
       00:0BD1: 4D 
  1837 00:0BD2: 0D 0A 48 20                  db      CR,LF,"H              - Hunt for RAM"
       00:0BD6: 20 20 20 20 
       00:0BDA: 20 20 20 20 
       00:0BDE: 20 20 20 20 
       00:0BE2: 20 2D 20 48 
       00:0BE6: 75 6E 74 20 
       00:0BEA: 66 6F 72 20 
       00:0BEE: 52 41 4D 
  1838                                        endif
  1839 00:0BF1: 0D 0A 47 20                  db      CR,LF,"G [xxxx]       - Run from bb:xxxx or invoke reset vector"
       00:0BF5: 5B 78 78 78 
       00:0BF9: 78 5D 20 20 
       00:0BFD: 20 20 20 20 
       00:0C01: 20 2D 20 52 
       00:0C05: 75 6E 20 66 
       00:0C09: 72 6F 6D 20 
       00:0C0D: 62 62 3A 78 
       00:0C11: 78 78 78 20 
       00:0C15: 6F 72 20 69 
       00:0C19: 6E 76 6F 6B 
       00:0C1D: 65 20 72 65 
       00:0C21: 73 65 74 20 
       00:0C25: 76 65 63 74 
       00:0C29: 6F 72 
  1840 00:0C2B: 0D 0A 4D 20                  db      CR,LF,"M ssss eeee    - Display memory in current bank"
       00:0C2F: 73 73 73 73 
       00:0C33: 20 65 65 65 
       00:0C37: 65 20 20 20 
       00:0C3B: 20 2D 20 44 
       00:0C3F: 69 73 70 6C 
       00:0C43: 61 79 20 6D 
       00:0C47: 65 6D 6F 72 
       00:0C4B: 79 20 69 6E 
       00:0C4F: 20 63 75 72 
       00:0C53: 72 65 6E 74 
       00:0C57: 20 62 61 6E 
       00:0C5B: 6B 
  1841 00:0C5C: 0D 0A 52 20                  db      CR,LF,"R 0-3          - Select ROM bank 0-3"
       00:0C60: 30 2D 33 20 
       00:0C64: 20 20 20 20 
       00:0C68: 20 20 20 20 
       00:0C6C: 20 2D 20 53 
       00:0C70: 65 6C 65 63 
       00:0C74: 74 20 52 4F 
       00:0C78: 4D 20 62 61 
       00:0C7C: 6E 6B 20 30 
       00:0C80: 2D 33 
  1842 00:0C82: 0D 0A 53 2E                  db      CR,LF,"S...           - Process S19 record"
       00:0C86: 2E 2E 20 20 
       00:0C8A: 20 20 20 20 
       00:0C8E: 20 20 20 20 
       00:0C92: 20 2D 20 50 
  Sat Jan 23 2016 14:15                                                                                                    Page 41


       00:0C96: 72 6F 63 65 
       00:0C9A: 73 73 20 53 
       00:0C9E: 31 39 20 72 
       00:0CA2: 65 63 6F 72 
       00:0CA6: 64 
  1843 00:0CA7: 0D 0A 57 20                  db      CR,LF,"W xxxx yy      - Set memory at xxxx to yy"
       00:0CAB: 78 78 78 78 
       00:0CAF: 20 79 79 20 
       00:0CB3: 20 20 20 20 
       00:0CB7: 20 2D 20 53 
       00:0CBB: 65 74 20 6D 
       00:0CBF: 65 6D 6F 72 
       00:0CC3: 79 20 61 74 
       00:0CC7: 20 78 78 78 
       00:0CCB: 78 20 74 6F 
       00:0CCF: 20 79 79 
  1844 00:0CD2: 0D 0A 58 20                  db      CR,LF,"X xxxx         - XMODEM receive to bb:xxxx"
       00:0CD6: 78 78 78 78 
       00:0CDA: 20 20 20 20 
       00:0CDE: 20 20 20 20 
       00:0CE2: 20 2D 20 58 
       00:0CE6: 4D 4F 44 45 
       00:0CEA: 4D 20 72 65 
       00:0CEE: 63 65 69 76 
       00:0CF2: 65 20 74 6F 
       00:0CF6: 20 62 62 3A 
       00:0CFA: 78 78 78 78 
  1845 00:0CFE: 00                           db      0
  1846                        
  1847                                        end


      Lines assembled: 2196
      Errors: 0
